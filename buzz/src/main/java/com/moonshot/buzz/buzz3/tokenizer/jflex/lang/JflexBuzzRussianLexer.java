/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzRussianLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\66\1\101\1\101\1\65\22\0\1\67\1\53\1\105"+
    "\1\63\1\102\2\105\1\43\1\46\1\51\1\43\2\105\1\106\1\103"+
    "\1\76\3\56\1\37\4\56\1\57\1\56\1\75\1\42\1\36\1\62"+
    "\1\41\1\54\1\104\1\3\1\64\1\31\1\45\1\64\1\12\1\13"+
    "\1\4\2\64\1\32\1\27\1\1\1\64\1\11\1\47\1\64\1\34"+
    "\2\64\1\2\5\64\1\46\1\100\1\51\1\105\1\61\1\0\1\3"+
    "\1\64\1\31\1\45\1\64\1\74\1\13\1\70\2\64\1\32\1\27"+
    "\1\1\1\64\1\44\1\72\1\64\1\34\1\73\1\71\1\2\1\64"+
    "\1\77\3\64\1\0\1\105\1\0\1\105\6\0\1\101\32\0\1\67"+
    "\11\0\1\64\11\0\1\0\1\64\1\0\1\55\2\0\1\64\5\0"+
    "\27\64\1\0\37\64\1\0\u01ca\64\4\0\14\64\16\0\5\64\7\0"+
    "\1\64\1\0\1\64\21\0\160\55\5\64\1\0\2\64\2\0\4\64"+
    "\10\0\1\64\1\0\3\64\1\0\1\64\1\0\24\64\1\0\123\64"+
    "\1\0\31\64\1\15\1\17\1\14\1\10\1\33\1\25\2\64\1\21"+
    "\1\64\1\30\1\20\1\6\1\22\1\5\1\23\1\64\1\24\1\26"+
    "\1\16\1\7\1\35\12\64\1\15\1\17\1\14\1\10\1\33\1\25"+
    "\2\64\1\21\1\64\1\30\1\20\1\6\1\22\1\5\1\23\1\64"+
    "\1\24\1\26\1\16\1\7\1\35\74\64\1\0\7\55\236\64\11\0"+
    "\46\64\2\0\1\64\7\0\47\64\11\0\55\55\1\55\1\55\1\0"+
    "\2\55\1\0\2\55\1\0\1\55\10\0\33\64\5\0\3\64\2\55"+
    "\33\0\13\55\5\0\53\64\25\55\12\56\4\0\2\64\1\55\143\64"+
    "\1\0\1\64\7\55\2\0\6\55\2\64\2\55\1\0\4\55\2\64"+
    "\12\56\3\64\2\0\1\64\20\0\1\64\1\55\36\64\33\55\2\0"+
    "\131\64\13\55\1\64\16\0\12\56\41\64\11\55\2\64\4\0\1\64"+
    "\5\0\26\64\4\55\1\64\11\55\1\64\3\55\1\64\5\55\22\0"+
    "\31\64\3\55\104\0\1\64\1\0\13\64\67\0\33\55\1\0\4\55"+
    "\66\64\3\55\1\64\22\55\1\64\7\55\12\64\2\55\2\0\12\56"+
    "\1\0\7\64\1\0\7\64\1\0\3\55\1\0\10\64\2\0\2\64"+
    "\2\0\26\64\1\0\7\64\1\0\1\64\3\0\4\64\2\0\1\55"+
    "\1\64\7\55\2\0\2\55\2\0\3\55\1\64\10\0\1\55\4\0"+
    "\2\64\1\0\3\64\2\55\2\0\12\56\2\64\17\0\3\55\1\0"+
    "\6\64\4\0\2\64\2\0\26\64\1\0\7\64\1\0\2\64\1\0"+
    "\2\64\1\0\2\64\2\0\1\55\1\0\5\55\4\0\2\55\2\0"+
    "\3\55\3\0\1\55\7\0\4\64\1\0\1\64\7\0\12\56\2\55"+
    "\3\64\1\55\13\0\3\55\1\0\11\64\1\0\3\64\1\0\26\64"+
    "\1\0\7\64\1\0\2\64\1\0\5\64\2\0\1\55\1\64\10\55"+
    "\1\0\3\55\1\0\3\55\2\0\1\64\17\0\2\64\2\55\2\0"+
    "\12\56\21\0\3\55\1\0\10\64\2\0\2\64\2\0\26\64\1\0"+
    "\7\64\1\0\2\64\1\0\5\64\2\0\1\55\1\64\7\55\2\0"+
    "\2\55\2\0\3\55\10\0\2\55\4\0\2\64\1\0\3\64\2\55"+
    "\2\0\12\56\1\0\1\64\20\0\1\55\1\64\1\0\6\64\3\0"+
    "\3\64\1\0\4\64\3\0\2\64\1\0\1\64\1\0\2\64\3\0"+
    "\2\64\3\0\3\64\3\0\14\64\4\0\5\55\3\0\3\55\1\0"+
    "\4\55\2\0\1\64\6\0\1\55\16\0\12\56\21\0\3\55\1\0"+
    "\10\64\1\0\3\64\1\0\27\64\1\0\12\64\1\0\5\64\3\0"+
    "\1\64\7\55\1\0\3\55\1\0\4\55\7\0\2\55\1\0\2\64"+
    "\6\0\2\64\2\55\2\0\12\56\22\0\2\55\1\0\10\64\1\0"+
    "\3\64\1\0\27\64\1\0\12\64\1\0\5\64\2\0\1\55\1\64"+
    "\7\55\1\0\3\55\1\0\4\55\7\0\2\55\7\0\1\64\1\0"+
    "\2\64\2\55\2\0\12\56\1\0\2\64\17\0\2\55\1\0\10\64"+
    "\1\0\3\64\1\0\51\64\2\0\1\64\7\55\1\0\3\55\1\0"+
    "\4\55\1\64\10\0\1\55\10\0\2\64\2\55\2\0\12\56\12\0"+
    "\6\64\2\0\2\55\1\0\22\64\3\0\30\64\1\0\11\64\1\0"+
    "\1\64\2\0\7\64\3\0\1\55\4\0\6\55\1\0\1\55\1\0"+
    "\10\55\22\0\2\55\15\0\60\64\1\55\2\64\7\55\5\0\7\64"+
    "\10\55\1\0\12\56\47\0\2\64\1\0\1\64\2\0\2\64\1\0"+
    "\1\64\2\0\1\64\6\0\4\64\1\0\7\64\1\0\3\64\1\0"+
    "\1\64\1\0\1\64\2\0\2\64\1\0\4\64\1\55\2\64\6\55"+
    "\1\0\2\55\1\64\2\0\5\64\1\0\1\64\1\0\6\55\2\0"+
    "\12\56\2\0\4\64\40\0\1\64\12\0\2\55\13\0\2\55\6\0"+
    "\12\56\13\0\1\55\1\0\1\55\1\0\1\55\4\0\2\55\10\64"+
    "\1\0\44\64\4\0\24\55\1\0\2\55\5\64\13\55\1\0\44\55"+
    "\11\0\1\55\71\0\53\64\24\55\1\64\12\56\6\0\6\64\4\55"+
    "\4\64\3\55\1\64\3\55\2\64\7\55\3\64\4\55\15\64\14\55"+
    "\1\64\1\55\12\56\4\55\2\0\46\64\1\0\1\64\5\0\1\64"+
    "\2\0\53\64\1\0\u014d\64\1\0\4\64\2\0\7\64\1\0\1\64"+
    "\1\0\4\64\2\0\51\64\1\0\4\64\2\0\41\64\1\0\4\64"+
    "\2\0\7\64\1\0\1\64\1\0\4\64\2\0\17\64\1\0\71\64"+
    "\1\0\4\64\2\0\103\64\2\0\3\55\40\0\20\64\20\0\125\64"+
    "\14\0\u026c\64\2\0\21\64\1\67\32\64\5\0\113\64\25\0\15\64"+
    "\1\0\4\64\3\55\13\0\22\64\3\55\13\0\22\64\2\55\14\0"+
    "\15\64\1\0\3\64\1\0\2\55\14\0\64\64\40\55\3\0\1\64"+
    "\4\0\1\64\1\55\2\0\12\56\41\0\3\55\2\0\12\56\6\0"+
    "\130\64\10\0\51\64\1\55\1\64\5\0\106\64\12\0\35\64\3\0"+
    "\14\55\4\0\14\55\12\0\12\56\36\64\2\0\5\64\13\0\54\64"+
    "\4\0\21\55\7\64\2\55\6\0\12\56\46\0\27\64\5\55\4\0"+
    "\65\64\12\55\1\0\35\55\2\0\1\55\12\56\6\0\12\56\15\0"+
    "\1\64\130\0\5\55\57\64\21\55\7\64\4\0\12\56\21\0\11\55"+
    "\14\0\3\55\36\64\15\55\2\64\12\56\54\64\16\55\14\0\44\64"+
    "\24\55\10\0\12\56\3\0\3\64\12\56\44\64\122\0\3\55\1\0"+
    "\25\55\4\64\1\55\4\64\3\55\2\64\11\0\300\64\47\55\25\0"+
    "\4\55\u0116\64\2\0\6\64\2\0\46\64\2\0\6\64\2\0\10\64"+
    "\1\0\1\64\1\0\1\64\1\0\1\64\1\0\37\64\2\0\65\64"+
    "\1\0\7\64\1\0\1\64\3\0\3\64\1\0\7\64\3\0\4\64"+
    "\2\0\6\64\4\0\15\64\5\0\3\64\1\0\7\64\3\0\13\67"+
    "\1\0\2\55\13\0\1\0\2\0\2\105\12\0\1\101\1\101\5\0"+
    "\1\67\57\0\1\67\21\0\1\64\15\0\1\64\20\0\15\64\63\0"+
    "\41\55\21\0\1\64\4\0\1\64\2\0\12\64\1\0\1\64\3\0"+
    "\5\64\6\0\1\64\1\0\1\64\1\0\1\64\1\0\4\64\1\0"+
    "\13\64\2\0\4\64\5\0\5\64\4\0\1\64\64\0\2\64\u04b5\0"+
    "\1\50\52\0\1\40\246\0\1\50\127\0\1\40\u049b\0\57\64\1\0"+
    "\57\64\1\0\205\64\6\0\4\64\3\55\2\64\14\0\46\64\1\0"+
    "\1\64\5\0\1\64\2\0\70\64\7\0\1\64\17\0\1\55\27\64"+
    "\11\0\7\64\1\0\7\64\1\0\7\64\1\0\7\64\1\0\7\64"+
    "\1\0\7\64\1\0\7\64\1\0\7\64\1\0\40\55\57\0\1\64"+
    "\u01d0\0\1\67\2\0\1\55\1\0\2\64\25\0\1\55\15\0\6\55"+
    "\1\0\5\64\5\0\2\64\4\0\126\64\2\0\2\55\2\55\3\64"+
    "\1\55\132\64\1\55\4\64\5\0\51\64\3\0\136\64\21\0\33\64"+
    "\65\0\20\64\u0200\0\u19b6\64\112\0\u51cd\64\63\0\u048d\64\103\0\56\64"+
    "\2\0\u010d\64\3\0\20\64\12\56\2\64\24\0\57\64\4\55\1\0"+
    "\12\55\1\55\31\64\7\0\1\55\106\64\12\0\2\55\45\0\11\64"+
    "\2\0\147\64\2\0\4\64\1\0\4\64\14\0\13\64\115\0\12\64"+
    "\1\55\3\64\1\55\4\64\1\55\27\64\5\55\30\0\64\64\14\0"+
    "\2\55\62\64\21\55\13\0\12\56\6\0\22\55\6\64\3\0\1\64"+
    "\4\0\12\56\34\64\10\55\2\0\27\64\15\55\14\0\35\64\3\0"+
    "\4\55\57\64\16\55\16\0\1\64\12\56\46\0\51\64\16\55\11\0"+
    "\3\64\1\55\10\64\2\55\2\0\12\56\6\0\27\64\3\0\1\64"+
    "\1\55\4\0\60\64\1\55\1\64\3\55\2\64\2\55\5\64\2\55"+
    "\1\64\1\55\1\64\30\0\3\64\2\0\13\64\5\55\2\0\3\64"+
    "\2\55\12\0\6\64\2\0\6\64\2\0\6\64\11\0\7\64\1\0"+
    "\7\64\221\0\43\64\10\55\1\0\2\55\2\0\12\56\6\0\u2ba4\64"+
    "\14\0\27\64\4\0\61\64\u2104\0\u016e\64\2\0\152\64\46\0\7\64"+
    "\14\0\5\64\5\0\1\64\1\55\12\64\1\0\15\64\1\0\5\64"+
    "\1\0\1\64\1\0\2\64\1\0\2\64\1\0\154\64\41\0\u016b\64"+
    "\22\0\100\64\2\0\66\64\50\0\14\64\4\0\20\55\20\0\7\55"+
    "\111\0\5\64\1\0\207\64\6\0\1\60\14\0\12\56\7\0\32\64"+
    "\6\0\32\64\3\0\1\55\7\0\131\64\3\0\6\64\2\0\6\64"+
    "\2\0\6\64\2\0\3\64\43\0\14\64\1\0\32\64\1\0\23\64"+
    "\1\0\2\64\1\0\17\64\2\0\16\64\42\0\173\64\u0102\0\1\55"+
    "\202\0\35\64\3\0\61\64\57\0\37\64\21\0\21\64\1\0\10\64"+
    "\66\0\36\64\2\0\44\64\4\0\10\64\60\0\236\64\2\0\12\56"+
    "\u0356\0\6\64\2\0\1\64\1\0\54\64\1\0\2\64\3\0\1\64"+
    "\2\0\27\64\252\0\26\64\12\0\32\64\106\0\70\64\6\0\2\64"+
    "\100\0\1\64\3\55\1\0\2\55\5\0\4\55\4\64\1\0\3\64"+
    "\1\0\33\64\4\0\3\55\4\0\1\55\40\0\35\64\203\0\66\64"+
    "\12\0\26\64\12\0\23\64\215\0\111\64\u03b7\0\3\55\65\64\17\55"+
    "\37\0\12\56\20\0\3\55\55\64\13\55\25\0\31\64\7\0\12\56"+
    "\6\0\3\55\44\64\16\55\1\0\12\56\100\0\3\55\60\64\16\55"+
    "\4\64\13\0\12\56\u04a6\0\53\64\15\55\10\0\12\56\u0936\0\u036f\64"+
    "\u0c91\0\u042f\64\u33d1\0\u0239\64\u04c7\0\105\64\13\0\1\64\56\55\20\0"+
    "\4\55\15\64\u4060\0\2\64\u2163\0\5\55\3\0\6\55\10\0\10\55"+
    "\2\0\7\55\36\0\4\55\224\0\3\55\u01bb\0\125\64\1\0\107\64"+
    "\1\0\2\64\2\0\1\64\2\0\2\64\2\0\4\64\1\0\14\64"+
    "\1\0\1\64\1\0\7\64\1\0\101\64\1\0\4\64\2\0\10\64"+
    "\1\0\7\64\1\0\34\64\1\0\4\64\1\0\5\64\1\0\1\64"+
    "\3\0\7\64\1\0\u0154\64\2\0\31\64\1\0\31\64\1\0\37\64"+
    "\1\0\31\64\1\0\37\64\1\0\31\64\1\0\37\64\1\0\31\64"+
    "\1\0\37\64\1\0\31\64\1\0\10\64\2\0\62\56\u1600\0\4\64"+
    "\1\0\33\64\1\0\2\64\1\0\1\64\2\0\1\64\1\0\12\64"+
    "\1\0\4\64\1\0\1\64\1\0\1\64\6\0\1\64\4\0\1\64"+
    "\1\0\1\64\1\0\1\64\1\0\3\64\1\0\2\64\1\0\1\64"+
    "\2\0\1\64\1\0\1\64\1\0\1\64\1\0\1\64\1\0\1\64"+
    "\1\0\2\64\1\0\1\64\2\0\4\64\1\0\7\64\1\0\4\64"+
    "\1\0\4\64\1\0\1\64\1\0\12\64\1\0\21\64\5\0\3\64"+
    "\1\0\5\64\1\0\21\64\u047d\0\1\50\116\0\1\50\303\0\2\50"+
    "\1\0\1\50\73\0\1\50\1\40\2\0\5\40\1\52\13\40\2\0"+
    "\1\52\u015e\0\4\50\1\0\1\50\2\0\5\50\1\0\1\50\2\0"+
    "\1\52\5\0\1\50\3\0\2\50\1\52\1\0\2\52\7\0\1\52"+
    "\1\0\1\52\1\0\1\52\5\0\1\50\33\0\1\50\u09b0\0\ua6d7\64"+
    "\51\0\u1035\64\13\0\336\64\u3fe2\0\u021e\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\55\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\21\2\1\1\1\3\2\1\1\4\1\2"+
    "\1\5\1\4\1\6\1\7\1\10\1\2\1\1\3\4"+
    "\1\1\2\2\1\4\1\2\1\4\3\2\1\11\26\2"+
    "\1\11\1\2\1\3\2\0\1\5\1\6\1\5\2\0"+
    "\1\5\1\4\1\2\1\5\1\6\1\0\1\6\1\4"+
    "\1\2\1\5\1\12\1\0\1\6\1\5\1\4\1\12"+
    "\3\2\2\13\1\2\1\14\1\2\1\15\1\16\1\2"+
    "\1\15\21\2\1\17\6\2\1\20\1\21\2\2\2\22"+
    "\1\23\2\22\1\2\2\0\1\16\1\24\4\0\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\107\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\107\0\u06a8\0\107\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0ad1\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d"+
    "\0\u10a4\0\u10eb\0\u1132\0\u0d97\0\u1179\0\u11c0\0\u05d3\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677"+
    "\0\u07c4\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\u0a43\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u10eb\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u1bbc\0\u2148\0\u218f\0\u21d6\0\u1d1f\0\u221d\0\u1e3b"+
    "\0\u2264\0\u1f57\0\u22ab\0\u22f2\0\u2339\0\u2101\0\u21d6\0\u2380"+
    "\0\u23c7\0\u240e\0\u2455\0\u249c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\4\1\11\1\12\1\4\1\13\1\14\1\15\1\16"+
    "\1\17\1\4\1\20\4\4\1\21\3\4\1\22\1\4"+
    "\1\23\1\24\1\4\1\25\1\26\1\27\1\2\1\11"+
    "\1\4\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\1\4\1\37\1\40\1\41\1\42\1\43\1\4"+
    "\1\44\2\2\1\45\3\4\1\46\1\42\1\47\1\50"+
    "\3\2\1\47\1\51\2\47\110\0\1\4\1\52\33\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\35\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\2\4\1\5\1\53\27\4\1\54"+
    "\1\4\1\0\1\4\4\0\2\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\1\53\4\4"+
    "\2\0\1\4\10\0\2\4\1\55\1\56\31\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\1\56\4\4\2\0\1\4"+
    "\10\0\4\4\1\7\1\57\27\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\6\4\1\10"+
    "\5\4\1\60\20\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\10\0\1\61\7\4\1\11\24\4"+
    "\1\0\1\4\4\0\1\11\1\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\5\4\2\0"+
    "\1\4\10\0\1\4\1\62\7\4\1\63\23\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\4\4\1\63\2\0\1\4"+
    "\10\0\13\4\1\64\1\65\20\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\14\4\1\14"+
    "\17\4\1\66\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\15\4\1\67\17\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\16\4"+
    "\1\70\1\71\15\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\10\0\4\4\1\72\1\73\11\4"+
    "\1\74\15\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\21\4\1\75\2\4\1\76\10\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\1\77\7\4\1\100\15\4\1\101\6\4\1\0"+
    "\1\4\4\0\1\100\1\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\14\4\1\102\15\4\1\103\2\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\14\4"+
    "\1\104\17\4\1\105\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\46\0\1\106\2\0\1\107\14\0"+
    "\1\107\2\0\1\107\12\0\1\107\53\0\1\107\14\0"+
    "\1\107\2\0\1\107\12\0\1\107\54\0\2\110\1\111"+
    "\1\112\1\111\1\0\1\111\20\0\1\111\13\0\1\110"+
    "\42\0\1\113\2\114\1\0\1\30\1\115\1\0\1\47"+
    "\5\0\1\113\1\0\1\47\1\116\1\47\11\0\1\116"+
    "\1\47\4\0\3\47\1\117\1\0\35\4\1\0\1\4"+
    "\2\0\1\113\1\114\1\120\1\4\1\115\1\31\6\0"+
    "\1\4\1\121\1\0\1\4\1\113\1\0\1\4\3\0"+
    "\5\4\1\113\1\0\1\4\6\0\1\114\42\0\1\122"+
    "\2\123\1\0\1\47\2\0\1\33\5\0\1\122\1\0"+
    "\1\47\1\124\1\47\11\0\1\124\1\47\4\0\3\47"+
    "\1\125\53\0\1\35\107\0\1\36\33\0\35\4\1\0"+
    "\1\4\3\0\1\110\1\126\1\127\1\112\1\127\1\0"+
    "\1\111\4\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\127\2\4\2\0\1\4\6\0\1\110\1\0"+
    "\35\130\1\0\1\131\4\0\2\130\1\0\1\130\5\0"+
    "\1\130\2\131\1\0\1\130\2\0\1\130\3\0\5\130"+
    "\2\0\1\130\10\0\35\4\1\0\1\4\4\0\2\4"+
    "\1\47\1\4\1\0\1\47\4\0\2\4\1\0\1\41"+
    "\2\47\1\4\3\0\5\4\2\47\1\4\3\0\4\47"+
    "\43\0\2\110\1\111\1\132\1\111\1\0\1\133\7\0"+
    "\3\47\6\0\1\111\2\0\2\47\4\0\3\47\1\134"+
    "\1\0\35\130\1\0\1\131\4\0\2\130\1\47\1\130"+
    "\1\0\1\47\3\0\1\130\2\131\1\0\1\135\2\47"+
    "\1\130\3\0\5\130\2\47\1\130\3\0\4\47\66\0"+
    "\1\2\21\0\2\4\1\55\1\56\31\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\1\56\1\136\3\4\2\0\1\4"+
    "\10\0\1\4\1\62\7\4\1\63\23\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\1\4\1\137\2\4\1\63\2\0"+
    "\1\4\55\0\1\47\2\0\1\47\7\0\3\47\11\0"+
    "\2\47\4\0\4\47\1\0\35\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\140\10\0\35\141\1\0"+
    "\1\141\4\0\2\141\1\47\1\141\1\0\1\47\4\0"+
    "\2\141\1\0\1\142\2\47\1\141\3\0\5\141\2\47"+
    "\1\141\3\0\4\47\1\0\2\4\1\143\32\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\4\10\0"+
    "\2\4\2\55\31\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\1\55\4\4\2\0\1\4\10\0\3\4\1\144\6\4"+
    "\1\144\20\4\1\54\1\4\1\0\1\4\4\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\1\144\4\4\2\0\1\4\10\0\2\4\1\53"+
    "\1\56\31\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\1\56"+
    "\4\4\2\0\1\4\10\0\5\4\1\57\1\145\1\146"+
    "\25\4\1\0\1\4\4\0\2\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\5\4\2\0"+
    "\1\4\10\0\14\4\1\60\12\4\1\147\5\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\4\10\0"+
    "\1\61\10\4\1\150\1\151\22\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\4\4\1\150\2\0\1\4\10\0\1\4"+
    "\1\152\26\4\1\153\4\4\1\0\1\4\4\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\5\4\2\0\1\4\10\0\1\4\1\152\7\4"+
    "\1\63\23\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\1\63\2\0\1\4\10\0\13\4\1\64\1\154\20\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\14\4\1\154\1\155\17\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\14\4\1\104"+
    "\17\4\1\104\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\15\4\1\67\4\4\1\156\12\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\16\4\1\70\1\157\15\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\17\4\1\157"+
    "\1\160\14\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\4\4\1\161\12\4\1\162\15\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\5\4\1\73\1\163\5\4\1\164\20\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\4\10\0"+
    "\4\4\1\161\1\73\11\4\1\74\15\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\21\4"+
    "\1\75\2\4\1\165\10\4\1\0\1\4\4\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\5\4\2\0\1\4\10\0\24\4\1\165\1\166"+
    "\7\4\1\0\1\4\4\0\2\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\5\4\2\0"+
    "\1\4\10\0\1\77\1\4\1\167\6\4\1\170\23\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\1\170\2\0"+
    "\1\4\10\0\10\4\1\171\15\4\1\172\6\4\1\0"+
    "\1\4\4\0\1\171\1\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\1\77\7\4\1\171\15\4\1\101\6\4\1\0"+
    "\1\4\4\0\1\171\1\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\14\4\1\173\20\4\1\0\1\4\4\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\5\4\2\0\1\4\10\0\14\4\1\173\15\4"+
    "\1\103\2\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\14\4\1\66\17\4\1\105\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\4\46\0"+
    "\1\106\114\0\1\111\1\112\1\111\1\0\1\111\20\0"+
    "\1\111\61\0\1\111\1\0\1\111\1\0\1\111\20\0"+
    "\1\111\62\0\1\112\76\0\1\32\2\0\1\32\107\0"+
    "\1\113\14\0\1\113\2\0\1\113\12\0\1\113\53\0"+
    "\1\113\2\114\1\0\2\115\7\0\1\113\2\0\1\113"+
    "\12\0\1\113\10\0\1\114\36\0\1\32\2\0\1\32"+
    "\4\0\1\47\2\0\1\47\7\0\3\47\11\0\2\47"+
    "\4\0\4\47\42\0\1\113\3\0\1\47\2\0\1\47"+
    "\5\0\1\113\1\0\1\47\1\116\1\47\11\0\1\116"+
    "\1\47\4\0\4\47\1\0\35\4\1\0\1\4\2\0"+
    "\1\113\1\0\2\4\1\0\1\4\6\0\1\4\1\121"+
    "\1\0\1\4\1\113\1\0\1\4\3\0\5\4\1\113"+
    "\1\0\1\4\10\0\35\4\1\32\1\4\1\0\1\32"+
    "\2\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\45\0\1\34"+
    "\2\0\1\34\107\0\1\122\14\0\1\122\2\0\1\122"+
    "\12\0\1\122\47\0\1\34\2\0\1\34\4\0\1\47"+
    "\2\0\1\47\7\0\3\47\11\0\2\47\4\0\4\47"+
    "\42\0\1\122\3\0\1\47\2\0\1\47\5\0\1\122"+
    "\1\0\1\47\1\124\1\47\11\0\1\124\1\47\4\0"+
    "\4\47\1\0\35\4\1\0\1\4\4\0\1\4\1\127"+
    "\1\112\1\127\1\0\1\111\4\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\2\4\1\127\2\4\2\0\1\4"+
    "\10\0\35\4\1\0\1\4\4\0\1\4\1\127\1\0"+
    "\1\127\1\0\1\111\4\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\2\4\1\127\2\4\2\0\1\4\10\0"+
    "\35\130\1\0\1\130\4\0\2\130\1\0\1\130\5\0"+
    "\3\130\1\0\1\130\2\0\1\130\3\0\5\130\2\0"+
    "\1\130\55\0\1\132\2\0\1\47\7\0\3\47\11\0"+
    "\2\47\4\0\4\47\45\0\1\111\1\47\1\111\1\0"+
    "\1\133\7\0\3\47\6\0\1\111\2\0\2\47\4\0"+
    "\4\47\45\0\1\111\1\132\1\111\1\0\1\133\7\0"+
    "\3\47\6\0\1\111\2\0\2\47\4\0\4\47\1\0"+
    "\35\130\1\0\1\130\4\0\2\130\1\47\1\130\1\0"+
    "\1\47\3\0\3\130\1\0\1\135\2\47\1\130\3\0"+
    "\5\130\2\47\1\130\3\0\4\47\1\0\35\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\1\4\1\174\3\4\2\0"+
    "\1\4\10\0\35\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\175\2\4\2\0\1\4\10\0\35\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\176\10\0"+
    "\35\141\1\0\1\141\4\0\2\141\1\0\1\141\6\0"+
    "\2\141\1\0\1\141\2\0\1\141\3\0\5\141\2\0"+
    "\1\141\10\0\2\4\1\177\1\6\31\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\1\6\4\4\2\0\1\4\10\0"+
    "\3\4\1\144\6\4\1\144\22\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\1\144\4\4\2\0\1\4\10\0\6\4"+
    "\1\145\1\146\25\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\10\0\7\4\1\146\25\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\4\10\0"+
    "\27\4\1\147\5\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\10\0\11\4\1\150\1\151\22\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\1\150\2\0"+
    "\1\4\10\0\12\4\1\151\22\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\1\4\1\152"+
    "\26\4\1\200\4\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\10\0\30\4\1\200\1\201\3\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\14\4\1\154\1\202\17\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\15\4\1\202"+
    "\17\4\1\0\1\4\4\0\2\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\5\4\2\0"+
    "\1\4\10\0\22\4\1\156\1\203\11\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\17\4"+
    "\1\157\1\204\14\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\10\0\20\4\1\204\1\205\13\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\4\4\1\161\12\4\1\206\15\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\17\4"+
    "\1\206\15\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\6\4\1\163\5\4\1\164\20\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\4\4\1\207\7\4\1\164\20\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\24\4"+
    "\1\165\1\210\7\4\1\0\1\4\4\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\5\4\2\0\1\4\10\0\25\4\1\210\7\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\4\10\0"+
    "\2\4\1\167\5\4\1\211\24\4\1\0\1\4\4\0"+
    "\1\211\1\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\2\4"+
    "\1\167\6\4\1\170\23\4\1\0\1\4\4\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\1\170\2\0\1\4\10\0\10\4\1\171"+
    "\15\4\1\212\6\4\1\0\1\4\4\0\1\171\1\4"+
    "\1\0\1\4\6\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\5\4\2\0\1\4\10\0\26\4\1\212\6\4"+
    "\1\0\1\4\4\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\2\0\1\4"+
    "\10\0\35\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\2\4"+
    "\1\213\2\4\2\0\1\4\10\0\35\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\1\214\1\0\1\4\10\0"+
    "\35\4\1\0\1\4\4\0\2\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\5\4\2\0"+
    "\1\4\1\215\7\0\2\4\1\177\1\53\31\4\1\0"+
    "\1\4\4\0\2\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\1\53\4\4\2\0\1\4"+
    "\10\0\30\4\1\200\1\216\3\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\31\4\1\216"+
    "\3\4\1\0\1\4\4\0\2\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\5\4\2\0"+
    "\1\4\10\0\23\4\1\203\11\4\1\0\1\4\4\0"+
    "\2\4\1\0\1\4\6\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\5\4\2\0\1\4\10\0\20\4\1\204"+
    "\1\217\13\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\21\4\1\217\13\4\1\0\1\4"+
    "\4\0\2\4\1\0\1\4\6\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\2\0\1\4\10\0\4\4"+
    "\1\207\30\4\1\0\1\4\4\0\2\4\1\0\1\4"+
    "\6\0\2\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\2\0\1\4\10\0\10\4\1\211\24\4\1\0\1\4"+
    "\4\0\1\211\1\4\1\0\1\4\6\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\2\0\1\4\10\0"+
    "\35\4\1\0\1\4\4\0\2\4\1\0\1\4\6\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\3\4\1\175"+
    "\1\4\1\214\1\0\1\4\105\0\1\220\10\0\65\221"+
    "\2\0\12\221\1\0\5\221\54\222\1\0\6\222\1\0"+
    "\1\222\3\0\6\222\1\223\2\222\3\0\57\222\1\0"+
    "\6\222\1\0\1\222\3\0\6\222\1\0\2\222\3\0"+
    "\3\222\65\224\2\0\12\224\1\0\5\224\54\222\1\0"+
    "\6\222\1\0\1\222\3\0\6\222\1\221\2\222\3\0"+
    "\3\222\65\224\3\0\11\224\1\0\5\224";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9443];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\4\1\1\11\1\1\1\11"+
    "\52\1\2\0\3\1\2\0\5\1\1\0\5\1\1\0"+
    "\62\1\2\0\2\1\4\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzRussianLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3024) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 22: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 23: break;
          case 3: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 24: break;
          case 4: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 25: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 26: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 27: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 28: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 29: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 30: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 31: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 32: break;
          case 12: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 33: break;
          case 13: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 34: break;
          case 14: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 35: break;
          case 15: 
            { return JflexBuzzTokenizer.YES;
            }
          case 36: break;
          case 16: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 37: break;
          case 17: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 38: break;
          case 18: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 39: break;
          case 19: 
            { return JflexBuzzTokenizer.NO;
            }
          case 40: break;
          case 20: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 41: break;
          case 21: 
            { return JflexBuzzTokenizer.URL;
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

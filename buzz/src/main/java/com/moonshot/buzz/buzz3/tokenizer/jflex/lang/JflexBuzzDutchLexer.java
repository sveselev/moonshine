/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzDutchLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\56\1\70\1\70\1\55\22\0\1\57\1\41\1\50"+
    "\1\53\1\71\2\50\1\52\1\35\1\34\1\32\2\50\1\52\1\72"+
    "\1\65\3\44\1\26\4\44\1\45\1\44\1\64\1\31\1\25\1\51"+
    "\1\30\1\42\1\73\1\3\1\54\1\17\1\11\1\15\1\6\1\7"+
    "\1\4\1\54\1\23\1\20\1\16\1\1\1\12\1\5\1\36\1\54"+
    "\1\24\1\14\1\54\1\2\1\22\1\10\1\54\1\21\1\54\1\35"+
    "\1\67\1\34\1\50\1\47\1\0\1\3\1\54\1\17\1\11\1\15"+
    "\1\63\1\7\1\60\1\54\1\23\1\20\1\16\1\1\1\12\1\33"+
    "\1\13\1\54\1\24\1\62\1\61\1\2\1\22\1\66\1\54\1\21"+
    "\1\54\1\0\1\50\1\0\1\50\6\0\1\70\32\0\1\57\11\0"+
    "\1\54\11\0\1\50\1\54\1\0\1\43\2\0\1\54\5\0\27\54"+
    "\1\0\37\54\1\0\u01ca\54\4\0\14\54\16\0\5\54\7\0\1\54"+
    "\1\0\1\54\21\0\160\43\5\54\1\0\2\54\2\0\4\54\10\0"+
    "\1\54\1\0\3\54\1\0\1\54\1\0\24\54\1\0\123\54\1\0"+
    "\213\54\1\0\7\43\236\54\11\0\46\54\2\0\1\54\7\0\47\54"+
    "\11\0\55\43\1\43\1\43\1\0\2\43\1\0\2\43\1\0\1\43"+
    "\10\0\33\54\5\0\3\54\2\43\33\0\13\43\5\0\53\54\25\43"+
    "\12\44\4\0\2\54\1\43\143\54\1\0\1\54\7\43\2\0\6\43"+
    "\2\54\2\43\1\0\4\43\2\54\12\44\3\54\2\0\1\54\20\0"+
    "\1\54\1\43\36\54\33\43\2\0\131\54\13\43\1\54\16\0\12\44"+
    "\41\54\11\43\2\54\4\0\1\54\5\0\26\54\4\43\1\54\11\43"+
    "\1\54\3\43\1\54\5\43\22\0\31\54\3\43\104\0\1\54\1\0"+
    "\13\54\67\0\33\43\1\0\4\43\66\54\3\43\1\54\22\43\1\54"+
    "\7\43\12\54\2\43\2\0\12\44\1\0\7\54\1\0\7\54\1\0"+
    "\3\43\1\0\10\54\2\0\2\54\2\0\26\54\1\0\7\54\1\0"+
    "\1\54\3\0\4\54\2\0\1\43\1\54\7\43\2\0\2\43\2\0"+
    "\3\43\1\54\10\0\1\43\4\0\2\54\1\0\3\54\2\43\2\0"+
    "\12\44\2\54\17\0\3\43\1\0\6\54\4\0\2\54\2\0\26\54"+
    "\1\0\7\54\1\0\2\54\1\0\2\54\1\0\2\54\2\0\1\43"+
    "\1\0\5\43\4\0\2\43\2\0\3\43\3\0\1\43\7\0\4\54"+
    "\1\0\1\54\7\0\12\44\2\43\3\54\1\43\13\0\3\43\1\0"+
    "\11\54\1\0\3\54\1\0\26\54\1\0\7\54\1\0\2\54\1\0"+
    "\5\54\2\0\1\43\1\54\10\43\1\0\3\43\1\0\3\43\2\0"+
    "\1\54\17\0\2\54\2\43\2\0\12\44\21\0\3\43\1\0\10\54"+
    "\2\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54\1\0\5\54"+
    "\2\0\1\43\1\54\7\43\2\0\2\43\2\0\3\43\10\0\2\43"+
    "\4\0\2\54\1\0\3\54\2\43\2\0\12\44\1\0\1\54\20\0"+
    "\1\43\1\54\1\0\6\54\3\0\3\54\1\0\4\54\3\0\2\54"+
    "\1\0\1\54\1\0\2\54\3\0\2\54\3\0\3\54\3\0\14\54"+
    "\4\0\5\43\3\0\3\43\1\0\4\43\2\0\1\54\6\0\1\43"+
    "\16\0\12\44\21\0\3\43\1\0\10\54\1\0\3\54\1\0\27\54"+
    "\1\0\12\54\1\0\5\54\3\0\1\54\7\43\1\0\3\43\1\0"+
    "\4\43\7\0\2\43\1\0\2\54\6\0\2\54\2\43\2\0\12\44"+
    "\22\0\2\43\1\0\10\54\1\0\3\54\1\0\27\54\1\0\12\54"+
    "\1\0\5\54\2\0\1\43\1\54\7\43\1\0\3\43\1\0\4\43"+
    "\7\0\2\43\7\0\1\54\1\0\2\54\2\43\2\0\12\44\1\0"+
    "\2\54\17\0\2\43\1\0\10\54\1\0\3\54\1\0\51\54\2\0"+
    "\1\54\7\43\1\0\3\43\1\0\4\43\1\54\10\0\1\43\10\0"+
    "\2\54\2\43\2\0\12\44\12\0\6\54\2\0\2\43\1\0\22\54"+
    "\3\0\30\54\1\0\11\54\1\0\1\54\2\0\7\54\3\0\1\43"+
    "\4\0\6\43\1\0\1\43\1\0\10\43\22\0\2\43\15\0\60\54"+
    "\1\43\2\54\7\43\5\0\7\54\10\43\1\0\12\44\47\0\2\54"+
    "\1\0\1\54\2\0\2\54\1\0\1\54\2\0\1\54\6\0\4\54"+
    "\1\0\7\54\1\0\3\54\1\0\1\54\1\0\1\54\2\0\2\54"+
    "\1\0\4\54\1\43\2\54\6\43\1\0\2\43\1\54\2\0\5\54"+
    "\1\0\1\54\1\0\6\43\2\0\12\44\2\0\4\54\40\0\1\54"+
    "\12\0\2\43\13\0\2\43\6\0\12\44\13\0\1\43\1\0\1\43"+
    "\1\0\1\43\4\0\2\43\10\54\1\0\44\54\4\0\24\43\1\0"+
    "\2\43\5\54\13\43\1\0\44\43\11\0\1\43\71\0\53\54\24\43"+
    "\1\54\12\44\6\0\6\54\4\43\4\54\3\43\1\54\3\43\2\54"+
    "\7\43\3\54\4\43\15\54\14\43\1\54\1\43\12\44\4\43\2\0"+
    "\46\54\1\0\1\54\5\0\1\54\2\0\53\54\1\0\u014d\54\1\0"+
    "\4\54\2\0\7\54\1\0\1\54\1\0\4\54\2\0\51\54\1\0"+
    "\4\54\2\0\41\54\1\0\4\54\2\0\7\54\1\0\1\54\1\0"+
    "\4\54\2\0\17\54\1\0\71\54\1\0\4\54\2\0\103\54\2\0"+
    "\3\43\40\0\20\54\20\0\125\54\14\0\u026c\54\2\0\21\54\1\57"+
    "\32\54\5\0\113\54\25\0\15\54\1\0\4\54\3\43\13\0\22\54"+
    "\3\43\13\0\22\54\2\43\14\0\15\54\1\0\3\54\1\0\2\43"+
    "\14\0\64\54\40\43\3\0\1\54\4\0\1\54\1\43\2\0\12\44"+
    "\41\0\3\43\2\0\12\44\6\0\130\54\10\0\51\54\1\43\1\54"+
    "\5\0\106\54\12\0\35\54\3\0\14\43\4\0\14\43\12\0\12\44"+
    "\36\54\2\0\5\54\13\0\54\54\4\0\21\43\7\54\2\43\6\0"+
    "\12\44\46\0\27\54\5\43\4\0\65\54\12\43\1\0\35\43\2\0"+
    "\1\43\12\44\6\0\12\44\15\0\1\54\130\0\5\43\57\54\21\43"+
    "\7\54\4\0\12\44\21\0\11\43\14\0\3\43\36\54\15\43\2\54"+
    "\12\44\54\54\16\43\14\0\44\54\24\43\10\0\12\44\3\0\3\54"+
    "\12\44\44\54\122\0\3\43\1\0\25\43\4\54\1\43\4\54\3\43"+
    "\2\54\11\0\300\54\47\43\25\0\4\43\u0116\54\2\0\6\54\2\0"+
    "\46\54\2\0\6\54\2\0\10\54\1\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\37\54\2\0\65\54\1\0\7\54\1\0\1\54\3\0"+
    "\3\54\1\0\7\54\3\0\4\54\2\0\6\54\4\0\15\54\5\0"+
    "\3\54\1\0\7\54\3\0\13\57\1\0\2\43\13\0\1\50\2\0"+
    "\2\50\12\0\1\70\1\70\5\0\1\57\57\0\1\57\21\0\1\54"+
    "\15\0\1\54\20\0\15\54\63\0\41\43\21\0\1\54\4\0\1\54"+
    "\2\0\12\54\1\0\1\54\3\0\5\54\6\0\1\54\1\0\1\54"+
    "\1\0\1\54\1\0\4\54\1\0\13\54\2\0\4\54\5\0\5\54"+
    "\4\0\1\54\64\0\2\54\u04b5\0\1\37\52\0\1\27\246\0\1\37"+
    "\127\0\1\27\u049b\0\57\54\1\0\57\54\1\0\205\54\6\0\4\54"+
    "\3\43\2\54\14\0\46\54\1\0\1\54\5\0\1\54\2\0\70\54"+
    "\7\0\1\54\17\0\1\43\27\54\11\0\7\54\1\0\7\54\1\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0"+
    "\7\54\1\0\40\43\57\0\1\54\u01d0\0\1\57\2\0\1\43\1\0"+
    "\2\54\25\0\1\43\15\0\6\43\1\0\5\54\5\0\2\54\4\0"+
    "\126\54\2\0\2\43\2\43\3\54\1\43\132\54\1\43\4\54\5\0"+
    "\51\54\3\0\136\54\21\0\33\54\65\0\20\54\u0200\0\u19b6\54\112\0"+
    "\u51cd\54\63\0\u048d\54\103\0\56\54\2\0\u010d\54\3\0\20\54\12\44"+
    "\2\54\24\0\57\54\4\43\1\0\12\43\1\43\31\54\7\0\1\43"+
    "\106\54\12\0\2\43\45\0\11\54\2\0\147\54\2\0\4\54\1\0"+
    "\4\54\14\0\13\54\115\0\12\54\1\43\3\54\1\43\4\54\1\43"+
    "\27\54\5\43\30\0\64\54\14\0\2\43\62\54\21\43\13\0\12\44"+
    "\6\0\22\43\6\54\3\0\1\54\4\0\12\44\34\54\10\43\2\0"+
    "\27\54\15\43\14\0\35\54\3\0\4\43\57\54\16\43\16\0\1\54"+
    "\12\44\46\0\51\54\16\43\11\0\3\54\1\43\10\54\2\43\2\0"+
    "\12\44\6\0\27\54\3\0\1\54\1\43\4\0\60\54\1\43\1\54"+
    "\3\43\2\54\2\43\5\54\2\43\1\54\1\43\1\54\30\0\3\54"+
    "\2\0\13\54\5\43\2\0\3\54\2\43\12\0\6\54\2\0\6\54"+
    "\2\0\6\54\11\0\7\54\1\0\7\54\221\0\43\54\10\43\1\0"+
    "\2\43\2\0\12\44\6\0\u2ba4\54\14\0\27\54\4\0\61\54\u2104\0"+
    "\u016e\54\2\0\152\54\46\0\7\54\14\0\5\54\5\0\1\54\1\43"+
    "\12\54\1\0\15\54\1\0\5\54\1\0\1\54\1\0\2\54\1\0"+
    "\2\54\1\0\154\54\41\0\u016b\54\22\0\100\54\2\0\66\54\50\0"+
    "\14\54\4\0\20\43\20\0\7\43\111\0\5\54\1\0\207\54\6\0"+
    "\1\46\14\0\12\44\7\0\32\54\6\0\32\54\3\0\1\43\7\0"+
    "\131\54\3\0\6\54\2\0\6\54\2\0\6\54\2\0\3\54\43\0"+
    "\14\54\1\0\32\54\1\0\23\54\1\0\2\54\1\0\17\54\2\0"+
    "\16\54\42\0\173\54\u0102\0\1\43\202\0\35\54\3\0\61\54\57\0"+
    "\37\54\21\0\21\54\1\0\10\54\66\0\36\54\2\0\44\54\4\0"+
    "\10\54\60\0\236\54\2\0\12\44\u0356\0\6\54\2\0\1\54\1\0"+
    "\54\54\1\0\2\54\3\0\1\54\2\0\27\54\252\0\26\54\12\0"+
    "\32\54\106\0\70\54\6\0\2\54\100\0\1\54\3\43\1\0\2\43"+
    "\5\0\4\43\4\54\1\0\3\54\1\0\33\54\4\0\3\43\4\0"+
    "\1\43\40\0\35\54\203\0\66\54\12\0\26\54\12\0\23\54\215\0"+
    "\111\54\u03b7\0\3\43\65\54\17\43\37\0\12\44\20\0\3\43\55\54"+
    "\13\43\25\0\31\54\7\0\12\44\6\0\3\43\44\54\16\43\1\0"+
    "\12\44\100\0\3\43\60\54\16\43\4\54\13\0\12\44\u04a6\0\53\54"+
    "\15\43\10\0\12\44\u0936\0\u036f\54\u0c91\0\u042f\54\u33d1\0\u0239\54\u04c7\0"+
    "\105\54\13\0\1\54\56\43\20\0\4\43\15\54\u4060\0\2\54\u2163\0"+
    "\5\43\3\0\6\43\10\0\10\43\2\0\7\43\36\0\4\43\224\0"+
    "\3\43\u01bb\0\125\54\1\0\107\54\1\0\2\54\2\0\1\54\2\0"+
    "\2\54\2\0\4\54\1\0\14\54\1\0\1\54\1\0\7\54\1\0"+
    "\101\54\1\0\4\54\2\0\10\54\1\0\7\54\1\0\34\54\1\0"+
    "\4\54\1\0\5\54\1\0\1\54\3\0\7\54\1\0\u0154\54\2\0"+
    "\31\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0\37\54\1\0"+
    "\31\54\1\0\37\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0"+
    "\10\54\2\0\62\44\u1600\0\4\54\1\0\33\54\1\0\2\54\1\0"+
    "\1\54\2\0\1\54\1\0\12\54\1\0\4\54\1\0\1\54\1\0"+
    "\1\54\6\0\1\54\4\0\1\54\1\0\1\54\1\0\1\54\1\0"+
    "\3\54\1\0\2\54\1\0\1\54\2\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\2\54\1\0\1\54\2\0"+
    "\4\54\1\0\7\54\1\0\4\54\1\0\4\54\1\0\1\54\1\0"+
    "\12\54\1\0\21\54\5\0\3\54\1\0\5\54\1\0\21\54\u047d\0"+
    "\1\37\116\0\1\37\303\0\2\37\1\0\1\37\73\0\1\37\1\27"+
    "\2\0\5\27\1\40\13\27\2\0\1\40\u015e\0\4\37\1\0\1\37"+
    "\2\0\5\37\1\0\1\37\2\0\1\40\5\0\1\37\3\0\2\37"+
    "\1\40\1\0\2\40\7\0\1\40\1\0\1\40\1\0\1\40\5\0"+
    "\1\37\33\0\1\37\u09b0\0\ua6d7\54\51\0\u1035\54\13\0\336\54\u3fe2\0"+
    "\u021e\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\43\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\13\2\1\1\1\3\2\1\2\4\1\2"+
    "\1\5\1\6\1\7\1\10\1\2\1\1\4\4\1\1"+
    "\3\2\1\4\3\2\1\11\20\2\1\3\1\0\1\5"+
    "\1\0\2\6\1\0\1\6\1\4\1\5\2\0\1\5"+
    "\1\4\1\2\2\5\1\2\1\12\1\0\1\5\1\6"+
    "\1\4\1\12\3\2\2\13\1\2\1\11\1\14\1\11"+
    "\3\2\1\15\7\2\1\16\5\2\1\17\7\2\1\20"+
    "\2\2\1\21\2\2\2\22\3\2\2\0\3\2\1\23"+
    "\1\24\1\25\1\2\2\0\1\26\1\25\2\0\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\74\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\74\0\74\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0384\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u0528\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u0744\0\u1248\0\u07bc\0\u1284\0\u12c0"+
    "\0\u12fc\0\u12c0\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u0ac8\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u0bb8\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\u1860\0\u189c\0\u14a0\0\u18d8\0\u1914\0\u1950"+
    "\0\u1608\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u189c\0\u1914\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1b30"+
    "\0\u1ba8\0\u1c5c\0\u1c98\0\u1cd4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\12\1\13\3\4\1\14\4\4\1\15\1\4"+
    "\1\16\1\4\1\17\1\20\1\21\1\2\1\7\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\2\1\4"+
    "\1\31\1\32\1\33\1\34\1\35\1\34\1\36\1\4"+
    "\1\37\2\2\1\40\2\4\1\41\1\35\1\34\1\42"+
    "\3\2\1\34\1\43\75\0\1\4\1\44\22\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\24\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\2\4\1\5\1\45\17\4\1\46\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\1\45\3\4\2\0\1\4"+
    "\6\0\2\4\1\47\1\50\20\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\1\50\3\4\2\0\1\4\6\0\1\51"+
    "\3\4\1\52\17\4\1\0\1\4\4\0\1\52\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\6\0\1\4\1\53\3\4\1\54"+
    "\16\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\3\4\1\54"+
    "\2\0\1\4\6\0\4\4\1\55\2\4\1\56\14\4"+
    "\1\0\1\4\4\0\1\55\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\56"+
    "\6\0\2\4\1\57\5\4\1\60\13\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\11\4"+
    "\1\61\2\4\1\62\7\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\1\63\3\4\1\64"+
    "\10\4\1\65\6\4\1\0\1\4\4\0\1\64\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\6\0\2\4\1\66\17\4\1\67"+
    "\1\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\33\0\1\70\2\0\1\71\13\0\1\71\3\0"+
    "\1\71\12\0\1\71\40\0\1\71\13\0\1\71\3\0"+
    "\1\71\12\0\1\71\20\0\1\72\1\0\1\72\16\0"+
    "\2\73\1\72\1\74\1\72\13\0\1\73\52\0\1\75"+
    "\2\76\1\22\1\34\7\0\1\75\1\0\2\34\1\77"+
    "\1\100\1\34\10\0\1\77\1\34\4\0\2\34\31\0"+
    "\1\101\2\102\1\34\1\23\1\103\6\0\1\101\1\0"+
    "\2\34\1\104\1\105\1\34\10\0\1\104\1\34\4\0"+
    "\2\34\1\0\24\4\1\0\1\4\2\0\1\101\1\102"+
    "\1\106\1\0\1\103\1\24\5\0\1\4\1\107\1\0"+
    "\1\4\1\0\1\101\1\102\1\0\1\4\3\0\4\4"+
    "\1\101\1\0\1\4\46\0\1\27\74\0\1\30\32\0"+
    "\10\4\1\110\1\4\1\110\11\4\1\0\1\4\3\0"+
    "\1\73\1\111\1\72\1\74\1\110\5\0\2\4\1\0"+
    "\1\4\2\0\1\73\1\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\24\112\1\0\1\113\4\0\1\112\2\0"+
    "\1\112\4\0\1\112\2\113\1\0\1\112\4\0\1\112"+
    "\3\0\4\112\2\0\1\112\6\0\24\4\1\0\1\4"+
    "\4\0\1\4\2\34\1\4\5\0\2\4\1\0\1\33"+
    "\4\34\1\4\3\0\4\4\2\34\1\4\3\0\2\34"+
    "\34\0\2\34\11\0\5\34\10\0\2\34\4\0\2\34"+
    "\11\0\1\72\1\0\1\72\16\0\2\73\1\114\1\115"+
    "\1\72\10\0\3\34\1\116\1\34\10\0\2\34\4\0"+
    "\2\34\1\0\24\112\1\0\1\113\4\0\1\112\2\34"+
    "\1\112\4\0\1\112\2\113\1\0\1\117\4\34\1\112"+
    "\3\0\4\112\2\34\1\112\3\0\2\34\56\0\1\2"+
    "\16\0\2\4\1\47\1\50\20\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\1\50\1\120\2\4\2\0\1\4\6\0"+
    "\1\4\1\53\3\4\1\54\16\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\1\4\1\121\1\4\1\54\2\0\1\4"+
    "\6\0\4\4\1\55\2\4\1\56\14\4\1\0\1\4"+
    "\4\0\1\55\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\122\6\0\24\123"+
    "\1\0\1\123\4\0\1\123\2\34\1\123\5\0\2\123"+
    "\1\0\1\124\4\34\1\123\3\0\4\123\2\34\1\123"+
    "\3\0\2\34\1\0\2\4\1\125\21\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\2\4"+
    "\2\126\20\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\1\126"+
    "\3\4\2\0\1\4\6\0\3\4\1\127\2\4\1\127"+
    "\14\4\1\46\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\1\127"+
    "\3\4\2\0\1\4\6\0\2\4\1\130\1\126\6\4"+
    "\1\131\11\4\1\0\1\4\4\0\1\4\2\0\1\131"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\1\126"+
    "\3\4\2\0\1\4\6\0\2\4\1\132\1\50\20\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\1\50\3\4\2\0"+
    "\1\4\6\0\1\51\4\4\1\133\1\134\15\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\3\4\1\133\2\0\1\4"+
    "\6\0\1\51\3\4\1\52\5\4\1\135\11\4\1\0"+
    "\1\4\4\0\1\52\2\0\1\135\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\1\4\1\136\14\4\1\137\5\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\1\4\1\136"+
    "\3\4\1\54\16\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\3\4\1\54\2\0\1\4\6\0\4\4\1\140\2\4"+
    "\1\141\14\4\1\0\1\4\4\0\1\140\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\2\0\1\141\6\0\4\4\1\140\2\4\1\56\14\4"+
    "\1\0\1\4\4\0\1\140\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\56"+
    "\6\0\1\142\1\4\1\143\21\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\2\4\1\143"+
    "\5\4\1\60\13\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\61\2\4\1\144"+
    "\7\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\14\4\1\144\7\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\1\63\1\4"+
    "\1\145\2\4\1\146\16\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\3\4\1\146\2\0\1\4\6\0\4\4\1\147"+
    "\10\4\1\150\3\4\1\151\2\4\1\0\1\4\4\0"+
    "\1\147\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\1\63\3\4"+
    "\1\147\10\4\1\65\6\4\1\0\1\4\4\0\1\147"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\2\4\1\152\21\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\2\4\1\152\17\4\1\67\1\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\33\0\1\70"+
    "\56\0\1\72\1\0\1\72\20\0\1\72\1\0\1\72"+
    "\46\0\1\72\1\0\1\72\20\0\1\72\1\74\1\72"+
    "\72\0\1\74\63\0\1\26\2\0\1\26\74\0\1\75"+
    "\13\0\1\75\3\0\1\75\12\0\1\75\34\0\1\26"+
    "\2\0\1\26\3\0\2\34\11\0\5\34\10\0\2\34"+
    "\4\0\2\34\31\0\1\75\2\0\2\34\7\0\1\75"+
    "\1\0\2\34\1\77\2\34\10\0\1\77\1\34\4\0"+
    "\2\34\25\0\1\25\2\0\1\25\74\0\1\101\13\0"+
    "\1\101\3\0\1\101\12\0\1\101\40\0\1\101\2\102"+
    "\1\0\2\103\6\0\1\101\3\0\1\101\1\102\11\0"+
    "\1\101\34\0\1\25\2\0\1\25\3\0\2\34\11\0"+
    "\5\34\10\0\2\34\4\0\2\34\31\0\1\101\2\0"+
    "\2\34\7\0\1\101\1\0\2\34\1\104\2\34\10\0"+
    "\1\104\1\34\4\0\2\34\1\0\24\4\1\0\1\4"+
    "\2\0\1\101\1\0\1\4\2\0\1\4\5\0\1\4"+
    "\1\107\1\0\1\4\1\0\1\101\2\0\1\4\3\0"+
    "\4\4\1\101\1\0\1\4\6\0\24\4\1\25\1\4"+
    "\1\0\1\25\2\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\10\4\1\110\1\4\1\110\11\4\1\0\1\4"+
    "\4\0\1\4\1\72\1\0\1\110\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\10\4\1\110\1\4\1\110\11\4\1\0\1\4\4\0"+
    "\1\4\1\72\1\74\1\110\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\24\112"+
    "\1\0\1\112\4\0\1\112\2\0\1\112\4\0\3\112"+
    "\1\0\1\112\4\0\1\112\3\0\4\112\2\0\1\112"+
    "\16\0\1\72\1\0\1\72\20\0\1\114\1\34\1\72"+
    "\10\0\5\34\10\0\2\34\4\0\2\34\34\0\1\34"+
    "\1\115\11\0\5\34\10\0\2\34\4\0\2\34\11\0"+
    "\1\72\1\0\1\72\20\0\1\114\1\115\1\72\10\0"+
    "\5\34\10\0\2\34\4\0\2\34\1\0\24\112\1\0"+
    "\1\112\4\0\1\112\2\34\1\112\4\0\3\112\1\0"+
    "\1\117\4\34\1\112\3\0\4\112\2\34\1\112\3\0"+
    "\2\34\1\0\24\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\1\4\1\153\2\4\2\0\1\4\6\0\12\4\1\154"+
    "\11\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\4\4\1\140\2\4\1\56\14\4\1\0"+
    "\1\4\4\0\1\140\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\155\6\0"+
    "\24\123\1\0\1\123\4\0\1\123\2\0\1\123\5\0"+
    "\2\123\1\0\1\123\4\0\1\123\3\0\4\123\2\0"+
    "\1\123\6\0\2\4\1\156\1\157\20\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\1\157\3\4\2\0\1\4\6\0"+
    "\3\4\1\127\2\4\1\127\15\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\1\127\3\4\2\0\1\4\6\0\2\4"+
    "\1\130\1\126\6\4\1\160\11\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\160\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\1\126\3\4\2\0\1\4\6\0\12\4"+
    "\1\161\11\4\1\0\1\4\4\0\1\4\2\0\1\161"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\2\0\1\4\6\0\5\4\1\133\1\134\15\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\3\4\1\133\2\0\1\4"+
    "\6\0\6\4\1\134\15\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\12\4\1\135\1\162"+
    "\10\4\1\0\1\4\4\0\1\4\2\0\1\135\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\2\4\1\162"+
    "\1\4\2\0\1\4\6\0\1\4\1\136\14\4\1\163"+
    "\5\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\16\4\1\163\1\164\4\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\4\4"+
    "\1\140\2\4\1\165\14\4\1\0\1\4\4\0\1\140"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\165\6\0\7\4\1\165\14\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\165"+
    "\6\0\1\166\10\4\1\167\12\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\1\166\1\4"+
    "\1\143\21\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\2\0\1\4\6\0\2\4\1\145\1\4\1\170\17\4"+
    "\1\0\1\4\4\0\1\170\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\2\4\1\145\2\4\1\146\16\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\3\4\1\146\2\0\1\4\6\0"+
    "\4\4\1\147\10\4\1\171\3\4\1\172\2\4\1\0"+
    "\1\4\4\0\1\147\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\15\4\1\171\6\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\6\0\14\4\1\173\4\4\1\172"+
    "\2\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\12\4\1\174\11\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\24\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\1\175\1\0\1\4"+
    "\6\0\4\4\1\140\2\4\1\56\14\4\1\0\1\4"+
    "\4\0\1\140\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\56\1\176\5\0"+
    "\2\4\1\156\1\45\20\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\1\45\3\4\2\0\1\4\6\0\2\4\1\126"+
    "\1\177\20\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\1\177"+
    "\3\4\2\0\1\4\6\0\12\4\1\200\11\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\200\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\12\4\1\200\5\4\1\201\3\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\200\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\13\4\1\162"+
    "\10\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\2\4\1\162"+
    "\1\4\2\0\1\4\6\0\16\4\1\163\1\202\4\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\17\4\1\202\4\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\1\166\10\4\1\203"+
    "\12\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\11\4\1\203\12\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\4\4\1\170"+
    "\17\4\1\0\1\4\4\0\1\170\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\14\4\1\204\4\4\1\172\2\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\13\4\1\205\1\204\7\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\2\4\1\205\1\4\2\0\1\4\6\0\24\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\2\4\1\154\1\4"+
    "\1\175\1\0\1\4\72\0\1\206\6\0\55\207\2\0"+
    "\11\207\1\0\3\207\1\0\2\4\1\45\1\177\20\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\1\177\3\4\2\0"+
    "\1\4\6\0\12\4\1\200\5\4\1\210\3\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\200\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\20\4\1\210\3\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\6\0\13\4\1\211\1\204\7\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\2\4\1\211\1\4"+
    "\2\0\1\4\6\0\13\4\1\211\10\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\2\4\1\211\1\4\2\0\1\4"+
    "\5\0\42\212\1\0\10\212\1\0\1\212\3\0\5\212"+
    "\1\213\2\212\3\0\43\212\1\0\10\212\1\0\1\212"+
    "\3\0\5\212\1\0\2\212\3\0\1\212\55\214\2\0"+
    "\11\214\1\0\3\214\42\212\1\0\10\212\1\0\1\212"+
    "\3\0\5\212\1\207\2\212\3\0\1\212\55\214\3\0"+
    "\10\214\1\0\3\214";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\5\1\2\11\42\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\2\0\7\1\1\0"+
    "\61\1\2\0\7\1\2\0\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzDutchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2954) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 24: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 25: break;
          case 3: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 26: break;
          case 4: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 27: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 28: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 29: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 30: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 31: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 32: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 33: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 34: break;
          case 12: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 35: break;
          case 13: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 36: break;
          case 14: 
            { return JflexBuzzTokenizer.NO;
            }
          case 37: break;
          case 15: 
            { return JflexBuzzTokenizer.YES;
            }
          case 38: break;
          case 16: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 39: break;
          case 17: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 40: break;
          case 18: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 41: break;
          case 19: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 42: break;
          case 20: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 43: break;
          case 21: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 44: break;
          case 22: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 45: break;
          case 23: 
            { return JflexBuzzTokenizer.URL;
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

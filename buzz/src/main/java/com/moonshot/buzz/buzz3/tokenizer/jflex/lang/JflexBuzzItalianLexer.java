/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzItalianLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\55\1\67\1\67\1\54\22\0\1\56\1\40\1\47"+
    "\1\52\1\70\2\47\1\51\1\34\1\33\1\31\2\47\1\51\1\71"+
    "\1\64\3\43\1\25\4\43\1\44\1\43\1\63\1\30\1\24\1\50"+
    "\1\27\1\41\1\72\1\3\1\53\1\16\1\11\1\22\1\6\1\7"+
    "\1\4\1\23\1\53\1\17\1\15\1\1\1\12\1\5\1\35\1\53"+
    "\1\21\1\14\1\53\1\2\1\53\1\10\1\53\1\20\1\53\1\34"+
    "\1\66\1\33\1\47\1\46\1\0\1\3\1\53\1\16\1\11\1\22"+
    "\1\62\1\7\1\57\1\23\1\53\1\17\1\15\1\1\1\12\1\32"+
    "\1\13\1\53\1\21\1\61\1\60\1\2\1\53\1\65\1\53\1\20"+
    "\1\53\1\0\1\47\1\0\1\47\6\0\1\67\32\0\1\56\11\0"+
    "\1\53\11\0\1\47\1\53\1\0\1\42\2\0\1\53\5\0\14\53"+
    "\1\23\12\53\1\0\24\53\1\23\12\53\1\0\u01ca\53\4\0\14\53"+
    "\16\0\5\53\7\0\1\53\1\0\1\53\21\0\160\42\5\53\1\0"+
    "\2\53\2\0\4\53\10\0\1\53\1\0\3\53\1\0\1\53\1\0"+
    "\24\53\1\0\123\53\1\0\213\53\1\0\7\42\236\53\11\0\46\53"+
    "\2\0\1\53\7\0\47\53\11\0\55\42\1\42\1\42\1\0\2\42"+
    "\1\0\2\42\1\0\1\42\10\0\33\53\5\0\3\53\2\42\33\0"+
    "\13\42\5\0\53\53\25\42\12\43\4\0\2\53\1\42\143\53\1\0"+
    "\1\53\7\42\2\0\6\42\2\53\2\42\1\0\4\42\2\53\12\43"+
    "\3\53\2\0\1\53\20\0\1\53\1\42\36\53\33\42\2\0\131\53"+
    "\13\42\1\53\16\0\12\43\41\53\11\42\2\53\4\0\1\53\5\0"+
    "\26\53\4\42\1\53\11\42\1\53\3\42\1\53\5\42\22\0\31\53"+
    "\3\42\104\0\1\53\1\0\13\53\67\0\33\42\1\0\4\42\66\53"+
    "\3\42\1\53\22\42\1\53\7\42\12\53\2\42\2\0\12\43\1\0"+
    "\7\53\1\0\7\53\1\0\3\42\1\0\10\53\2\0\2\53\2\0"+
    "\26\53\1\0\7\53\1\0\1\53\3\0\4\53\2\0\1\42\1\53"+
    "\7\42\2\0\2\42\2\0\3\42\1\53\10\0\1\42\4\0\2\53"+
    "\1\0\3\53\2\42\2\0\12\43\2\53\17\0\3\42\1\0\6\53"+
    "\4\0\2\53\2\0\26\53\1\0\7\53\1\0\2\53\1\0\2\53"+
    "\1\0\2\53\2\0\1\42\1\0\5\42\4\0\2\42\2\0\3\42"+
    "\3\0\1\42\7\0\4\53\1\0\1\53\7\0\12\43\2\42\3\53"+
    "\1\42\13\0\3\42\1\0\11\53\1\0\3\53\1\0\26\53\1\0"+
    "\7\53\1\0\2\53\1\0\5\53\2\0\1\42\1\53\10\42\1\0"+
    "\3\42\1\0\3\42\2\0\1\53\17\0\2\53\2\42\2\0\12\43"+
    "\21\0\3\42\1\0\10\53\2\0\2\53\2\0\26\53\1\0\7\53"+
    "\1\0\2\53\1\0\5\53\2\0\1\42\1\53\7\42\2\0\2\42"+
    "\2\0\3\42\10\0\2\42\4\0\2\53\1\0\3\53\2\42\2\0"+
    "\12\43\1\0\1\53\20\0\1\42\1\53\1\0\6\53\3\0\3\53"+
    "\1\0\4\53\3\0\2\53\1\0\1\53\1\0\2\53\3\0\2\53"+
    "\3\0\3\53\3\0\14\53\4\0\5\42\3\0\3\42\1\0\4\42"+
    "\2\0\1\53\6\0\1\42\16\0\12\43\21\0\3\42\1\0\10\53"+
    "\1\0\3\53\1\0\27\53\1\0\12\53\1\0\5\53\3\0\1\53"+
    "\7\42\1\0\3\42\1\0\4\42\7\0\2\42\1\0\2\53\6\0"+
    "\2\53\2\42\2\0\12\43\22\0\2\42\1\0\10\53\1\0\3\53"+
    "\1\0\27\53\1\0\12\53\1\0\5\53\2\0\1\42\1\53\7\42"+
    "\1\0\3\42\1\0\4\42\7\0\2\42\7\0\1\53\1\0\2\53"+
    "\2\42\2\0\12\43\1\0\2\53\17\0\2\42\1\0\10\53\1\0"+
    "\3\53\1\0\51\53\2\0\1\53\7\42\1\0\3\42\1\0\4\42"+
    "\1\53\10\0\1\42\10\0\2\53\2\42\2\0\12\43\12\0\6\53"+
    "\2\0\2\42\1\0\22\53\3\0\30\53\1\0\11\53\1\0\1\53"+
    "\2\0\7\53\3\0\1\42\4\0\6\42\1\0\1\42\1\0\10\42"+
    "\22\0\2\42\15\0\60\53\1\42\2\53\7\42\5\0\7\53\10\42"+
    "\1\0\12\43\47\0\2\53\1\0\1\53\2\0\2\53\1\0\1\53"+
    "\2\0\1\53\6\0\4\53\1\0\7\53\1\0\3\53\1\0\1\53"+
    "\1\0\1\53\2\0\2\53\1\0\4\53\1\42\2\53\6\42\1\0"+
    "\2\42\1\53\2\0\5\53\1\0\1\53\1\0\6\42\2\0\12\43"+
    "\2\0\4\53\40\0\1\53\12\0\2\42\13\0\2\42\6\0\12\43"+
    "\13\0\1\42\1\0\1\42\1\0\1\42\4\0\2\42\10\53\1\0"+
    "\44\53\4\0\24\42\1\0\2\42\5\53\13\42\1\0\44\42\11\0"+
    "\1\42\71\0\53\53\24\42\1\53\12\43\6\0\6\53\4\42\4\53"+
    "\3\42\1\53\3\42\2\53\7\42\3\53\4\42\15\53\14\42\1\53"+
    "\1\42\12\43\4\42\2\0\46\53\1\0\1\53\5\0\1\53\2\0"+
    "\53\53\1\0\u014d\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0"+
    "\4\53\2\0\51\53\1\0\4\53\2\0\41\53\1\0\4\53\2\0"+
    "\7\53\1\0\1\53\1\0\4\53\2\0\17\53\1\0\71\53\1\0"+
    "\4\53\2\0\103\53\2\0\3\42\40\0\20\53\20\0\125\53\14\0"+
    "\u026c\53\2\0\21\53\1\56\32\53\5\0\113\53\25\0\15\53\1\0"+
    "\4\53\3\42\13\0\22\53\3\42\13\0\22\53\2\42\14\0\15\53"+
    "\1\0\3\53\1\0\2\42\14\0\64\53\40\42\3\0\1\53\4\0"+
    "\1\53\1\42\2\0\12\43\41\0\3\42\2\0\12\43\6\0\130\53"+
    "\10\0\51\53\1\42\1\53\5\0\106\53\12\0\35\53\3\0\14\42"+
    "\4\0\14\42\12\0\12\43\36\53\2\0\5\53\13\0\54\53\4\0"+
    "\21\42\7\53\2\42\6\0\12\43\46\0\27\53\5\42\4\0\65\53"+
    "\12\42\1\0\35\42\2\0\1\42\12\43\6\0\12\43\15\0\1\53"+
    "\130\0\5\42\57\53\21\42\7\53\4\0\12\43\21\0\11\42\14\0"+
    "\3\42\36\53\15\42\2\53\12\43\54\53\16\42\14\0\44\53\24\42"+
    "\10\0\12\43\3\0\3\53\12\43\44\53\122\0\3\42\1\0\25\42"+
    "\4\53\1\42\4\53\3\42\2\53\11\0\300\53\47\42\25\0\4\42"+
    "\u0116\53\2\0\6\53\2\0\46\53\2\0\6\53\2\0\10\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\37\53\2\0\65\53\1\0"+
    "\7\53\1\0\1\53\3\0\3\53\1\0\7\53\3\0\4\53\2\0"+
    "\6\53\4\0\15\53\5\0\3\53\1\0\7\53\3\0\13\56\1\0"+
    "\2\42\13\0\1\47\2\0\2\47\12\0\1\67\1\67\5\0\1\56"+
    "\57\0\1\56\21\0\1\53\15\0\1\53\20\0\15\53\63\0\41\42"+
    "\21\0\1\53\4\0\1\53\2\0\12\53\1\0\1\53\3\0\5\53"+
    "\6\0\1\53\1\0\1\53\1\0\1\53\1\0\4\53\1\0\13\53"+
    "\2\0\4\53\5\0\5\53\4\0\1\53\64\0\2\53\u04b5\0\1\36"+
    "\52\0\1\26\246\0\1\36\127\0\1\26\u049b\0\57\53\1\0\57\53"+
    "\1\0\205\53\6\0\4\53\3\42\2\53\14\0\46\53\1\0\1\53"+
    "\5\0\1\53\2\0\70\53\7\0\1\53\17\0\1\42\27\53\11\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\40\42\57\0\1\53\u01d0\0"+
    "\1\56\2\0\1\42\1\0\2\53\25\0\1\42\15\0\6\42\1\0"+
    "\5\53\5\0\2\53\4\0\126\53\2\0\2\42\2\42\3\53\1\42"+
    "\132\53\1\42\4\53\5\0\51\53\3\0\136\53\21\0\33\53\65\0"+
    "\20\53\u0200\0\u19b6\53\112\0\u51cd\53\63\0\u048d\53\103\0\56\53\2\0"+
    "\u010d\53\3\0\20\53\12\43\2\53\24\0\57\53\4\42\1\0\12\42"+
    "\1\42\31\53\7\0\1\42\106\53\12\0\2\42\45\0\11\53\2\0"+
    "\147\53\2\0\4\53\1\0\4\53\14\0\13\53\115\0\12\53\1\42"+
    "\3\53\1\42\4\53\1\42\27\53\5\42\30\0\64\53\14\0\2\42"+
    "\62\53\21\42\13\0\12\43\6\0\22\42\6\53\3\0\1\53\4\0"+
    "\12\43\34\53\10\42\2\0\27\53\15\42\14\0\35\53\3\0\4\42"+
    "\57\53\16\42\16\0\1\53\12\43\46\0\51\53\16\42\11\0\3\53"+
    "\1\42\10\53\2\42\2\0\12\43\6\0\27\53\3\0\1\53\1\42"+
    "\4\0\60\53\1\42\1\53\3\42\2\53\2\42\5\53\2\42\1\53"+
    "\1\42\1\53\30\0\3\53\2\0\13\53\5\42\2\0\3\53\2\42"+
    "\12\0\6\53\2\0\6\53\2\0\6\53\11\0\7\53\1\0\7\53"+
    "\221\0\43\53\10\42\1\0\2\42\2\0\12\43\6\0\u2ba4\53\14\0"+
    "\27\53\4\0\61\53\u2104\0\u016e\53\2\0\152\53\46\0\7\53\14\0"+
    "\5\53\5\0\1\53\1\42\12\53\1\0\15\53\1\0\5\53\1\0"+
    "\1\53\1\0\2\53\1\0\2\53\1\0\154\53\41\0\u016b\53\22\0"+
    "\100\53\2\0\66\53\50\0\14\53\4\0\20\42\20\0\7\42\111\0"+
    "\5\53\1\0\207\53\6\0\1\45\14\0\12\43\7\0\32\53\6\0"+
    "\32\53\3\0\1\42\7\0\131\53\3\0\6\53\2\0\6\53\2\0"+
    "\6\53\2\0\3\53\43\0\14\53\1\0\32\53\1\0\23\53\1\0"+
    "\2\53\1\0\17\53\2\0\16\53\42\0\173\53\u0102\0\1\42\202\0"+
    "\35\53\3\0\61\53\57\0\37\53\21\0\21\53\1\0\10\53\66\0"+
    "\36\53\2\0\44\53\4\0\10\53\60\0\236\53\2\0\12\43\u0356\0"+
    "\6\53\2\0\1\53\1\0\54\53\1\0\2\53\3\0\1\53\2\0"+
    "\27\53\252\0\26\53\12\0\32\53\106\0\70\53\6\0\2\53\100\0"+
    "\1\53\3\42\1\0\2\42\5\0\4\42\4\53\1\0\3\53\1\0"+
    "\33\53\4\0\3\42\4\0\1\42\40\0\35\53\203\0\66\53\12\0"+
    "\26\53\12\0\23\53\215\0\111\53\u03b7\0\3\42\65\53\17\42\37\0"+
    "\12\43\20\0\3\42\55\53\13\42\25\0\31\53\7\0\12\43\6\0"+
    "\3\42\44\53\16\42\1\0\12\43\100\0\3\42\60\53\16\42\4\53"+
    "\13\0\12\43\u04a6\0\53\53\15\42\10\0\12\43\u0936\0\u036f\53\u0c91\0"+
    "\u042f\53\u33d1\0\u0239\53\u04c7\0\105\53\13\0\1\53\56\42\20\0\4\42"+
    "\15\53\u4060\0\2\53\u2163\0\5\42\3\0\6\42\10\0\10\42\2\0"+
    "\7\42\36\0\4\42\224\0\3\42\u01bb\0\125\53\1\0\107\53\1\0"+
    "\2\53\2\0\1\53\2\0\2\53\2\0\4\53\1\0\14\53\1\0"+
    "\1\53\1\0\7\53\1\0\101\53\1\0\4\53\2\0\10\53\1\0"+
    "\7\53\1\0\34\53\1\0\4\53\1\0\5\53\1\0\1\53\3\0"+
    "\7\53\1\0\u0154\53\2\0\31\53\1\0\31\53\1\0\37\53\1\0"+
    "\31\53\1\0\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\37\53\1\0\31\53\1\0\10\53\2\0\62\43\u1600\0\4\53\1\0"+
    "\33\53\1\0\2\53\1\0\1\53\2\0\1\53\1\0\12\53\1\0"+
    "\4\53\1\0\1\53\1\0\1\53\6\0\1\53\4\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\3\53\1\0\2\53\1\0\1\53\2\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\1\0\1\53\2\0\4\53\1\0\7\53\1\0\4\53\1\0"+
    "\4\53\1\0\1\53\1\0\12\53\1\0\21\53\5\0\3\53\1\0"+
    "\5\53\1\0\21\53\u047d\0\1\36\116\0\1\36\303\0\2\36\1\0"+
    "\1\36\73\0\1\36\1\26\2\0\5\26\1\37\13\26\2\0\1\37"+
    "\u015e\0\4\36\1\0\1\36\2\0\5\36\1\0\1\36\2\0\1\37"+
    "\5\0\1\36\3\0\2\36\1\37\1\0\2\37\7\0\1\37\1\0"+
    "\1\37\1\0\1\37\5\0\1\36\33\0\1\36\u09b0\0\ua6d7\53\51\0"+
    "\u1035\53\13\0\336\53\u3fe2\0\u021e\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\42\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\13\2\1\1\1\3\2\1\2\4\1\2"+
    "\1\5\1\6\1\7\1\10\1\2\1\1\4\4\1\1"+
    "\3\2\1\4\5\2\1\11\20\2\1\3\1\0\1\5"+
    "\1\0\2\6\1\0\1\6\1\4\1\5\2\0\1\5"+
    "\1\4\1\2\2\5\1\2\1\12\1\0\1\5\1\6"+
    "\1\4\1\12\3\2\2\13\3\2\1\11\1\14\1\11"+
    "\3\2\1\15\7\2\1\16\1\17\11\2\1\20\3\2"+
    "\1\21\2\2\1\22\2\2\2\23\1\2\2\0\1\2"+
    "\2\20\4\2\1\24\1\25\2\0\1\26\2\0\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\73\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\73\0\73\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0375\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u0512\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u0725\0\u1270\0\u12ab"+
    "\0\u12e6\0\u0811\0\u1321\0\u135c\0\u1397\0\u135c\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u0ad5"+
    "\0\u0b86\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1534\0\u1995\0\u19d0\0\u1a0b\0\u1696\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1b6d\0\u1be3\0\u1c1e"+
    "\0\u195a\0\u19d0\0\u1c59\0\u1c94\0\u1c1e\0\u1ccf\0\u1d0a\0\u1d45";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\12\1\13\1\4\1\14\1\15\6\4\1\16"+
    "\1\4\1\17\1\20\1\21\1\2\1\7\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\2\1\4\1\31"+
    "\1\32\1\33\1\34\1\35\1\34\1\36\1\4\1\37"+
    "\2\2\1\40\1\4\1\14\1\41\1\35\1\34\1\42"+
    "\3\2\1\34\1\43\74\0\1\4\1\44\21\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\23\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\1\45\1\4\1\46\1\47\14\4\1\50"+
    "\2\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\1\47\3\4"+
    "\2\0\1\4\6\0\2\4\1\51\1\52\17\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\1\52\3\4\2\0\1\4"+
    "\6\0\1\53\3\4\1\54\16\4\1\0\1\4\4\0"+
    "\1\54\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\1\4\1\55"+
    "\3\4\1\56\15\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\3\4\1\56\2\0\1\4\6\0\4\4\1\57\2\4"+
    "\1\60\13\4\1\0\1\4\4\0\1\57\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\2\0\1\60\6\0\2\4\1\61\5\4\1\62\12\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\4\4\1\63\4\4\1\64\11\4\1\0\1\4"+
    "\4\0\1\63\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\13\4"+
    "\1\65\6\4\1\66\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\2\4\1\65\1\4\2\0\1\4\6\0\1\67\3\4"+
    "\1\70\7\4\1\71\6\4\1\0\1\4\4\0\1\70"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\32\0\1\72\2\0\1\73"+
    "\13\0\1\73\3\0\1\73\12\0\1\73\37\0\1\73"+
    "\13\0\1\73\3\0\1\73\12\0\1\73\20\0\1\74"+
    "\1\0\1\74\15\0\2\75\1\74\1\76\1\74\13\0"+
    "\1\75\51\0\1\77\2\100\1\22\1\34\7\0\1\77"+
    "\1\0\2\34\1\101\1\102\1\34\10\0\1\101\1\34"+
    "\4\0\2\34\30\0\1\103\2\104\1\34\1\23\1\105"+
    "\6\0\1\103\1\0\2\34\1\106\1\107\1\34\10\0"+
    "\1\106\1\34\4\0\2\34\1\0\23\4\1\0\1\4"+
    "\2\0\1\103\1\104\1\110\1\0\1\105\1\24\5\0"+
    "\1\4\1\111\1\0\1\4\1\0\1\103\1\104\1\0"+
    "\1\4\3\0\4\4\1\103\1\0\1\4\45\0\1\27"+
    "\73\0\1\30\32\0\10\4\1\112\1\4\1\112\10\4"+
    "\1\0\1\4\3\0\1\75\1\113\1\74\1\76\1\112"+
    "\5\0\2\4\1\0\1\4\2\0\1\75\1\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\23\114\1\0\1\115"+
    "\4\0\1\114\2\0\1\114\4\0\1\114\2\115\1\0"+
    "\1\114\4\0\1\114\3\0\4\114\2\0\1\114\6\0"+
    "\23\4\1\0\1\4\4\0\1\4\2\34\1\4\5\0"+
    "\2\4\1\0\1\33\4\34\1\4\3\0\4\4\2\34"+
    "\1\4\3\0\2\34\33\0\2\34\11\0\5\34\10\0"+
    "\2\34\4\0\2\34\11\0\1\74\1\0\1\74\15\0"+
    "\2\75\1\116\1\117\1\74\10\0\3\34\1\120\1\34"+
    "\10\0\2\34\4\0\2\34\1\0\23\114\1\0\1\115"+
    "\4\0\1\114\2\34\1\114\4\0\1\114\2\115\1\0"+
    "\1\121\4\34\1\114\3\0\4\114\2\34\1\114\3\0"+
    "\2\34\55\0\1\2\16\0\2\4\1\51\1\52\17\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\1\52\1\122\2\4"+
    "\2\0\1\4\6\0\1\4\1\55\3\4\1\56\15\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\1\4\1\123\1\4"+
    "\1\56\2\0\1\4\6\0\4\4\1\57\2\4\1\60"+
    "\13\4\1\0\1\4\4\0\1\57\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\124\6\0\23\125\1\0\1\125\4\0\1\125\2\34"+
    "\1\125\5\0\2\125\1\0\1\126\4\34\1\125\3\0"+
    "\4\125\2\34\1\125\3\0\2\34\1\0\2\4\1\127"+
    "\20\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\1\130\3\4\1\131\16\4\1\0\1\4"+
    "\4\0\1\131\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\1\130"+
    "\1\4\1\46\1\47\14\4\1\50\2\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\1\47\3\4\2\0\1\4\6\0"+
    "\2\4\2\132\17\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\1\132\3\4\2\0\1\4\6\0\3\4\1\133\2\4"+
    "\1\133\11\4\1\50\2\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\1\133\3\4\2\0\1\4\6\0\2\4\1\134"+
    "\1\132\6\4\1\135\10\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\135\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\1\132\3\4\2\0\1\4\6\0\2\4\1\136"+
    "\1\52\17\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\1\52"+
    "\3\4\2\0\1\4\6\0\1\53\4\4\1\137\1\140"+
    "\14\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\3\4\1\137"+
    "\2\0\1\4\6\0\1\53\3\4\1\54\5\4\1\141"+
    "\10\4\1\0\1\4\4\0\1\54\2\0\1\141\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\1\4\1\142\13\4\1\143\5\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\1\4\1\142\3\4\1\56\15\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\3\4\1\56\2\0\1\4\6\0\4\4"+
    "\1\144\2\4\1\145\13\4\1\0\1\4\4\0\1\144"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\145\6\0\4\4\1\144\2\4"+
    "\1\60\13\4\1\0\1\4\4\0\1\144\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\2\0\1\60\6\0\1\146\1\4\1\147\20\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\2\4\1\147\5\4\1\62\12\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\4\4\1\150"+
    "\16\4\1\0\1\4\4\0\1\150\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\4\4\1\150\4\4\1\64\11\4\1\0"+
    "\1\4\4\0\1\150\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\13\4\1\65\6\4\1\151\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\2\4\1\65\1\4\2\0\1\4\6\0\22\4"+
    "\1\151\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\1\67\1\4\1\152\2\4\1\153\15\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\3\4\1\153\2\0"+
    "\1\4\6\0\4\4\1\154\7\4\1\155\6\4\1\0"+
    "\1\4\4\0\1\154\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\1\67\3\4\1\154\7\4\1\71\6\4\1\0\1\4"+
    "\4\0\1\154\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\32\0\1\72"+
    "\56\0\1\74\1\0\1\74\17\0\1\74\1\0\1\74"+
    "\46\0\1\74\1\0\1\74\17\0\1\74\1\76\1\74"+
    "\71\0\1\76\62\0\1\26\2\0\1\26\73\0\1\77"+
    "\13\0\1\77\3\0\1\77\12\0\1\77\33\0\1\26"+
    "\2\0\1\26\3\0\2\34\11\0\5\34\10\0\2\34"+
    "\4\0\2\34\30\0\1\77\2\0\2\34\7\0\1\77"+
    "\1\0\2\34\1\101\2\34\10\0\1\101\1\34\4\0"+
    "\2\34\24\0\1\25\2\0\1\25\73\0\1\103\13\0"+
    "\1\103\3\0\1\103\12\0\1\103\37\0\1\103\2\104"+
    "\1\0\2\105\6\0\1\103\3\0\1\103\1\104\11\0"+
    "\1\103\33\0\1\25\2\0\1\25\3\0\2\34\11\0"+
    "\5\34\10\0\2\34\4\0\2\34\30\0\1\103\2\0"+
    "\2\34\7\0\1\103\1\0\2\34\1\106\2\34\10\0"+
    "\1\106\1\34\4\0\2\34\1\0\23\4\1\0\1\4"+
    "\2\0\1\103\1\0\1\4\2\0\1\4\5\0\1\4"+
    "\1\111\1\0\1\4\1\0\1\103\2\0\1\4\3\0"+
    "\4\4\1\103\1\0\1\4\6\0\23\4\1\25\1\4"+
    "\1\0\1\25\2\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\10\4\1\112\1\4\1\112\10\4\1\0\1\4"+
    "\4\0\1\4\1\74\1\0\1\112\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\10\4\1\112\1\4\1\112\10\4\1\0\1\4\4\0"+
    "\1\4\1\74\1\76\1\112\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\23\114"+
    "\1\0\1\114\4\0\1\114\2\0\1\114\4\0\3\114"+
    "\1\0\1\114\4\0\1\114\3\0\4\114\2\0\1\114"+
    "\16\0\1\74\1\0\1\74\17\0\1\116\1\34\1\74"+
    "\10\0\5\34\10\0\2\34\4\0\2\34\33\0\1\34"+
    "\1\117\11\0\5\34\10\0\2\34\4\0\2\34\11\0"+
    "\1\74\1\0\1\74\17\0\1\116\1\117\1\74\10\0"+
    "\5\34\10\0\2\34\4\0\2\34\1\0\23\114\1\0"+
    "\1\114\4\0\1\114\2\34\1\114\4\0\3\114\1\0"+
    "\1\121\4\34\1\114\3\0\4\114\2\34\1\114\3\0"+
    "\2\34\1\0\23\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\1\4\1\156\2\4\2\0\1\4\6\0\12\4\1\157"+
    "\10\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\4\4\1\144\2\4\1\60\13\4\1\0"+
    "\1\4\4\0\1\144\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\160\6\0"+
    "\23\125\1\0\1\125\4\0\1\125\2\0\1\125\5\0"+
    "\2\125\1\0\1\125\4\0\1\125\3\0\4\125\2\0"+
    "\1\125\6\0\2\4\1\161\1\162\17\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\1\162\3\4\2\0\1\4\6\0"+
    "\1\130\3\4\1\163\16\4\1\0\1\4\4\0\1\163"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\4\4\1\163\13\4"+
    "\1\164\2\4\1\0\1\4\4\0\1\163\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\2\0\1\4\6\0\3\4\1\133\2\4\1\133\14\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\1\133\3\4\2\0"+
    "\1\4\6\0\2\4\1\134\1\132\6\4\1\165\10\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\165\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\1\132\3\4\2\0"+
    "\1\4\6\0\12\4\1\166\10\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\166\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\5\4\1\137"+
    "\1\140\14\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\3\4"+
    "\1\137\2\0\1\4\6\0\6\4\1\140\14\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\12\4\1\141\1\167\7\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\141\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\2\4\1\167\1\4\2\0\1\4\6\0\1\4"+
    "\1\142\13\4\1\170\5\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\15\4\1\170\1\171"+
    "\4\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\4\4\1\144\2\4\1\172\13\4\1\0"+
    "\1\4\4\0\1\144\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\172\6\0"+
    "\7\4\1\172\13\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\172\6\0\1\173\10\4\1\174\11\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\1\173\1\4\1\147\20\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\2\4\1\152"+
    "\1\4\1\175\16\4\1\0\1\4\4\0\1\175\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\6\0\2\4\1\152\2\4\1\153"+
    "\15\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\3\4\1\153"+
    "\2\0\1\4\6\0\4\4\1\154\7\4\1\176\6\4"+
    "\1\0\1\4\4\0\1\154\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\14\4\1\176\6\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\12\4\1\177\10\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\23\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\1\200\1\0\1\4\6\0\4\4\1\144\2\4\1\60"+
    "\13\4\1\0\1\4\4\0\1\144\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\60\1\201\5\0\2\4\1\161\1\47\17\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\1\47\3\4\2\0\1\4"+
    "\6\0\2\4\1\132\1\202\17\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\1\202\3\4\2\0\1\4\6\0\4\4"+
    "\1\163\13\4\1\203\1\204\1\4\1\0\1\4\4\0"+
    "\1\163\2\0\1\4\5\0\2\4\1\0\1\4\4\0"+
    "\1\4\3\0\4\4\2\0\1\4\6\0\20\4\1\205"+
    "\1\206\1\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\4\4"+
    "\2\0\1\4\6\0\12\4\1\207\10\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\207\5\0\2\4\1\0\1\4"+
    "\4\0\1\4\3\0\4\4\2\0\1\4\6\0\12\4"+
    "\1\207\4\4\1\210\3\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\207\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\13\4\1\167\7\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\2\4\1\167\1\4"+
    "\2\0\1\4\6\0\15\4\1\170\1\211\4\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\16\4\1\211\4\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\6\0\1\173\10\4\1\212\11\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\11\4\1\212\11\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\4\4\1\175\16\4"+
    "\1\0\1\4\4\0\1\175\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\23\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\2\4"+
    "\1\157\1\4\1\200\1\0\1\4\71\0\1\213\6\0"+
    "\54\214\2\0\11\214\1\0\3\214\1\0\2\4\1\47"+
    "\1\202\17\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\4\0\1\4\3\0\1\202"+
    "\3\4\2\0\1\4\6\0\20\4\1\203\1\204\1\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\4\0\1\4\3\0\4\4\2\0\1\4"+
    "\6\0\21\4\1\204\1\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\4\0\1\4"+
    "\3\0\4\4\2\0\1\4\6\0\20\4\1\205\1\204"+
    "\1\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\4\0\1\4\3\0\4\4\2\0"+
    "\1\4\6\0\12\4\1\207\4\4\1\215\3\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\207\5\0\2\4\1\0"+
    "\1\4\4\0\1\4\3\0\4\4\2\0\1\4\6\0"+
    "\17\4\1\215\3\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\4\0\1\4\3\0"+
    "\4\4\2\0\1\4\5\0\41\216\1\0\10\216\1\0"+
    "\1\216\3\0\5\216\1\217\2\216\3\0\42\216\1\0"+
    "\10\216\1\0\1\216\3\0\5\216\1\0\2\216\3\0"+
    "\1\216\54\220\2\0\11\220\1\0\3\220\41\216\1\0"+
    "\10\216\1\0\1\216\3\0\5\216\1\214\2\216\3\0"+
    "\1\216\54\220\3\0\10\220\1\0\3\220";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\5\1\2\11\44\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\2\0\7\1\1\0"+
    "\62\1\2\0\11\1\2\0\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzItalianLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2962) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 24: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 25: break;
          case 3: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 26: break;
          case 4: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 27: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 28: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 29: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 30: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 31: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 32: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 33: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 34: break;
          case 12: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 35: break;
          case 13: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 36: break;
          case 14: 
            { return JflexBuzzTokenizer.NO;
            }
          case 37: break;
          case 15: 
            { return JflexBuzzTokenizer.YES;
            }
          case 38: break;
          case 16: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 39: break;
          case 17: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 40: break;
          case 18: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 41: break;
          case 19: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 42: break;
          case 20: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 43: break;
          case 21: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 44: break;
          case 22: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 45: break;
          case 23: 
            { return JflexBuzzTokenizer.URL;
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

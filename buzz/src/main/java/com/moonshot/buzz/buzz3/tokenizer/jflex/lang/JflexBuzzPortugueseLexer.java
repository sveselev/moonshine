/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzPortugueseLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\55\1\67\1\67\1\54\22\0\1\56\1\42\1\73"+
    "\1\52\1\70\2\73\1\33\1\36\1\35\1\33\2\73\1\74\1\71"+
    "\1\64\3\45\1\27\4\45\1\46\1\45\1\63\1\32\1\26\1\51"+
    "\1\31\1\43\1\72\1\6\1\24\1\21\1\15\1\13\1\11\1\12"+
    "\1\7\1\23\1\25\1\1\1\14\1\4\1\17\1\10\1\37\1\53"+
    "\1\2\1\3\1\53\1\5\1\53\1\16\1\53\1\22\1\53\1\36"+
    "\1\66\1\35\1\73\1\50\1\0\1\6\1\24\1\21\1\15\1\13"+
    "\1\62\1\12\1\57\1\23\1\25\1\1\1\14\1\4\1\17\1\34"+
    "\1\20\1\53\1\2\1\61\1\60\1\5\1\53\1\65\1\53\1\22"+
    "\1\53\1\0\1\73\1\0\1\73\6\0\1\67\32\0\1\56\11\0"+
    "\1\53\11\0\1\0\1\53\1\0\1\44\2\0\1\53\5\0\27\53"+
    "\1\0\37\53\1\0\u01ca\53\4\0\14\53\16\0\5\53\7\0\1\53"+
    "\1\0\1\53\21\0\160\44\5\53\1\0\2\53\2\0\4\53\10\0"+
    "\1\53\1\0\3\53\1\0\1\53\1\0\24\53\1\0\123\53\1\0"+
    "\213\53\1\0\7\44\236\53\11\0\46\53\2\0\1\53\7\0\47\53"+
    "\11\0\55\44\1\44\1\44\1\0\2\44\1\0\2\44\1\0\1\44"+
    "\10\0\33\53\5\0\3\53\2\44\33\0\13\44\5\0\53\53\25\44"+
    "\12\45\4\0\2\53\1\44\143\53\1\0\1\53\7\44\2\0\6\44"+
    "\2\53\2\44\1\0\4\44\2\53\12\45\3\53\2\0\1\53\20\0"+
    "\1\53\1\44\36\53\33\44\2\0\131\53\13\44\1\53\16\0\12\45"+
    "\41\53\11\44\2\53\4\0\1\53\5\0\26\53\4\44\1\53\11\44"+
    "\1\53\3\44\1\53\5\44\22\0\31\53\3\44\104\0\1\53\1\0"+
    "\13\53\67\0\33\44\1\0\4\44\66\53\3\44\1\53\22\44\1\53"+
    "\7\44\12\53\2\44\2\0\12\45\1\0\7\53\1\0\7\53\1\0"+
    "\3\44\1\0\10\53\2\0\2\53\2\0\26\53\1\0\7\53\1\0"+
    "\1\53\3\0\4\53\2\0\1\44\1\53\7\44\2\0\2\44\2\0"+
    "\3\44\1\53\10\0\1\44\4\0\2\53\1\0\3\53\2\44\2\0"+
    "\12\45\2\53\17\0\3\44\1\0\6\53\4\0\2\53\2\0\26\53"+
    "\1\0\7\53\1\0\2\53\1\0\2\53\1\0\2\53\2\0\1\44"+
    "\1\0\5\44\4\0\2\44\2\0\3\44\3\0\1\44\7\0\4\53"+
    "\1\0\1\53\7\0\12\45\2\44\3\53\1\44\13\0\3\44\1\0"+
    "\11\53\1\0\3\53\1\0\26\53\1\0\7\53\1\0\2\53\1\0"+
    "\5\53\2\0\1\44\1\53\10\44\1\0\3\44\1\0\3\44\2\0"+
    "\1\53\17\0\2\53\2\44\2\0\12\45\21\0\3\44\1\0\10\53"+
    "\2\0\2\53\2\0\26\53\1\0\7\53\1\0\2\53\1\0\5\53"+
    "\2\0\1\44\1\53\7\44\2\0\2\44\2\0\3\44\10\0\2\44"+
    "\4\0\2\53\1\0\3\53\2\44\2\0\12\45\1\0\1\53\20\0"+
    "\1\44\1\53\1\0\6\53\3\0\3\53\1\0\4\53\3\0\2\53"+
    "\1\0\1\53\1\0\2\53\3\0\2\53\3\0\3\53\3\0\14\53"+
    "\4\0\5\44\3\0\3\44\1\0\4\44\2\0\1\53\6\0\1\44"+
    "\16\0\12\45\21\0\3\44\1\0\10\53\1\0\3\53\1\0\27\53"+
    "\1\0\12\53\1\0\5\53\3\0\1\53\7\44\1\0\3\44\1\0"+
    "\4\44\7\0\2\44\1\0\2\53\6\0\2\53\2\44\2\0\12\45"+
    "\22\0\2\44\1\0\10\53\1\0\3\53\1\0\27\53\1\0\12\53"+
    "\1\0\5\53\2\0\1\44\1\53\7\44\1\0\3\44\1\0\4\44"+
    "\7\0\2\44\7\0\1\53\1\0\2\53\2\44\2\0\12\45\1\0"+
    "\2\53\17\0\2\44\1\0\10\53\1\0\3\53\1\0\51\53\2\0"+
    "\1\53\7\44\1\0\3\44\1\0\4\44\1\53\10\0\1\44\10\0"+
    "\2\53\2\44\2\0\12\45\12\0\6\53\2\0\2\44\1\0\22\53"+
    "\3\0\30\53\1\0\11\53\1\0\1\53\2\0\7\53\3\0\1\44"+
    "\4\0\6\44\1\0\1\44\1\0\10\44\22\0\2\44\15\0\60\53"+
    "\1\44\2\53\7\44\5\0\7\53\10\44\1\0\12\45\47\0\2\53"+
    "\1\0\1\53\2\0\2\53\1\0\1\53\2\0\1\53\6\0\4\53"+
    "\1\0\7\53\1\0\3\53\1\0\1\53\1\0\1\53\2\0\2\53"+
    "\1\0\4\53\1\44\2\53\6\44\1\0\2\44\1\53\2\0\5\53"+
    "\1\0\1\53\1\0\6\44\2\0\12\45\2\0\4\53\40\0\1\53"+
    "\12\0\2\44\13\0\2\44\6\0\12\45\13\0\1\44\1\0\1\44"+
    "\1\0\1\44\4\0\2\44\10\53\1\0\44\53\4\0\24\44\1\0"+
    "\2\44\5\53\13\44\1\0\44\44\11\0\1\44\71\0\53\53\24\44"+
    "\1\53\12\45\6\0\6\53\4\44\4\53\3\44\1\53\3\44\2\53"+
    "\7\44\3\53\4\44\15\53\14\44\1\53\1\44\12\45\4\44\2\0"+
    "\46\53\1\0\1\53\5\0\1\53\2\0\53\53\1\0\u014d\53\1\0"+
    "\4\53\2\0\7\53\1\0\1\53\1\0\4\53\2\0\51\53\1\0"+
    "\4\53\2\0\41\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0"+
    "\4\53\2\0\17\53\1\0\71\53\1\0\4\53\2\0\103\53\2\0"+
    "\3\44\40\0\20\53\20\0\125\53\14\0\u026c\53\2\0\21\53\1\56"+
    "\32\53\5\0\113\53\25\0\15\53\1\0\4\53\3\44\13\0\22\53"+
    "\3\44\13\0\22\53\2\44\14\0\15\53\1\0\3\53\1\0\2\44"+
    "\14\0\64\53\40\44\3\0\1\53\4\0\1\53\1\44\2\0\12\45"+
    "\41\0\3\44\2\0\12\45\6\0\130\53\10\0\51\53\1\44\1\53"+
    "\5\0\106\53\12\0\35\53\3\0\14\44\4\0\14\44\12\0\12\45"+
    "\36\53\2\0\5\53\13\0\54\53\4\0\21\44\7\53\2\44\6\0"+
    "\12\45\46\0\27\53\5\44\4\0\65\53\12\44\1\0\35\44\2\0"+
    "\1\44\12\45\6\0\12\45\15\0\1\53\130\0\5\44\57\53\21\44"+
    "\7\53\4\0\12\45\21\0\11\44\14\0\3\44\36\53\15\44\2\53"+
    "\12\45\54\53\16\44\14\0\44\53\24\44\10\0\12\45\3\0\3\53"+
    "\12\45\44\53\122\0\3\44\1\0\25\44\4\53\1\44\4\53\3\44"+
    "\2\53\11\0\300\53\47\44\25\0\4\44\u0116\53\2\0\6\53\2\0"+
    "\46\53\2\0\6\53\2\0\10\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\37\53\2\0\65\53\1\0\7\53\1\0\1\53\3\0"+
    "\3\53\1\0\7\53\3\0\4\53\2\0\6\53\4\0\15\53\5\0"+
    "\3\53\1\0\7\53\3\0\13\56\1\0\2\44\13\0\1\0\2\0"+
    "\2\73\12\0\1\67\1\67\5\0\1\56\57\0\1\56\21\0\1\53"+
    "\15\0\1\53\20\0\15\53\63\0\41\44\21\0\1\53\4\0\1\53"+
    "\2\0\12\53\1\0\1\53\3\0\5\53\6\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\4\53\1\0\13\53\2\0\4\53\5\0\5\53"+
    "\4\0\1\53\64\0\2\53\u04b5\0\1\40\52\0\1\30\246\0\1\40"+
    "\127\0\1\30\u049b\0\57\53\1\0\57\53\1\0\205\53\6\0\4\53"+
    "\3\44\2\53\14\0\46\53\1\0\1\53\5\0\1\53\2\0\70\53"+
    "\7\0\1\53\17\0\1\44\27\53\11\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\40\44\57\0\1\53\u01d0\0\1\56\2\0\1\44\1\0"+
    "\2\53\25\0\1\44\15\0\6\44\1\0\5\53\5\0\2\53\4\0"+
    "\126\53\2\0\2\44\2\44\3\53\1\44\132\53\1\44\4\53\5\0"+
    "\51\53\3\0\136\53\21\0\33\53\65\0\20\53\u0200\0\u19b6\53\112\0"+
    "\u51cd\53\63\0\u048d\53\103\0\56\53\2\0\u010d\53\3\0\20\53\12\45"+
    "\2\53\24\0\57\53\4\44\1\0\12\44\1\44\31\53\7\0\1\44"+
    "\106\53\12\0\2\44\45\0\11\53\2\0\147\53\2\0\4\53\1\0"+
    "\4\53\14\0\13\53\115\0\12\53\1\44\3\53\1\44\4\53\1\44"+
    "\27\53\5\44\30\0\64\53\14\0\2\44\62\53\21\44\13\0\12\45"+
    "\6\0\22\44\6\53\3\0\1\53\4\0\12\45\34\53\10\44\2\0"+
    "\27\53\15\44\14\0\35\53\3\0\4\44\57\53\16\44\16\0\1\53"+
    "\12\45\46\0\51\53\16\44\11\0\3\53\1\44\10\53\2\44\2\0"+
    "\12\45\6\0\27\53\3\0\1\53\1\44\4\0\60\53\1\44\1\53"+
    "\3\44\2\53\2\44\5\53\2\44\1\53\1\44\1\53\30\0\3\53"+
    "\2\0\13\53\5\44\2\0\3\53\2\44\12\0\6\53\2\0\6\53"+
    "\2\0\6\53\11\0\7\53\1\0\7\53\221\0\43\53\10\44\1\0"+
    "\2\44\2\0\12\45\6\0\u2ba4\53\14\0\27\53\4\0\61\53\u2104\0"+
    "\u016e\53\2\0\152\53\46\0\7\53\14\0\5\53\5\0\1\53\1\44"+
    "\12\53\1\0\15\53\1\0\5\53\1\0\1\53\1\0\2\53\1\0"+
    "\2\53\1\0\154\53\41\0\u016b\53\22\0\100\53\2\0\66\53\50\0"+
    "\14\53\4\0\20\44\20\0\7\44\111\0\5\53\1\0\207\53\6\0"+
    "\1\47\14\0\12\45\7\0\32\53\6\0\32\53\3\0\1\44\7\0"+
    "\131\53\3\0\6\53\2\0\6\53\2\0\6\53\2\0\3\53\43\0"+
    "\14\53\1\0\32\53\1\0\23\53\1\0\2\53\1\0\17\53\2\0"+
    "\16\53\42\0\173\53\u0102\0\1\44\202\0\35\53\3\0\61\53\57\0"+
    "\37\53\21\0\21\53\1\0\10\53\66\0\36\53\2\0\44\53\4\0"+
    "\10\53\60\0\236\53\2\0\12\45\u0356\0\6\53\2\0\1\53\1\0"+
    "\54\53\1\0\2\53\3\0\1\53\2\0\27\53\252\0\26\53\12\0"+
    "\32\53\106\0\70\53\6\0\2\53\100\0\1\53\3\44\1\0\2\44"+
    "\5\0\4\44\4\53\1\0\3\53\1\0\33\53\4\0\3\44\4\0"+
    "\1\44\40\0\35\53\203\0\66\53\12\0\26\53\12\0\23\53\215\0"+
    "\111\53\u03b7\0\3\44\65\53\17\44\37\0\12\45\20\0\3\44\55\53"+
    "\13\44\25\0\31\53\7\0\12\45\6\0\3\44\44\53\16\44\1\0"+
    "\12\45\100\0\3\44\60\53\16\44\4\53\13\0\12\45\u04a6\0\53\53"+
    "\15\44\10\0\12\45\u0936\0\u036f\53\u0c91\0\u042f\53\u33d1\0\u0239\53\u04c7\0"+
    "\105\53\13\0\1\53\56\44\20\0\4\44\15\53\u4060\0\2\53\u2163\0"+
    "\5\44\3\0\6\44\10\0\10\44\2\0\7\44\36\0\4\44\224\0"+
    "\3\44\u01bb\0\125\53\1\0\107\53\1\0\2\53\2\0\1\53\2\0"+
    "\2\53\2\0\4\53\1\0\14\53\1\0\1\53\1\0\7\53\1\0"+
    "\101\53\1\0\4\53\2\0\10\53\1\0\7\53\1\0\34\53\1\0"+
    "\4\53\1\0\5\53\1\0\1\53\3\0\7\53\1\0\u0154\53\2\0"+
    "\31\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0\37\53\1\0"+
    "\31\53\1\0\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\10\53\2\0\62\45\u1600\0\4\53\1\0\33\53\1\0\2\53\1\0"+
    "\1\53\2\0\1\53\1\0\12\53\1\0\4\53\1\0\1\53\1\0"+
    "\1\53\6\0\1\53\4\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\3\53\1\0\2\53\1\0\1\53\2\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\1\0\1\53\2\0"+
    "\4\53\1\0\7\53\1\0\4\53\1\0\4\53\1\0\1\53\1\0"+
    "\12\53\1\0\21\53\5\0\3\53\1\0\5\53\1\0\21\53\u047d\0"+
    "\1\40\116\0\1\40\303\0\2\40\1\0\1\40\73\0\1\40\1\30"+
    "\2\0\5\30\1\41\13\30\2\0\1\41\u015e\0\4\40\1\0\1\40"+
    "\2\0\5\40\1\0\1\40\2\0\1\41\5\0\1\40\3\0\2\40"+
    "\1\41\1\0\2\41\7\0\1\41\1\0\1\41\1\0\1\41\5\0"+
    "\1\40\33\0\1\40\u09b0\0\ua6d7\53\51\0\u1035\53\13\0\336\53\u3fe2\0"+
    "\u021e\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\44\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\17\2\1\1\1\3\2\1\2\4\1\2"+
    "\1\5\1\6\1\7\1\10\1\2\1\1\3\4\1\1"+
    "\2\2\1\4\1\2\1\4\1\2\1\11\11\2\1\11"+
    "\22\2\1\3\1\0\1\5\1\0\2\6\1\0\1\6"+
    "\1\4\1\5\2\0\1\5\1\4\1\2\2\5\1\2"+
    "\1\12\1\0\1\5\1\6\1\4\1\12\3\2\2\13"+
    "\1\11\4\2\1\14\2\2\2\11\2\2\1\15\1\2"+
    "\1\16\13\2\1\17\2\2\1\20\3\2\1\21\3\2"+
    "\1\22\3\2\1\23\2\2\2\24\2\2\1\25\2\2"+
    "\1\20\1\2\2\0\2\2\1\22\2\2\1\26\1\27"+
    "\1\21\2\0\1\2\1\30\2\0\1\16\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\75\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\75\0\75\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894"+
    "\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0487\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u0632\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u0857\0\u0894\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\u0af6\0\u1797\0\u17d4\0\u1797\0\u0bad\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u0e89\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1629\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u19f9"+
    "\0\u1f37\0\u1f74\0\u1aed\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u1d8c\0\u2199\0\u21d6\0\u1ebd\0\u1f74"+
    "\0\u1fee\0\u2213\0\u2250\0\u228d\0\u21d6\0\u22ca\0\u2307\0\u2344"+
    "\0\u2381";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\7\1\14\1\15\1\16\1\17\2\7"+
    "\1\20\1\7\1\21\1\7\1\22\1\7\1\23\1\24"+
    "\1\25\1\2\1\12\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\2\1\7\1\35\1\36\1\37\1\40"+
    "\1\41\1\7\1\42\2\2\1\43\1\7\1\5\1\44"+
    "\1\40\1\45\1\46\3\2\1\45\1\47\2\45\76\0"+
    "\1\50\24\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\1\7\1\4\1\51\22\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\1\51\1\7\2\0"+
    "\1\7\10\0\2\7\1\52\17\7\1\53\2\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\1\52\1\7\2\0"+
    "\1\7\10\0\3\7\1\54\1\55\5\7\1\56\12\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\25\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\1\7\1\57\1\7\1\60\1\7"+
    "\1\61\1\62\16\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\1\62\3\7\2\0\1\7\10\0\5\7\1\63\1\64"+
    "\3\7\1\65\12\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\1\64\3\7\2\0\1\7\10\0\3\7\1\66\3\7"+
    "\1\67\15\7\1\0\1\7\4\0\1\67\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\4\7\1\70\3\7\1\71\14\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\3\7\1\71\2\0"+
    "\1\7\10\0\3\7\1\72\3\7\1\73\3\7\1\74"+
    "\11\7\1\0\1\7\4\0\1\73\2\0\1\7\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\4\7\2\0"+
    "\1\7\10\0\5\7\1\75\6\7\1\76\10\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\4\7\2\0\1\7\10\0"+
    "\7\7\1\77\5\7\1\100\7\7\1\0\1\7\4\0"+
    "\1\77\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\4\7\2\0\1\100\10\0\7\7\1\101"+
    "\6\7\1\102\6\7\1\0\1\7\4\0\1\101\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\4\7\2\0\1\7\10\0\12\7\1\103\6\7\1\104"+
    "\3\7\1\0\1\7\4\0\1\7\2\0\1\7\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\4\7\2\0"+
    "\1\7\10\0\23\7\1\21\1\105\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\4\7\2\0\1\7\36\0\1\106\2\0"+
    "\1\107\13\0\1\107\2\0\1\107\11\0\1\107\43\0"+
    "\1\107\13\0\1\107\2\0\1\107\11\0\1\107\26\0"+
    "\1\110\2\0\1\110\12\0\2\111\1\110\1\112\1\110"+
    "\34\0\1\111\32\0\1\113\2\114\1\26\1\45\7\0"+
    "\1\113\1\0\1\45\1\115\1\45\10\0\1\115\1\45"+
    "\4\0\3\45\1\116\32\0\1\117\2\120\1\45\1\27"+
    "\1\121\6\0\1\117\1\0\1\45\1\122\1\45\10\0"+
    "\1\122\1\45\4\0\3\45\1\123\1\0\25\7\1\0"+
    "\1\7\2\0\1\117\1\120\1\124\1\0\1\121\1\30"+
    "\5\0\1\7\1\125\1\0\1\7\1\117\1\0\1\7"+
    "\3\0\4\7\1\117\1\0\1\7\6\0\1\120\42\0"+
    "\1\33\75\0\1\34\32\0\14\7\1\126\2\7\1\126"+
    "\5\7\1\0\1\7\3\0\1\111\1\127\1\110\1\112"+
    "\1\126\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\4\7\2\0\1\7\6\0\1\111\1\0\25\130\1\0"+
    "\1\131\4\0\1\130\2\0\1\130\4\0\1\130\2\131"+
    "\1\0\1\130\2\0\1\130\3\0\4\130\2\0\1\130"+
    "\10\0\25\7\1\0\1\7\4\0\1\7\2\45\1\7"+
    "\5\0\2\7\1\0\1\37\2\45\1\7\3\0\4\7"+
    "\2\45\1\7\3\0\4\45\15\0\1\110\2\0\1\110"+
    "\12\0\2\111\1\132\1\133\1\110\10\0\3\45\10\0"+
    "\2\45\4\0\3\45\1\134\1\0\25\130\1\0\1\131"+
    "\4\0\1\130\2\45\1\130\4\0\1\130\2\131\1\0"+
    "\1\135\2\45\1\130\3\0\4\130\2\45\1\130\3\0"+
    "\4\45\55\0\1\2\20\0\5\7\1\63\1\64\3\7"+
    "\1\65\12\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\1\64"+
    "\1\136\2\7\2\0\1\7\10\0\4\7\1\70\3\7"+
    "\1\71\14\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\1\7"+
    "\1\137\1\7\1\71\2\0\1\7\44\0\2\45\11\0"+
    "\3\45\10\0\2\45\4\0\4\45\1\0\7\7\1\77"+
    "\5\7\1\100\7\7\1\0\1\7\4\0\1\77\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\4\7\2\0\1\140\10\0\25\141\1\0\1\141\4\0"+
    "\1\141\2\45\1\141\5\0\2\141\1\0\1\142\2\45"+
    "\1\141\3\0\4\141\2\45\1\141\3\0\4\45\1\0"+
    "\1\143\24\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\2\7\1\51\22\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\1\51\1\7\2\0\1\7"+
    "\10\0\2\7\1\52\17\7\1\144\2\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\1\52\1\7\2\0\1\7"+
    "\10\0\3\7\1\145\16\7\1\144\2\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\3\7"+
    "\1\54\6\7\1\56\12\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\5\7\1\146\17\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\12\7\1\56\1\147\11\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\4\7\2\0\1\7\10\0\1\7\1\57"+
    "\4\7\1\150\2\7\1\150\13\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\1\150\3\7\2\0\1\7\10\0\3\7"+
    "\1\151\3\7\1\152\15\7\1\0\1\7\4\0\1\152"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\1\7\1\57\1\7"+
    "\1\151\1\7\1\61\1\62\16\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\1\62\3\7\2\0\1\7\10\0\5\7"+
    "\2\153\16\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\1\153"+
    "\3\7\2\0\1\7\10\0\5\7\1\154\1\153\10\7"+
    "\1\155\5\7\1\0\1\7\4\0\1\7\2\0\1\155"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\1\153"+
    "\3\7\2\0\1\7\10\0\5\7\1\156\1\64\16\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\1\64\3\7\2\0"+
    "\1\7\10\0\6\7\1\157\3\7\1\157\12\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\1\157\3\7\2\0\1\7"+
    "\10\0\3\7\1\66\4\7\1\160\1\161\13\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\3\7\1\160\2\0\1\7"+
    "\10\0\3\7\1\66\3\7\1\67\7\7\1\162\5\7"+
    "\1\0\1\7\4\0\1\67\2\0\1\162\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\4\7\1\163\13\7\1\164\4\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\4\7"+
    "\1\163\3\7\1\71\14\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\3\7\1\71\2\0\1\7\10\0\3\7\1\72"+
    "\1\7\1\165\2\7\1\166\14\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\3\7\1\166\2\0\1\7\10\0\7\7"+
    "\1\167\3\7\1\170\11\7\1\0\1\7\4\0\1\167"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\3\7\1\72\3\7"+
    "\1\167\3\7\1\74\11\7\1\0\1\7\4\0\1\167"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\3\7\1\171\1\7"+
    "\1\172\17\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\5\7\1\172\6\7\1\76\10\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\7\7\1\173\5\7\1\174\7\7\1\0\1\7"+
    "\4\0\1\173\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\174\10\0\7\7"+
    "\1\173\5\7\1\100\7\7\1\0\1\7\4\0\1\173"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\100\10\0\7\7\1\175\15\7"+
    "\1\0\1\7\4\0\1\175\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\7\7\1\175\6\7\1\102\6\7\1\0\1\7"+
    "\4\0\1\175\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\5\7"+
    "\1\176\4\7\1\177\12\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\12\7\1\177\6\7"+
    "\1\104\3\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\7\7\1\200\14\7\1\105\1\0"+
    "\1\7\4\0\1\200\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\4\7\2\0\1\7\36\0"+
    "\1\106\62\0\1\110\2\0\1\110\14\0\1\110\1\0"+
    "\1\110\52\0\1\110\2\0\1\110\14\0\1\110\1\112"+
    "\1\110\73\0\1\112\64\0\1\32\2\0\1\32\75\0"+
    "\1\113\13\0\1\113\2\0\1\113\11\0\1\113\37\0"+
    "\1\32\2\0\1\32\3\0\2\45\11\0\3\45\10\0"+
    "\2\45\4\0\4\45\32\0\1\113\2\0\2\45\7\0"+
    "\1\113\1\0\1\45\1\115\1\45\10\0\1\115\1\45"+
    "\4\0\4\45\26\0\1\31\2\0\1\31\75\0\1\117"+
    "\13\0\1\117\2\0\1\117\11\0\1\117\43\0\1\117"+
    "\2\120\1\0\2\121\6\0\1\117\2\0\1\117\11\0"+
    "\1\117\10\0\1\120\26\0\1\31\2\0\1\31\3\0"+
    "\2\45\11\0\3\45\10\0\2\45\4\0\4\45\32\0"+
    "\1\117\2\0\2\45\7\0\1\117\1\0\1\45\1\122"+
    "\1\45\10\0\1\122\1\45\4\0\4\45\1\0\25\7"+
    "\1\0\1\7\2\0\1\117\1\0\1\7\2\0\1\7"+
    "\5\0\1\7\1\125\1\0\1\7\1\117\1\0\1\7"+
    "\3\0\4\7\1\117\1\0\1\7\10\0\25\7\1\31"+
    "\1\7\1\0\1\31\2\0\1\7\2\0\1\7\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\4\7\2\0"+
    "\1\7\10\0\14\7\1\126\2\7\1\126\5\7\1\0"+
    "\1\7\4\0\1\7\1\110\1\0\1\126\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\14\7\1\126\2\7\1\126\5\7\1\0\1\7"+
    "\4\0\1\7\1\110\1\112\1\126\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\4\7\2\0\1\7\10\0"+
    "\25\130\1\0\1\130\4\0\1\130\2\0\1\130\4\0"+
    "\3\130\1\0\1\130\2\0\1\130\3\0\4\130\2\0"+
    "\1\130\24\0\1\110\2\0\1\110\14\0\1\132\1\45"+
    "\1\110\10\0\3\45\10\0\2\45\4\0\4\45\35\0"+
    "\1\45\1\133\11\0\3\45\10\0\2\45\4\0\4\45"+
    "\15\0\1\110\2\0\1\110\14\0\1\132\1\133\1\110"+
    "\10\0\3\45\10\0\2\45\4\0\4\45\1\0\25\130"+
    "\1\0\1\130\4\0\1\130\2\45\1\130\4\0\3\130"+
    "\1\0\1\135\2\45\1\130\3\0\4\130\2\45\1\130"+
    "\3\0\4\45\1\0\25\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\1\7\1\201\2\7\2\0\1\7\10\0\17\7"+
    "\1\202\5\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\7\7\1\173\5\7\1\100\7\7"+
    "\1\0\1\7\4\0\1\173\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\203"+
    "\10\0\25\141\1\0\1\141\4\0\1\141\2\0\1\141"+
    "\5\0\2\141\1\0\1\141\2\0\1\141\3\0\4\141"+
    "\2\0\1\141\10\0\3\7\1\204\16\7\1\144\2\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\3\7\1\204\21\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\5\7\1\205\1\206"+
    "\16\7\1\0\1\7\4\0\1\7\2\0\1\7\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\1\206\3\7"+
    "\2\0\1\7\10\0\13\7\1\147\1\207\10\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\4\7\2\0\1\7\10\0"+
    "\6\7\1\150\2\7\1\150\13\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\1\150\3\7\2\0\1\7\10\0\3\7"+
    "\1\151\3\7\1\210\15\7\1\0\1\7\4\0\1\210"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\1\7\1\211\5\7"+
    "\1\210\15\7\1\0\1\7\4\0\1\210\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\5\7\1\154\1\153\10\7\1\212"+
    "\5\7\1\0\1\7\4\0\1\7\2\0\1\212\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\1\153\3\7"+
    "\2\0\1\7\10\0\17\7\1\213\5\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\213\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\10\7"+
    "\1\160\1\161\13\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\3\7\1\160\2\0\1\7\10\0\11\7\1\161\13\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\2\7\1\214\14\7\1\162\5\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\162\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\1\214\1\7\2\0\1\7"+
    "\10\0\4\7\1\163\13\7\1\215\4\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\1\216"+
    "\17\7\1\215\4\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\4\7\2\0\1\7\10\0\5\7\1\165\1\7\1\217"+
    "\15\7\1\0\1\7\4\0\1\217\2\0\1\7\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\4\7\2\0"+
    "\1\7\10\0\5\7\1\165\2\7\1\166\14\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\3\7\1\166\2\0\1\7"+
    "\10\0\7\7\1\167\3\7\1\220\11\7\1\0\1\7"+
    "\4\0\1\167\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\13\7"+
    "\1\220\11\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\3\7\1\221\12\7\1\222\6\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\3\7\1\221\1\7\1\172\17\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\7\7"+
    "\1\173\5\7\1\223\7\7\1\0\1\7\4\0\1\173"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\223\10\0\15\7\1\223\7\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\223"+
    "\10\0\5\7\1\224\1\225\16\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\1\225\3\7\2\0\1\7\10\0\5\7"+
    "\1\224\4\7\1\177\12\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\2\7\1\226\4\7"+
    "\1\200\15\7\1\0\1\7\4\0\1\200\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\1\226\1\7\2\0\1\7\10\0\17\7\1\227\5\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\25\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\1\230\1\0\1\7\10\0\7\7\1\173\5\7\1\100"+
    "\7\7\1\0\1\7\4\0\1\173\2\0\1\7\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\4\7\2\0"+
    "\1\100\1\231\7\0\5\7\1\205\1\62\16\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\1\62\3\7\2\0\1\7"+
    "\10\0\5\7\1\153\1\232\16\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\1\232\3\7\2\0\1\7\10\0\12\7"+
    "\1\233\1\7\1\207\10\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\1\7\1\234\5\7"+
    "\1\210\15\7\1\0\1\7\4\0\1\210\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\1\7\1\234\23\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\17\7"+
    "\1\235\5\7\1\0\1\7\4\0\1\7\2\0\1\235"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\17\7\1\235\1\7\1\236\3\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\235\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\2\7\1\214\22\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\1\214\1\7\2\0\1\7\10\0\1\237"+
    "\17\7\1\215\4\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\4\7\2\0\1\7\10\0\1\237\24\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\4\7\2\0\1\7\10\0\7\7"+
    "\1\217\15\7\1\0\1\7\4\0\1\217\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\4\7"+
    "\2\0\1\7\10\0\3\7\1\221\12\7\1\240\6\7"+
    "\1\0\1\7\4\0\1\7\2\0\1\7\5\0\2\7"+
    "\1\0\1\7\2\0\1\7\3\0\4\7\2\0\1\7"+
    "\10\0\16\7\1\240\6\7\1\0\1\7\4\0\1\7"+
    "\2\0\1\7\5\0\2\7\1\0\1\7\2\0\1\7"+
    "\3\0\4\7\2\0\1\7\10\0\5\7\1\224\1\241"+
    "\16\7\1\0\1\7\4\0\1\7\2\0\1\7\5\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\1\241\3\7"+
    "\2\0\1\7\10\0\6\7\1\241\16\7\1\0\1\7"+
    "\4\0\1\7\2\0\1\7\5\0\2\7\1\0\1\7"+
    "\2\0\1\7\3\0\1\241\3\7\2\0\1\7\10\0"+
    "\2\7\1\226\22\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\1\226\1\7\2\0\1\7\10\0\25\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\1\202\1\7\1\230"+
    "\1\0\1\7\73\0\1\242\10\0\54\243\2\0\11\243"+
    "\1\0\5\243\1\0\5\7\1\62\1\232\16\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\1\232\3\7\2\0\1\7"+
    "\10\0\12\7\1\233\1\244\11\7\1\0\1\7\4\0"+
    "\1\7\2\0\1\7\5\0\2\7\1\0\1\7\2\0"+
    "\1\7\3\0\4\7\2\0\1\7\10\0\17\7\1\235"+
    "\1\7\1\245\3\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\235\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\4\7\2\0\1\7\10\0\21\7\1\245\3\7\1\0"+
    "\1\7\4\0\1\7\2\0\1\7\5\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\4\7\2\0\1\7\7\0"+
    "\43\246\1\0\6\246\1\0\1\246\3\0\5\246\1\247"+
    "\2\246\3\0\46\246\1\0\6\246\1\0\1\246\3\0"+
    "\5\246\1\0\2\246\3\0\3\246\1\0\2\7\1\250"+
    "\10\7\1\244\11\7\1\0\1\7\4\0\1\7\2\0"+
    "\1\7\5\0\2\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\1\250\1\7\2\0\1\7\7\0\54\251\2\0"+
    "\11\251\1\0\5\251\43\246\1\0\6\246\1\0\1\246"+
    "\3\0\5\246\1\243\2\246\3\0\3\246\1\0\2\7"+
    "\1\250\22\7\1\0\1\7\4\0\1\7\2\0\1\7"+
    "\5\0\2\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\1\250\1\7\2\0\1\7\7\0\54\251\3\0\10\251"+
    "\1\0\5\251";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\5\1\2\11\54\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\2\0\7\1\1\0"+
    "\76\1\2\0\10\1\2\0\2\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzPortugueseLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2954) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 26: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 27: break;
          case 3: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 28: break;
          case 4: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 29: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 30: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 31: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 32: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 33: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 34: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 35: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 36: break;
          case 12: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 37: break;
          case 13: 
            { return JflexBuzzTokenizer.HEHE;
            }
          case 38: break;
          case 14: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 39: break;
          case 15: 
            { return JflexBuzzTokenizer.NO;
            }
          case 40: break;
          case 16: 
            { return JflexBuzzTokenizer.KISSES;
            }
          case 41: break;
          case 17: 
            { return JflexBuzzTokenizer.YES;
            }
          case 42: break;
          case 18: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 43: break;
          case 19: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 44: break;
          case 20: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 45: break;
          case 21: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 46: break;
          case 22: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 47: break;
          case 23: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 48: break;
          case 24: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 49: break;
          case 25: 
            { return JflexBuzzTokenizer.URL;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzTurkishLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\66\1\100\1\100\1\65\22\0\1\67\1\52\1\61"+
    "\1\64\1\101\2\61\1\44\1\46\1\45\1\42\2\61\1\63\1\102"+
    "\1\75\3\55\1\36\4\55\1\56\1\55\1\74\1\41\1\35\1\62"+
    "\1\40\1\53\1\103\1\3\1\33\1\23\1\12\1\24\1\6\1\7"+
    "\1\4\1\16\1\33\1\21\1\20\1\1\1\13\1\5\1\47\1\33"+
    "\1\17\1\15\1\22\1\2\1\10\2\33\1\11\1\25\1\46\1\77"+
    "\1\45\1\61\1\60\1\0\1\3\1\33\1\23\1\12\1\24\1\73"+
    "\1\31\1\70\1\27\1\33\1\21\1\20\1\1\1\13\1\43\1\14"+
    "\1\33\1\17\1\72\1\71\1\2\1\10\1\76\1\33\1\11\1\25"+
    "\1\0\1\61\1\0\1\61\6\0\1\100\32\0\1\67\11\0\1\33"+
    "\11\0\1\34\1\33\1\0\1\54\2\0\1\33\5\0\7\33\1\23"+
    "\17\33\1\0\4\33\1\32\12\33\1\23\17\33\1\0\4\33\1\32"+
    "\42\33\1\30\20\33\1\16\1\27\54\33\2\26\u0162\33\4\0\14\33"+
    "\16\0\5\33\7\0\1\33\1\0\1\33\21\0\160\54\5\33\1\0"+
    "\2\33\2\0\4\33\10\0\1\33\1\0\3\33\1\0\1\33\1\0"+
    "\24\33\1\0\123\33\1\0\213\33\1\0\7\54\236\33\11\0\46\33"+
    "\2\0\1\33\7\0\47\33\11\0\55\54\1\54\1\54\1\0\2\54"+
    "\1\0\2\54\1\0\1\54\10\0\33\33\5\0\3\33\2\54\33\0"+
    "\13\54\5\0\53\33\25\54\12\55\4\0\2\33\1\54\143\33\1\0"+
    "\1\33\7\54\2\0\6\54\2\33\2\54\1\0\4\54\2\33\12\55"+
    "\3\33\2\0\1\33\20\0\1\33\1\54\36\33\33\54\2\0\131\33"+
    "\13\54\1\33\16\0\12\55\41\33\11\54\2\33\4\0\1\33\5\0"+
    "\26\33\4\54\1\33\11\54\1\33\3\54\1\33\5\54\22\0\31\33"+
    "\3\54\104\0\1\33\1\0\13\33\67\0\33\54\1\0\4\54\66\33"+
    "\3\54\1\33\22\54\1\33\7\54\12\33\2\54\2\0\12\55\1\0"+
    "\7\33\1\0\7\33\1\0\3\54\1\0\10\33\2\0\2\33\2\0"+
    "\26\33\1\0\7\33\1\0\1\33\3\0\4\33\2\0\1\54\1\33"+
    "\7\54\2\0\2\54\2\0\3\54\1\33\10\0\1\54\4\0\2\33"+
    "\1\0\3\33\2\54\2\0\12\55\2\33\17\0\3\54\1\0\6\33"+
    "\4\0\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0\2\33"+
    "\1\0\2\33\2\0\1\54\1\0\5\54\4\0\2\54\2\0\3\54"+
    "\3\0\1\54\7\0\4\33\1\0\1\33\7\0\12\55\2\54\3\33"+
    "\1\54\13\0\3\54\1\0\11\33\1\0\3\33\1\0\26\33\1\0"+
    "\7\33\1\0\2\33\1\0\5\33\2\0\1\54\1\33\10\54\1\0"+
    "\3\54\1\0\3\54\2\0\1\33\17\0\2\33\2\54\2\0\12\55"+
    "\21\0\3\54\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\2\33\1\0\5\33\2\0\1\54\1\33\7\54\2\0\2\54"+
    "\2\0\3\54\10\0\2\54\4\0\2\33\1\0\3\33\2\54\2\0"+
    "\12\55\1\0\1\33\20\0\1\54\1\33\1\0\6\33\3\0\3\33"+
    "\1\0\4\33\3\0\2\33\1\0\1\33\1\0\2\33\3\0\2\33"+
    "\3\0\3\33\3\0\14\33\4\0\5\54\3\0\3\54\1\0\4\54"+
    "\2\0\1\33\6\0\1\54\16\0\12\55\21\0\3\54\1\0\10\33"+
    "\1\0\3\33\1\0\27\33\1\0\12\33\1\0\5\33\3\0\1\33"+
    "\7\54\1\0\3\54\1\0\4\54\7\0\2\54\1\0\2\33\6\0"+
    "\2\33\2\54\2\0\12\55\22\0\2\54\1\0\10\33\1\0\3\33"+
    "\1\0\27\33\1\0\12\33\1\0\5\33\2\0\1\54\1\33\7\54"+
    "\1\0\3\54\1\0\4\54\7\0\2\54\7\0\1\33\1\0\2\33"+
    "\2\54\2\0\12\55\1\0\2\33\17\0\2\54\1\0\10\33\1\0"+
    "\3\33\1\0\51\33\2\0\1\33\7\54\1\0\3\54\1\0\4\54"+
    "\1\33\10\0\1\54\10\0\2\33\2\54\2\0\12\55\12\0\6\33"+
    "\2\0\2\54\1\0\22\33\3\0\30\33\1\0\11\33\1\0\1\33"+
    "\2\0\7\33\3\0\1\54\4\0\6\54\1\0\1\54\1\0\10\54"+
    "\22\0\2\54\15\0\60\33\1\54\2\33\7\54\5\0\7\33\10\54"+
    "\1\0\12\55\47\0\2\33\1\0\1\33\2\0\2\33\1\0\1\33"+
    "\2\0\1\33\6\0\4\33\1\0\7\33\1\0\3\33\1\0\1\33"+
    "\1\0\1\33\2\0\2\33\1\0\4\33\1\54\2\33\6\54\1\0"+
    "\2\54\1\33\2\0\5\33\1\0\1\33\1\0\6\54\2\0\12\55"+
    "\2\0\4\33\40\0\1\33\12\0\2\54\13\0\2\54\6\0\12\55"+
    "\13\0\1\54\1\0\1\54\1\0\1\54\4\0\2\54\10\33\1\0"+
    "\44\33\4\0\24\54\1\0\2\54\5\33\13\54\1\0\44\54\11\0"+
    "\1\54\71\0\53\33\24\54\1\33\12\55\6\0\6\33\4\54\4\33"+
    "\3\54\1\33\3\54\2\33\7\54\3\33\4\54\15\33\14\54\1\33"+
    "\1\54\12\55\4\54\2\0\46\33\1\0\1\33\5\0\1\33\2\0"+
    "\53\33\1\0\u014d\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0"+
    "\4\33\2\0\51\33\1\0\4\33\2\0\41\33\1\0\4\33\2\0"+
    "\7\33\1\0\1\33\1\0\4\33\2\0\17\33\1\0\71\33\1\0"+
    "\4\33\2\0\103\33\2\0\3\54\40\0\20\33\20\0\125\33\14\0"+
    "\u026c\33\2\0\21\33\1\67\32\33\5\0\113\33\25\0\15\33\1\0"+
    "\4\33\3\54\13\0\22\33\3\54\13\0\22\33\2\54\14\0\15\33"+
    "\1\0\3\33\1\0\2\54\14\0\64\33\40\54\3\0\1\33\4\0"+
    "\1\33\1\54\2\0\12\55\41\0\3\54\2\0\12\55\6\0\130\33"+
    "\10\0\51\33\1\54\1\33\5\0\106\33\12\0\35\33\3\0\14\54"+
    "\4\0\14\54\12\0\12\55\36\33\2\0\5\33\13\0\54\33\4\0"+
    "\21\54\7\33\2\54\6\0\12\55\46\0\27\33\5\54\4\0\65\33"+
    "\12\54\1\0\35\54\2\0\1\54\12\55\6\0\12\55\15\0\1\33"+
    "\130\0\5\54\57\33\21\54\7\33\4\0\12\55\21\0\11\54\14\0"+
    "\3\54\36\33\15\54\2\33\12\55\54\33\16\54\14\0\44\33\24\54"+
    "\10\0\12\55\3\0\3\33\12\55\44\33\122\0\3\54\1\0\25\54"+
    "\4\33\1\54\4\33\3\54\2\33\11\0\300\33\47\54\25\0\4\54"+
    "\u0116\33\2\0\6\33\2\0\46\33\2\0\6\33\2\0\10\33\1\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\37\33\2\0\65\33\1\0"+
    "\7\33\1\0\1\33\3\0\3\33\1\0\7\33\3\0\4\33\2\0"+
    "\6\33\4\0\15\33\5\0\3\33\1\0\7\33\3\0\13\67\1\0"+
    "\2\54\13\0\1\34\2\0\2\61\12\0\1\100\1\100\5\0\1\67"+
    "\57\0\1\67\21\0\1\33\15\0\1\33\20\0\15\33\63\0\41\54"+
    "\21\0\1\33\4\0\1\33\2\0\12\33\1\0\1\33\3\0\5\33"+
    "\6\0\1\33\1\0\1\33\1\0\1\33\1\0\4\33\1\0\13\33"+
    "\2\0\4\33\5\0\5\33\4\0\1\33\64\0\2\33\u04b5\0\1\50"+
    "\52\0\1\37\246\0\1\50\127\0\1\37\u049b\0\57\33\1\0\57\33"+
    "\1\0\205\33\6\0\4\33\3\54\2\33\14\0\46\33\1\0\1\33"+
    "\5\0\1\33\2\0\70\33\7\0\1\33\17\0\1\54\27\33\11\0"+
    "\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\1\0\7\33\1\0\40\54\57\0\1\33\u01d0\0"+
    "\1\67\2\0\1\54\1\0\2\33\25\0\1\54\15\0\6\54\1\0"+
    "\5\33\5\0\2\33\4\0\126\33\2\0\2\54\2\54\3\33\1\54"+
    "\132\33\1\54\4\33\5\0\51\33\3\0\136\33\21\0\33\33\65\0"+
    "\20\33\u0200\0\u19b6\33\112\0\u51cd\33\63\0\u048d\33\103\0\56\33\2\0"+
    "\u010d\33\3\0\20\33\12\55\2\33\24\0\57\33\4\54\1\0\12\54"+
    "\1\54\31\33\7\0\1\54\106\33\12\0\2\54\45\0\11\33\2\0"+
    "\147\33\2\0\4\33\1\0\4\33\14\0\13\33\115\0\12\33\1\54"+
    "\3\33\1\54\4\33\1\54\27\33\5\54\30\0\64\33\14\0\2\54"+
    "\62\33\21\54\13\0\12\55\6\0\22\54\6\33\3\0\1\33\4\0"+
    "\12\55\34\33\10\54\2\0\27\33\15\54\14\0\35\33\3\0\4\54"+
    "\57\33\16\54\16\0\1\33\12\55\46\0\51\33\16\54\11\0\3\33"+
    "\1\54\10\33\2\54\2\0\12\55\6\0\27\33\3\0\1\33\1\54"+
    "\4\0\60\33\1\54\1\33\3\54\2\33\2\54\5\33\2\54\1\33"+
    "\1\54\1\33\30\0\3\33\2\0\13\33\5\54\2\0\3\33\2\54"+
    "\12\0\6\33\2\0\6\33\2\0\6\33\11\0\7\33\1\0\7\33"+
    "\221\0\43\33\10\54\1\0\2\54\2\0\12\55\6\0\u2ba4\33\14\0"+
    "\27\33\4\0\61\33\u2104\0\u016e\33\2\0\152\33\46\0\7\33\14\0"+
    "\5\33\5\0\1\33\1\54\12\33\1\0\15\33\1\0\5\33\1\0"+
    "\1\33\1\0\2\33\1\0\2\33\1\0\154\33\41\0\u016b\33\22\0"+
    "\100\33\2\0\66\33\50\0\14\33\4\0\20\54\20\0\7\54\111\0"+
    "\5\33\1\0\207\33\6\0\1\57\14\0\12\55\7\0\32\33\6\0"+
    "\32\33\3\0\1\54\7\0\131\33\3\0\6\33\2\0\6\33\2\0"+
    "\6\33\2\0\3\33\43\0\14\33\1\0\32\33\1\0\23\33\1\0"+
    "\2\33\1\0\17\33\2\0\16\33\42\0\173\33\u0102\0\1\54\202\0"+
    "\35\33\3\0\61\33\57\0\37\33\21\0\21\33\1\0\10\33\66\0"+
    "\36\33\2\0\44\33\4\0\10\33\60\0\236\33\2\0\12\55\u0356\0"+
    "\6\33\2\0\1\33\1\0\54\33\1\0\2\33\3\0\1\33\2\0"+
    "\27\33\252\0\26\33\12\0\32\33\106\0\70\33\6\0\2\33\100\0"+
    "\1\33\3\54\1\0\2\54\5\0\4\54\4\33\1\0\3\33\1\0"+
    "\33\33\4\0\3\54\4\0\1\54\40\0\35\33\203\0\66\33\12\0"+
    "\26\33\12\0\23\33\215\0\111\33\u03b7\0\3\54\65\33\17\54\37\0"+
    "\12\55\20\0\3\54\55\33\13\54\25\0\31\33\7\0\12\55\6\0"+
    "\3\54\44\33\16\54\1\0\12\55\100\0\3\54\60\33\16\54\4\33"+
    "\13\0\12\55\u04a6\0\53\33\15\54\10\0\12\55\u0936\0\u036f\33\u0c91\0"+
    "\u042f\33\u33d1\0\u0239\33\u04c7\0\105\33\13\0\1\33\56\54\20\0\4\54"+
    "\15\33\u4060\0\2\33\u2163\0\5\54\3\0\6\54\10\0\10\54\2\0"+
    "\7\54\36\0\4\54\224\0\3\54\u01bb\0\125\33\1\0\107\33\1\0"+
    "\2\33\2\0\1\33\2\0\2\33\2\0\4\33\1\0\14\33\1\0"+
    "\1\33\1\0\7\33\1\0\101\33\1\0\4\33\2\0\10\33\1\0"+
    "\7\33\1\0\34\33\1\0\4\33\1\0\5\33\1\0\1\33\3\0"+
    "\7\33\1\0\u0154\33\2\0\31\33\1\0\31\33\1\0\37\33\1\0"+
    "\31\33\1\0\37\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0"+
    "\37\33\1\0\31\33\1\0\10\33\2\0\62\55\u1600\0\4\33\1\0"+
    "\33\33\1\0\2\33\1\0\1\33\2\0\1\33\1\0\12\33\1\0"+
    "\4\33\1\0\1\33\1\0\1\33\6\0\1\33\4\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\3\33\1\0\2\33\1\0\1\33\2\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\2\33\1\0\1\33\2\0\4\33\1\0\7\33\1\0\4\33\1\0"+
    "\4\33\1\0\1\33\1\0\12\33\1\0\21\33\5\0\3\33\1\0"+
    "\5\33\1\0\21\33\u047d\0\1\50\116\0\1\50\303\0\2\50\1\0"+
    "\1\50\73\0\1\50\1\37\2\0\5\37\1\51\13\37\2\0\1\51"+
    "\u015e\0\4\50\1\0\1\50\2\0\5\50\1\0\1\50\2\0\1\51"+
    "\5\0\1\50\3\0\2\50\1\51\1\0\2\51\7\0\1\51\1\0"+
    "\1\51\1\0\1\51\5\0\1\50\33\0\1\50\u09b0\0\ua6d7\33\51\0"+
    "\u1035\33\13\0\336\33\u3fe2\0\u021e\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\54\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\15\2\1\3\1\1\1\2\1\4\2\1"+
    "\2\3\1\2\1\5\1\6\1\7\1\10\1\2\1\1"+
    "\3\3\1\1\3\2\1\3\3\2\1\0\1\11\3\2"+
    "\1\12\4\2\1\13\22\2\1\4\1\0\1\5\1\0"+
    "\2\6\1\0\1\3\1\6\1\5\1\0\1\3\1\0"+
    "\1\5\1\2\1\0\2\5\1\2\1\14\1\0\1\3"+
    "\1\5\1\6\1\14\3\2\2\15\2\2\2\0\1\13"+
    "\1\12\1\16\1\12\5\2\1\17\2\2\1\20\30\2"+
    "\2\21\6\2\1\22\2\2\1\23\10\2\2\24\3\2"+
    "\2\0\2\2\2\0\1\16\7\2\1\25\4\2\1\23"+
    "\2\0\1\2\1\0\1\26\1\27\3\13\2\2\1\13"+
    "\1\2\2\0\1\2\1\30\1\2\1\13\1\31\1\13"+
    "\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\104\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\104\0\104\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0"+
    "\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0"+
    "\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u050c"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u06e8\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u0908\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u0ae4\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1a90"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc"+
    "\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u1dc0\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u2860\0\u20f0\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u2a80\0\u2398\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2684\0\u2ce4\0\u2d28\0\u2d6c"+
    "\0\u2db0\0\u28e8\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2b90\0\u2bd4"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u09d4\0\u32bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\10\1\14\1\15\2\10\1\16\3\10"+
    "\1\17\5\10\1\4\1\10\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\2\1\7\1\20\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\2\1\22\1\35\1\36"+
    "\1\37\1\20\1\40\1\20\1\41\1\42\2\2\1\43"+
    "\1\10\1\15\1\44\1\40\1\20\1\45\3\2\1\20"+
    "\1\46\105\0\1\10\1\47\1\50\7\10\1\51\20\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\4\10\2\0\1\10"+
    "\6\0\1\10\1\4\3\10\1\53\4\10\1\51\16\10"+
    "\1\4\1\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\3\10"+
    "\1\53\2\0\1\10\6\0\1\54\1\10\1\5\1\55"+
    "\6\10\1\51\1\10\1\56\10\10\1\56\5\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\1\55\1\10\1\56\1\10"+
    "\2\0\1\10\6\0\2\10\1\57\1\60\6\10\1\51"+
    "\20\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\10\5\0\2\22\1\0\1\22\7\0\1\60\3\10"+
    "\2\0\1\10\6\0\1\61\3\10\1\62\5\10\1\51"+
    "\3\10\1\63\3\10\1\64\10\10\1\52\1\0\1\22"+
    "\4\0\1\62\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\12\10\1\51"+
    "\20\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\10\5\0\2\22\1\0\1\22\7\0\4\10\2\0"+
    "\1\10\6\0\2\10\1\65\4\10\1\11\2\10\1\51"+
    "\20\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\10\5\0\2\22\1\0\1\22\7\0\4\10\2\0"+
    "\1\10\6\0\2\10\1\66\4\10\1\67\1\70\1\10"+
    "\1\51\10\10\1\71\7\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\2\10\1\72\6\10"+
    "\1\73\1\51\20\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\4\10\2\0\1\10\6\0\12\10\1\51\1\14\1\10"+
    "\1\74\5\10\1\75\1\76\1\10\1\74\4\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\14\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\6\0"+
    "\12\10\1\51\1\10\1\15\1\77\2\10\1\100\2\10"+
    "\1\101\2\10\1\77\4\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\2\10\1\15\1\10\2\0\1\10\6\0\1\102"+
    "\3\10\1\103\5\10\1\51\4\10\1\104\13\10\1\52"+
    "\1\0\1\22\4\0\1\103\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\6\0"+
    "\7\10\1\105\2\10\1\51\10\10\1\106\7\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\41\0"+
    "\1\20\7\0\3\20\11\0\5\20\7\0\2\20\4\0"+
    "\2\20\36\0\1\107\2\0\1\110\14\0\1\110\3\0"+
    "\1\110\11\0\1\110\10\0\33\22\2\0\1\22\4\0"+
    "\1\22\3\0\1\22\5\0\2\22\1\0\1\22\7\0"+
    "\4\22\2\0\1\22\46\0\1\110\14\0\1\110\3\0"+
    "\1\110\11\0\1\110\21\0\1\111\1\0\1\111\25\0"+
    "\3\112\1\111\1\113\1\111\13\0\1\112\54\0\1\20"+
    "\4\0\1\114\2\115\1\116\1\26\1\20\7\0\1\114"+
    "\1\0\2\20\1\117\1\116\1\20\7\0\1\117\1\20"+
    "\4\0\2\20\34\0\1\20\4\0\1\120\2\121\1\122"+
    "\1\20\1\27\1\123\6\0\1\120\1\0\2\20\1\124"+
    "\1\122\1\20\7\0\1\124\1\20\4\0\2\20\1\0"+
    "\12\10\1\51\1\14\1\10\1\74\5\10\1\75\1\76"+
    "\1\10\1\74\4\10\1\52\1\0\1\22\2\0\1\120"+
    "\1\121\1\125\1\126\1\0\1\123\1\30\5\0\1\22"+
    "\1\127\1\0\1\22\1\0\1\120\1\121\4\0\4\10"+
    "\1\120\1\0\1\10\57\0\1\33\104\0\1\34\31\0"+
    "\11\22\1\130\1\22\1\130\17\22\2\0\1\22\3\0"+
    "\1\112\1\131\1\112\1\111\1\113\1\130\5\0\2\22"+
    "\1\0\1\22\2\0\1\112\4\0\4\22\2\0\1\22"+
    "\6\0\33\132\2\0\1\133\4\0\1\132\3\0\1\132"+
    "\4\0\1\132\2\133\1\0\1\132\7\0\4\132\2\0"+
    "\1\132\6\0\33\22\1\20\1\0\1\22\4\0\1\22"+
    "\3\20\1\22\5\0\2\22\1\0\1\37\4\20\3\0"+
    "\4\22\2\20\1\22\3\0\2\20\12\0\1\111\1\0"+
    "\1\111\17\0\1\20\5\0\2\112\1\134\1\135\1\136"+
    "\1\111\10\0\3\20\1\134\1\20\7\0\2\20\4\0"+
    "\2\20\1\0\33\132\1\20\1\0\1\133\4\0\1\132"+
    "\3\20\1\132\4\0\1\132\2\133\1\0\1\137\4\20"+
    "\3\0\4\132\2\20\1\132\3\0\2\20\66\0\1\2"+
    "\16\0\2\10\1\57\1\60\6\10\1\51\20\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\1\60\1\140\2\10\2\0"+
    "\1\10\6\0\12\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\1\10\1\141\2\10\2\0\1\10\6\0"+
    "\12\10\1\51\20\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\4\10\2\0\1\142\6\0\33\143\1\20\1\0\1\143"+
    "\4\0\1\143\3\20\1\143\5\0\2\143\1\0\1\144"+
    "\4\20\3\0\4\143\2\20\1\143\3\0\2\20\1\0"+
    "\2\10\1\145\7\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\12\10\1\51"+
    "\4\10\1\146\13\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\4\10\2\0\1\10\6\0\12\10\1\51\20\10\1\147"+
    "\1\0\1\22\4\0\1\10\1\147\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\20\0"+
    "\1\150\71\0\5\10\1\53\4\10\1\51\20\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\3\10\1\53\2\0\1\10"+
    "\6\0\1\54\11\10\1\51\5\10\1\151\12\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\6\0"+
    "\2\10\2\152\6\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\1\152\3\10\2\0\1\10\6\0\12\10"+
    "\1\51\1\10\1\56\3\10\1\153\4\10\1\56\5\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\2\10\1\56\1\10"+
    "\2\0\1\10\6\0\2\10\1\154\1\152\4\10\1\155"+
    "\1\10\1\51\1\156\1\157\16\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\156\5\0\2\22\1\0"+
    "\1\22\7\0\1\152\1\10\1\157\1\10\2\0\1\10"+
    "\6\0\2\10\1\160\1\60\6\10\1\51\20\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\1\60\3\10\2\0\1\10"+
    "\6\0\1\61\4\10\1\161\1\162\3\10\1\51\15\10"+
    "\1\162\2\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\3\10"+
    "\1\161\2\0\1\10\6\0\1\61\3\10\1\62\5\10"+
    "\1\51\1\163\2\10\1\63\3\10\1\64\10\10\1\52"+
    "\1\0\1\22\4\0\1\62\1\52\2\0\1\163\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\6\0"+
    "\4\10\1\164\5\10\1\51\3\10\1\63\14\10\1\52"+
    "\1\0\1\22\4\0\1\164\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\6\0"+
    "\12\10\1\51\7\10\1\64\10\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\2\10\1\65"+
    "\5\10\1\165\1\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\2\10\1\66"+
    "\4\10\1\166\2\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\7\10\1\67"+
    "\2\10\1\51\1\10\1\167\10\10\1\167\5\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\2\10\1\167\1\10\2\0"+
    "\1\10\6\0\2\10\1\66\4\10\1\67\1\70\1\10"+
    "\1\51\10\10\1\170\7\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\1\10"+
    "\1\171\6\10\1\170\7\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\2\10\1\171\1\10\2\0\1\10\6\0\1\172"+
    "\1\10\1\173\7\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\2\10\1\173"+
    "\6\10\1\73\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\2\10"+
    "\1\74\4\10\1\64\3\10\1\74\4\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\12\10"+
    "\1\51\10\10\1\75\1\76\6\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\7\10\1\174"+
    "\2\10\1\51\10\10\1\175\1\76\6\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\12\10"+
    "\1\51\2\10\1\77\2\10\1\176\1\10\1\177\3\10"+
    "\1\77\4\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\6\0\12\10\1\51\5\10\1\100\1\200"+
    "\11\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\10\5\0\2\22\1\0\1\22\7\0\1\10\1\200"+
    "\2\10\2\0\1\10\6\0\7\10\1\201\2\10\1\51"+
    "\10\10\1\101\7\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\4\10\2\0\1\10\6\0\1\102\1\10\1\202\2\10"+
    "\1\203\4\10\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\3\10\1\203\2\0\1\10\6\0\4\10\1\204"+
    "\5\10\1\51\4\10\1\205\13\10\1\52\1\0\1\22"+
    "\4\0\1\204\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\1\102\3\10"+
    "\1\204\5\10\1\51\4\10\1\104\13\10\1\52\1\0"+
    "\1\22\4\0\1\204\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\7\10"+
    "\1\206\2\10\1\51\10\10\1\207\7\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\7\10"+
    "\1\206\2\10\1\51\10\10\1\106\7\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\43\0\1\107"+
    "\57\0\1\111\1\0\1\111\30\0\1\111\1\0\1\111"+
    "\46\0\1\111\1\0\1\111\30\0\1\111\1\113\1\111"+
    "\102\0\1\113\72\0\1\32\2\0\1\32\104\0\1\114"+
    "\14\0\1\114\3\0\1\114\11\0\1\114\43\0\1\20"+
    "\4\0\1\114\2\0\3\20\7\0\1\114\1\0\2\20"+
    "\1\117\2\20\7\0\1\117\1\20\4\0\2\20\34\0"+
    "\1\20\1\32\2\0\1\32\3\0\3\20\11\0\5\20"+
    "\7\0\2\20\4\0\2\20\35\0\1\31\2\0\1\31"+
    "\104\0\1\120\14\0\1\120\3\0\1\120\11\0\1\120"+
    "\43\0\1\20\4\0\1\120\2\0\3\20\7\0\1\120"+
    "\1\0\2\20\1\124\2\20\7\0\1\124\1\20\4\0"+
    "\2\20\41\0\1\120\3\121\1\0\2\123\6\0\1\120"+
    "\3\0\1\120\1\121\10\0\1\120\43\0\1\20\1\31"+
    "\2\0\1\31\3\0\3\20\11\0\5\20\7\0\2\20"+
    "\4\0\2\20\1\0\12\10\1\51\20\10\1\52\1\0"+
    "\1\22\2\0\1\120\1\0\1\10\1\52\2\0\1\10"+
    "\5\0\1\22\1\127\1\0\1\22\1\0\1\120\5\0"+
    "\4\10\1\120\1\0\1\10\20\0\1\150\25\0\1\120"+
    "\14\0\1\120\3\0\1\120\11\0\1\120\10\0\33\22"+
    "\1\0\1\31\1\22\1\0\1\31\2\0\1\22\3\0"+
    "\1\22\5\0\2\22\1\0\1\22\7\0\4\22\2\0"+
    "\1\22\6\0\11\22\1\130\1\22\1\130\17\22\2\0"+
    "\1\22\4\0\1\22\1\0\1\111\1\0\1\130\5\0"+
    "\2\22\1\0\1\22\7\0\4\22\2\0\1\22\6\0"+
    "\11\22\1\130\1\22\1\130\17\22\2\0\1\22\4\0"+
    "\1\22\1\0\1\111\1\113\1\130\5\0\2\22\1\0"+
    "\1\22\7\0\4\22\2\0\1\22\6\0\33\132\2\0"+
    "\1\132\4\0\1\132\3\0\1\132\4\0\3\132\1\0"+
    "\1\132\7\0\4\132\2\0\1\132\17\0\1\111\1\0"+
    "\1\111\17\0\1\20\7\0\1\20\1\135\1\136\1\111"+
    "\10\0\5\20\7\0\2\20\4\0\2\20\12\0\1\111"+
    "\1\0\1\111\17\0\1\20\7\0\1\20\1\135\1\20"+
    "\1\111\10\0\5\20\7\0\2\20\4\0\2\20\34\0"+
    "\1\20\7\0\2\20\1\136\11\0\5\20\7\0\2\20"+
    "\4\0\2\20\1\0\33\132\1\20\1\0\1\132\4\0"+
    "\1\132\3\20\1\132\4\0\3\132\1\0\1\137\4\20"+
    "\3\0\4\132\2\20\1\132\3\0\2\20\1\0\12\10"+
    "\1\51\20\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\1\10"+
    "\1\210\2\10\2\0\1\10\6\0\12\10\1\51\1\211"+
    "\17\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\10\5\0\2\22\1\0\1\22\7\0\4\10\2\0"+
    "\1\10\6\0\12\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\212\6\0\33\143\2\0"+
    "\1\143\4\0\1\143\3\0\1\143\5\0\2\143\1\0"+
    "\1\143\7\0\4\143\2\0\1\143\6\0\2\10\1\213"+
    "\1\214\6\10\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\1\214\3\10\2\0\1\10\6\0\1\215\11\10"+
    "\1\51\20\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\20\0\1\150\6\0\1\216\46\0\1\216"+
    "\25\0\1\150\6\0\1\217\46\0\1\217\13\0\12\10"+
    "\1\51\5\10\1\151\12\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\2\10"+
    "\1\220\2\10\1\153\5\10\1\220\4\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\2\10"+
    "\1\154\1\152\4\10\1\221\1\10\1\51\1\222\1\157"+
    "\16\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\222\5\0\2\22\1\0\1\22\7\0\1\152\1\10"+
    "\1\157\1\10\2\0\1\10\6\0\10\10\1\221\1\10"+
    "\1\51\2\10\1\223\10\10\1\223\4\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\12\10"+
    "\1\51\1\224\17\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\224\5\0\2\22\1\0\1\22\7\0"+
    "\4\10\2\0\1\10\6\0\12\10\1\51\1\10\1\157"+
    "\4\10\1\225\11\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\1\10\1\225\1\157\1\10\2\0\1\10\6\0\5\10"+
    "\1\161\1\162\3\10\1\51\15\10\1\162\2\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\3\10\1\161\2\0\1\10"+
    "\6\0\6\10\1\162\3\10\1\51\15\10\1\162\2\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\4\10\2\0\1\10"+
    "\6\0\12\10\1\51\1\163\1\226\16\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\163\5\0\2\22"+
    "\1\0\1\22\7\0\2\10\1\226\1\10\2\0\1\10"+
    "\6\0\4\10\1\164\5\10\1\51\1\10\1\227\16\10"+
    "\1\52\1\0\1\22\4\0\1\164\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\2\10\1\227\1\10"+
    "\2\0\1\10\6\0\10\10\1\165\1\10\1\51\20\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\4\10\2\0\1\10"+
    "\6\0\7\10\1\166\2\10\1\51\1\10\1\230\10\10"+
    "\1\230\5\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\2\10"+
    "\1\230\1\10\2\0\1\10\6\0\12\10\1\51\1\10"+
    "\1\167\3\10\1\151\4\10\1\167\5\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\2\10\1\167\1\10\2\0\1\10"+
    "\6\0\12\10\1\51\1\10\1\231\6\10\1\170\7\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\2\10\1\231\1\10"+
    "\2\0\1\10\6\0\12\10\1\51\1\10\1\231\16\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\2\10\1\231\1\10"+
    "\2\0\1\10\6\0\1\232\11\10\1\233\20\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\6\0"+
    "\1\232\1\10\1\173\7\10\1\51\20\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\7\10"+
    "\1\174\2\10\1\234\10\10\1\235\7\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\7\10"+
    "\1\174\2\10\1\51\10\10\1\175\7\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\12\10"+
    "\1\51\5\10\1\176\1\225\11\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\1\10\1\225\2\10\2\0\1\10\6\0"+
    "\2\10\1\236\7\10\1\51\6\10\1\237\1\177\10\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\1\10\1\237\2\10"+
    "\2\0\1\10\6\0\12\10\1\51\3\10\1\240\2\10"+
    "\1\200\11\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\1\10"+
    "\1\200\2\10\2\0\1\10\6\0\6\10\1\241\1\201"+
    "\2\10\1\51\15\10\1\241\2\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\2\10\1\202"+
    "\1\10\1\242\5\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\242\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\2\10\1\202"+
    "\2\10\1\203\4\10\1\51\20\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\3\10\1\203\2\0\1\10\6\0\4\10"+
    "\1\204\5\10\1\51\4\10\1\243\13\10\1\52\1\0"+
    "\1\22\4\0\1\204\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\12\10"+
    "\1\51\4\10\1\243\13\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\7\10\1\206\2\10"+
    "\1\51\10\10\1\244\7\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\6\10"+
    "\1\245\1\10\1\244\7\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\1\10\1\245\2\10\2\0\1\10\6\0\12\10"+
    "\1\51\1\246\17\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\4\10\2\0\1\10\6\0\12\10\1\51\20\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\1\247\1\0\1\10"+
    "\6\0\12\10\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\1\250\5\0\2\10\1\213"+
    "\1\55\6\10\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\1\55\3\10\2\0\1\10\6\0\2\10\1\152"+
    "\1\251\6\10\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\1\251\3\10\2\0\1\10\6\0\12\10\1\51"+
    "\2\10\1\252\10\10\1\252\4\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\27\0\1\216\11\0"+
    "\1\253\7\0\1\253\24\0\1\216\34\0\1\254\11\0"+
    "\1\253\7\0\1\253\24\0\1\254\13\0\1\255\11\10"+
    "\1\51\2\10\1\220\10\10\1\220\4\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\10\10"+
    "\1\221\1\10\1\51\2\10\1\256\10\10\1\256\4\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\4\10\2\0\1\10"+
    "\6\0\12\10\1\51\1\257\17\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\257\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\12\10\1\51"+
    "\2\10\1\256\1\260\7\10\1\256\4\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\10\10"+
    "\1\261\1\10\1\51\1\257\17\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\257\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\12\10\1\51"+
    "\2\10\1\262\3\10\1\225\4\10\1\262\4\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\1\10\1\225\2\10\2\0"+
    "\1\10\6\0\12\10\1\51\1\10\1\226\16\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\2\10\1\226\1\10\2\0"+
    "\1\10\6\0\12\10\1\51\1\263\1\227\16\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\263\5\0"+
    "\2\22\1\0\1\22\7\0\2\10\1\227\1\10\2\0"+
    "\1\10\6\0\2\10\1\264\7\10\1\51\1\10\1\230"+
    "\10\10\1\230\5\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\2\10\1\230\1\10\2\0\1\10\6\0\1\232\11\10"+
    "\1\265\20\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\6\0\12\10\1\265\20\10\1\147\1\0"+
    "\1\22\4\0\1\10\1\147\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\12\10"+
    "\1\234\5\10\1\151\12\10\1\147\1\0\1\22\4\0"+
    "\1\10\1\147\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\234\10\10"+
    "\1\235\7\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\6\0\2\10\1\236\7\10\1\51\3\10"+
    "\1\266\14\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\6\0\12\10\1\51\6\10\1\237\4\10"+
    "\1\267\4\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\1\10"+
    "\1\237\2\10\2\0\1\10\6\0\6\10\1\270\3\10"+
    "\1\51\3\10\1\240\11\10\1\270\2\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\6\10"+
    "\1\241\3\10\1\51\2\10\1\271\10\10\1\271\1\10"+
    "\1\241\2\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\6\0\4\10\1\242\5\10\1\51\20\10"+
    "\1\52\1\0\1\22\4\0\1\242\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\4\10\2\0\1\10"+
    "\6\0\12\10\1\51\6\10\1\272\1\10\1\244\7\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\1\10\1\272\2\10"+
    "\2\0\1\10\6\0\12\10\1\51\6\10\1\272\11\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\1\10\1\272\2\10"+
    "\2\0\1\10\6\0\12\10\1\51\20\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\2\10\1\211\1\10\1\247\1\0"+
    "\1\10\102\0\1\273\6\0\65\274\2\0\11\274\1\0"+
    "\3\274\1\0\2\10\1\55\1\251\6\10\1\51\20\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\1\251\3\10\2\0"+
    "\1\10\6\0\12\10\1\51\1\10\1\275\16\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\2\10\1\275\1\10\2\0"+
    "\1\10\15\0\1\276\74\0\1\255\11\10\1\51\20\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\10"+
    "\5\0\2\22\1\0\1\22\7\0\4\10\2\0\1\10"+
    "\6\0\12\10\1\51\2\10\1\256\1\277\7\10\1\256"+
    "\4\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\10\5\0\2\22\1\0\1\22\7\0\4\10\2\0"+
    "\1\10\6\0\10\10\1\300\1\10\1\51\1\257\17\10"+
    "\1\52\1\0\1\22\4\0\1\10\1\52\2\0\1\257"+
    "\5\0\2\22\1\0\1\22\7\0\4\10\2\0\1\10"+
    "\6\0\12\10\1\51\3\10\1\277\14\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\10\10"+
    "\1\300\1\10\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\2\10"+
    "\1\262\1\301\7\10\1\262\4\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\1\10\1\302"+
    "\10\10\1\51\1\263\17\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\263\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\2\10\1\264\7\10"+
    "\1\51\5\10\1\303\12\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\2\10"+
    "\1\304\1\266\7\10\1\304\4\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\12\10\1\51"+
    "\13\10\1\267\2\305\2\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\6\10\1\270\3\10"+
    "\1\51\6\10\1\306\6\10\1\270\2\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\1\10\1\306\2\10\2\0\1\10"+
    "\6\0\12\10\1\51\2\10\1\271\1\10\1\307\6\10"+
    "\1\271\4\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\5\0\53\310\1\0\10\310\4\0\5\310"+
    "\1\311\2\310\3\0\54\310\1\0\10\310\4\0\5\310"+
    "\1\0\2\310\3\0\1\310\1\0\12\10\1\51\2\10"+
    "\1\312\10\10\1\312\4\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\15\0\1\276\13\0\1\313"+
    "\60\0\12\10\1\51\3\10\1\301\14\10\1\52\1\0"+
    "\1\22\4\0\1\10\1\52\2\0\1\10\5\0\2\22"+
    "\1\0\1\22\7\0\4\10\2\0\1\10\6\0\1\10"+
    "\1\302\10\10\1\51\20\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\4\10"+
    "\1\314\1\303\12\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\4\10\2\0\1\10\6\0\1\315\11\10\1\51\2\10"+
    "\1\304\10\10\1\304\4\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\12\10\1\51\2\10"+
    "\1\304\10\10\1\304\2\305\2\10\1\52\1\0\1\22"+
    "\4\0\1\10\1\52\2\0\1\10\5\0\2\22\1\0"+
    "\1\22\7\0\4\10\2\0\1\10\6\0\12\10\1\51"+
    "\6\10\1\306\11\10\1\52\1\0\1\22\4\0\1\10"+
    "\1\52\2\0\1\10\5\0\2\22\1\0\1\22\7\0"+
    "\1\10\1\306\2\10\2\0\1\10\6\0\12\10\1\51"+
    "\2\10\1\220\1\10\1\307\6\10\1\220\4\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\5\0"+
    "\65\316\2\0\11\316\1\0\3\316\53\310\1\0\10\310"+
    "\4\0\5\310\1\274\2\310\3\0\1\310\1\0\12\10"+
    "\1\317\20\10\1\52\1\0\1\22\4\0\1\10\1\52"+
    "\2\0\1\10\5\0\2\22\1\0\1\22\7\0\4\10"+
    "\2\0\1\10\31\0\1\313\60\0\2\10\1\320\7\10"+
    "\1\51\4\10\1\314\13\10\1\52\1\0\1\22\4\0"+
    "\1\10\1\52\2\0\1\10\5\0\2\22\1\0\1\22"+
    "\7\0\4\10\2\0\1\10\6\0\1\315\11\10\1\51"+
    "\20\10\1\52\1\0\1\22\4\0\1\10\1\52\2\0"+
    "\1\10\5\0\2\22\1\0\1\22\7\0\4\10\2\0"+
    "\1\10\5\0\65\316\3\0\10\316\1\0\3\316\1\0"+
    "\2\10\1\320\7\10\1\51\3\10\1\301\14\10\1\52"+
    "\1\0\1\22\4\0\1\10\1\52\2\0\1\10\5\0"+
    "\2\22\1\0\1\22\7\0\4\10\2\0\1\10\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\5\1\2\11\17\1\1\0"+
    "\35\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\4\1\1\0\13\1\2\0"+
    "\76\1\2\0\2\1\2\0\16\1\2\0\1\1\1\0"+
    "\11\1\2\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzTurkishLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2982) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 26: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 27: break;
          case 3: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 28: break;
          case 4: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 29: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 30: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 31: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 32: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 33: break;
          case 9: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 34: break;
          case 10: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 35: break;
          case 11: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 36: break;
          case 12: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 37: break;
          case 13: 
            { return JflexBuzzTokenizer.USER;
            }
          case 38: break;
          case 14: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 39: break;
          case 15: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 40: break;
          case 16: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 41: break;
          case 17: 
            { return JflexBuzzTokenizer.APOSTROPHE_NT;
            }
          case 42: break;
          case 18: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 43: break;
          case 19: 
            { return JflexBuzzTokenizer.YES;
            }
          case 44: break;
          case 20: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 45: break;
          case 21: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 46: break;
          case 22: 
            { return JflexBuzzTokenizer.NO;
            }
          case 47: break;
          case 23: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 48: break;
          case 24: 
            { return JflexBuzzTokenizer.APOSTROPHE_NTVE;
            }
          case 49: break;
          case 25: 
            { return JflexBuzzTokenizer.URL;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

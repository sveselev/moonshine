/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzArabicLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\73\1\72\1\104\1\104\1\71\22\0\1\73\1\56\1\65"+
    "\1\70\1\105\2\65\1\47\1\52\1\50\1\45\2\65\1\67\1\106"+
    "\1\101\3\61\1\41\4\61\1\62\1\61\1\100\1\44\1\40\1\66"+
    "\1\43\1\57\1\107\1\11\2\35\1\10\1\30\1\5\1\6\1\31"+
    "\3\35\1\34\1\4\1\12\1\3\1\53\1\35\1\33\1\35\1\37"+
    "\2\35\1\7\1\35\1\27\1\35\1\52\1\103\1\50\1\65\1\64"+
    "\1\0\1\11\2\35\1\10\1\30\1\77\1\6\1\74\3\35\1\34"+
    "\1\4\1\12\1\46\1\51\1\35\1\33\1\76\1\75\2\35\1\102"+
    "\1\35\1\27\1\35\1\0\1\65\1\0\1\65\6\0\1\104\32\0"+
    "\1\73\11\0\1\35\11\0\1\36\1\35\1\0\1\60\2\0\1\35"+
    "\5\0\27\35\1\0\37\35\1\0\u01ca\35\4\0\14\35\16\0\5\35"+
    "\7\0\1\35\1\0\1\35\21\0\160\60\5\35\1\0\2\35\2\0"+
    "\4\35\10\0\1\35\1\0\3\35\1\0\1\35\1\0\24\35\1\0"+
    "\123\35\1\0\213\35\1\0\7\60\236\35\11\0\46\35\2\0\1\35"+
    "\7\0\47\35\11\0\55\60\1\60\1\60\1\0\2\60\1\0\2\60"+
    "\1\0\1\60\10\0\33\35\5\0\3\35\2\60\13\0\5\110\1\0"+
    "\6\110\1\0\3\110\13\111\1\0\1\110\1\0\1\110\1\0\7\35"+
    "\1\2\1\25\1\22\3\35\1\24\1\35\1\23\3\35\1\21\5\35"+
    "\1\13\6\35\1\35\1\14\1\35\1\26\1\17\1\32\1\16\1\1"+
    "\1\15\1\35\1\20\13\60\12\111\12\61\4\110\2\35\1\60\143\35"+
    "\1\110\1\35\7\111\1\0\1\110\6\111\2\35\2\111\1\110\4\111"+
    "\2\35\12\61\3\35\2\110\1\35\20\0\1\35\1\60\36\35\33\60"+
    "\2\0\3\35\60\35\46\35\13\60\1\35\16\0\12\61\41\35\11\60"+
    "\2\35\4\0\1\35\5\0\26\35\4\60\1\35\11\60\1\35\3\60"+
    "\1\35\5\60\22\0\31\35\3\60\104\0\1\35\1\110\13\35\67\110"+
    "\33\111\1\110\4\60\66\35\3\60\1\35\22\60\1\35\7\60\12\35"+
    "\2\60\2\0\12\61\1\0\7\35\1\0\7\35\1\0\3\60\1\0"+
    "\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0\1\35\3\0"+
    "\4\35\2\0\1\60\1\35\7\60\2\0\2\60\2\0\3\60\1\35"+
    "\10\0\1\60\4\0\2\35\1\0\3\35\2\60\2\0\12\61\2\35"+
    "\17\0\3\60\1\0\6\35\4\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\2\35\1\0\2\35\2\0\1\60\1\0\5\60"+
    "\4\0\2\60\2\0\3\60\3\0\1\60\7\0\4\35\1\0\1\35"+
    "\7\0\12\61\2\60\3\35\1\60\13\0\3\60\1\0\11\35\1\0"+
    "\3\35\1\0\26\35\1\0\7\35\1\0\2\35\1\0\5\35\2\0"+
    "\1\60\1\35\10\60\1\0\3\60\1\0\3\60\2\0\1\35\17\0"+
    "\2\35\2\60\2\0\12\61\21\0\3\60\1\0\10\35\2\0\2\35"+
    "\2\0\26\35\1\0\7\35\1\0\2\35\1\0\5\35\2\0\1\60"+
    "\1\35\7\60\2\0\2\60\2\0\3\60\10\0\2\60\4\0\2\35"+
    "\1\0\3\35\2\60\2\0\12\61\1\0\1\35\20\0\1\60\1\35"+
    "\1\0\6\35\3\0\3\35\1\0\4\35\3\0\2\35\1\0\1\35"+
    "\1\0\2\35\3\0\2\35\3\0\3\35\3\0\14\35\4\0\5\60"+
    "\3\0\3\60\1\0\4\60\2\0\1\35\6\0\1\60\16\0\12\61"+
    "\21\0\3\60\1\0\10\35\1\0\3\35\1\0\27\35\1\0\12\35"+
    "\1\0\5\35\3\0\1\35\7\60\1\0\3\60\1\0\4\60\7\0"+
    "\2\60\1\0\2\35\6\0\2\35\2\60\2\0\12\61\22\0\2\60"+
    "\1\0\10\35\1\0\3\35\1\0\27\35\1\0\12\35\1\0\5\35"+
    "\2\0\1\60\1\35\7\60\1\0\3\60\1\0\4\60\7\0\2\60"+
    "\7\0\1\35\1\0\2\35\2\60\2\0\12\61\1\0\2\35\17\0"+
    "\2\60\1\0\10\35\1\0\3\35\1\0\51\35\2\0\1\35\7\60"+
    "\1\0\3\60\1\0\4\60\1\35\10\0\1\60\10\0\2\35\2\60"+
    "\2\0\12\61\12\0\6\35\2\0\2\60\1\0\22\35\3\0\30\35"+
    "\1\0\11\35\1\0\1\35\2\0\7\35\3\0\1\60\4\0\6\60"+
    "\1\0\1\60\1\0\10\60\22\0\2\60\15\0\60\35\1\60\2\35"+
    "\7\60\5\0\7\35\10\60\1\0\12\61\47\0\2\35\1\0\1\35"+
    "\2\0\2\35\1\0\1\35\2\0\1\35\6\0\4\35\1\0\7\35"+
    "\1\0\3\35\1\0\1\35\1\0\1\35\2\0\2\35\1\0\4\35"+
    "\1\60\2\35\6\60\1\0\2\60\1\35\2\0\5\35\1\0\1\35"+
    "\1\0\6\60\2\0\12\61\2\0\4\35\40\0\1\35\12\0\2\60"+
    "\13\0\2\60\6\0\12\61\13\0\1\60\1\0\1\60\1\0\1\60"+
    "\4\0\2\60\10\35\1\0\44\35\4\0\24\60\1\0\2\60\5\35"+
    "\13\60\1\0\44\60\11\0\1\60\71\0\53\35\24\60\1\35\12\61"+
    "\6\0\6\35\4\60\4\35\3\60\1\35\3\60\2\35\7\60\3\35"+
    "\4\60\15\35\14\60\1\35\1\60\12\61\4\60\2\0\46\35\1\0"+
    "\1\35\5\0\1\35\2\0\53\35\1\0\u014d\35\1\0\4\35\2\0"+
    "\7\35\1\0\1\35\1\0\4\35\2\0\51\35\1\0\4\35\2\0"+
    "\41\35\1\0\4\35\2\0\7\35\1\0\1\35\1\0\4\35\2\0"+
    "\17\35\1\0\71\35\1\0\4\35\2\0\103\35\2\0\3\60\40\0"+
    "\20\35\20\0\125\35\14\0\u026c\35\2\0\21\35\1\73\32\35\5\0"+
    "\113\35\25\0\15\35\1\0\4\35\3\60\13\0\22\35\3\60\13\0"+
    "\22\35\2\60\14\0\15\35\1\0\3\35\1\0\2\60\14\0\64\35"+
    "\40\60\3\0\1\35\4\0\1\35\1\60\2\0\12\61\41\0\3\60"+
    "\2\0\12\61\6\0\130\35\10\0\51\35\1\60\1\35\5\0\106\35"+
    "\12\0\35\35\3\0\14\60\4\0\14\60\12\0\12\61\36\35\2\0"+
    "\5\35\13\0\54\35\4\0\21\60\7\35\2\60\6\0\12\61\46\0"+
    "\27\35\5\60\4\0\65\35\12\60\1\0\35\60\2\0\1\60\12\61"+
    "\6\0\12\61\15\0\1\35\130\0\5\60\57\35\21\60\7\35\4\0"+
    "\12\61\21\0\11\60\14\0\3\60\36\35\15\60\2\35\12\61\54\35"+
    "\16\60\14\0\44\35\24\60\10\0\12\61\3\0\3\35\12\61\44\35"+
    "\122\0\3\60\1\0\25\60\4\35\1\60\4\35\3\60\2\35\11\0"+
    "\300\35\47\60\25\0\4\60\u0116\35\2\0\6\35\2\0\46\35\2\0"+
    "\6\35\2\0\10\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\37\35\2\0\65\35\1\0\7\35\1\0\1\35\3\0\3\35\1\0"+
    "\7\35\3\0\4\35\2\0\6\35\4\0\15\35\5\0\3\35\1\0"+
    "\7\35\3\0\13\73\1\0\2\60\13\0\1\36\2\0\2\65\12\0"+
    "\1\104\1\104\5\0\1\73\57\0\1\73\21\0\1\35\15\0\1\35"+
    "\20\0\15\35\63\0\41\60\21\0\1\35\4\0\1\35\2\0\12\35"+
    "\1\0\1\35\3\0\5\35\6\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\4\35\1\0\13\35\2\0\4\35\5\0\5\35\4\0\1\35"+
    "\64\0\2\35\u04b5\0\1\54\52\0\1\42\246\0\1\54\127\0\1\42"+
    "\u049b\0\57\35\1\0\57\35\1\0\205\35\6\0\4\35\3\60\2\35"+
    "\14\0\46\35\1\0\1\35\5\0\1\35\2\0\70\35\7\0\1\35"+
    "\17\0\1\60\27\35\11\0\7\35\1\0\7\35\1\0\7\35\1\0"+
    "\7\35\1\0\7\35\1\0\7\35\1\0\7\35\1\0\7\35\1\0"+
    "\40\60\57\0\1\35\u01d0\0\1\73\2\0\1\60\1\0\2\35\25\0"+
    "\1\60\15\0\6\60\1\0\5\35\5\0\2\35\4\0\126\35\2\0"+
    "\2\60\2\60\3\35\1\60\132\35\1\60\4\35\5\0\51\35\3\0"+
    "\136\35\21\0\33\35\65\0\20\35\u0200\0\u19b6\35\112\0\u51cd\35\63\0"+
    "\u048d\35\103\0\56\35\2\0\u010d\35\3\0\20\35\12\61\2\35\24\0"+
    "\57\35\4\60\1\0\12\60\1\60\31\35\7\0\1\60\106\35\12\0"+
    "\2\60\45\0\11\35\2\0\147\35\2\0\4\35\1\0\4\35\14\0"+
    "\13\35\115\0\12\35\1\60\3\35\1\60\4\35\1\60\27\35\5\60"+
    "\30\0\64\35\14\0\2\60\62\35\21\60\13\0\12\61\6\0\22\60"+
    "\6\35\3\0\1\35\4\0\12\61\34\35\10\60\2\0\27\35\15\60"+
    "\14\0\35\35\3\0\4\60\57\35\16\60\16\0\1\35\12\61\46\0"+
    "\51\35\16\60\11\0\3\35\1\60\10\35\2\60\2\0\12\61\6\0"+
    "\27\35\3\0\1\35\1\60\4\0\60\35\1\60\1\35\3\60\2\35"+
    "\2\60\5\35\2\60\1\35\1\60\1\35\30\0\3\35\2\0\13\35"+
    "\5\60\2\0\3\35\2\60\12\0\6\35\2\0\6\35\2\0\6\35"+
    "\11\0\7\35\1\0\7\35\221\0\43\35\10\60\1\0\2\60\2\0"+
    "\12\61\6\0\u2ba4\35\14\0\27\35\4\0\61\35\u2104\0\u016e\35\2\0"+
    "\152\35\46\0\7\35\14\0\5\35\5\0\1\35\1\60\12\35\1\0"+
    "\15\35\1\0\5\35\1\0\1\35\1\0\2\35\1\0\2\35\1\0"+
    "\12\35\142\35\20\110\21\0\u016b\35\22\0\100\35\2\0\66\35\50\0"+
    "\14\35\1\110\3\0\20\60\20\0\7\60\111\0\5\35\1\0\207\35"+
    "\6\0\1\63\14\0\12\61\7\0\32\35\6\0\32\35\3\0\1\60"+
    "\7\0\131\35\3\0\6\35\2\0\6\35\2\0\6\35\2\0\3\35"+
    "\43\0\14\35\1\0\32\35\1\0\23\35\1\0\2\35\1\0\17\35"+
    "\2\0\16\35\42\0\173\35\u0102\0\1\60\202\0\35\35\3\0\61\35"+
    "\57\0\37\35\21\0\21\35\1\0\10\35\66\0\36\35\2\0\44\35"+
    "\4\0\10\35\60\0\236\35\2\0\12\61\u0356\0\6\35\2\0\1\35"+
    "\1\0\54\35\1\0\2\35\3\0\1\35\2\0\27\35\252\0\26\35"+
    "\12\0\32\35\106\0\70\35\6\0\2\35\100\0\1\35\3\60\1\0"+
    "\2\60\5\0\4\60\4\35\1\0\3\35\1\0\33\35\4\0\3\60"+
    "\4\0\1\60\40\0\35\35\203\0\66\35\12\0\26\35\12\0\23\35"+
    "\215\0\111\35\u0217\0\37\110\u0181\0\3\60\65\35\17\60\37\0\12\61"+
    "\20\0\3\60\55\35\13\60\25\0\31\35\7\0\12\61\6\0\3\60"+
    "\44\35\16\60\1\0\12\61\100\0\3\60\60\35\16\60\4\35\13\0"+
    "\12\61\u04a6\0\53\35\15\60\10\0\12\61\u0936\0\u036f\35\u0c91\0\u042f\35"+
    "\u33d1\0\u0239\35\u04c7\0\105\35\13\0\1\35\56\60\20\0\4\60\15\35"+
    "\u4060\0\2\35\u2163\0\5\60\3\0\6\60\10\0\10\60\2\0\7\60"+
    "\36\0\4\60\224\0\3\60\u01bb\0\125\35\1\0\107\35\1\0\2\35"+
    "\2\0\1\35\2\0\2\35\2\0\4\35\1\0\14\35\1\0\1\35"+
    "\1\0\7\35\1\0\101\35\1\0\4\35\2\0\10\35\1\0\7\35"+
    "\1\0\34\35\1\0\4\35\1\0\5\35\1\0\1\35\3\0\7\35"+
    "\1\0\u0154\35\2\0\31\35\1\0\31\35\1\0\37\35\1\0\31\35"+
    "\1\0\37\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0\37\35"+
    "\1\0\31\35\1\0\10\35\2\0\62\61\u1600\0\4\35\1\0\33\35"+
    "\1\0\2\35\1\0\1\35\2\0\1\35\1\0\12\35\1\0\4\35"+
    "\1\0\1\35\1\0\1\35\6\0\1\35\4\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\3\35\1\0\2\35\1\0\1\35\2\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0\2\35"+
    "\1\0\1\35\2\0\4\35\1\0\7\35\1\0\4\35\1\0\4\35"+
    "\1\0\1\35\1\0\12\35\1\0\21\35\5\0\3\35\1\0\5\35"+
    "\1\0\21\35\64\0\2\110\u0447\0\1\54\116\0\1\54\303\0\2\54"+
    "\1\0\1\54\73\0\1\54\1\42\2\0\5\42\1\55\13\42\2\0"+
    "\1\55\u015e\0\4\54\1\0\1\54\2\0\5\54\1\0\1\54\2\0"+
    "\1\55\5\0\1\54\3\0\2\54\1\55\1\0\2\55\7\0\1\55"+
    "\1\0\1\55\1\0\1\55\5\0\1\54\33\0\1\54\u09b0\0\ua6d7\35"+
    "\51\0\u1035\35\13\0\336\35\u3fe2\0\u021e\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\60\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\16\2\1\3\1\1\1\2\1\4\2\1"+
    "\2\3\1\2\1\5\1\6\1\7\1\10\1\2\1\1"+
    "\3\3\1\1\3\2\1\3\3\2\1\0\11\2\1\11"+
    "\13\2\1\4\1\0\1\5\1\0\2\6\1\0\1\3"+
    "\1\6\1\5\1\0\1\3\1\0\1\5\1\2\1\0"+
    "\2\5\1\2\1\12\1\0\1\3\1\5\1\6\1\12"+
    "\3\2\2\13\1\14\2\0\2\2\1\15\4\2\1\16"+
    "\11\2\1\17\10\2\2\20\1\2\1\21\2\2\1\22"+
    "\1\23\1\24\1\11\2\2\1\17\2\2\1\24\1\2"+
    "\2\0\1\2\1\25\1\26\1\23\2\0\1\27\2\0"+
    "\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456"+
    "\0\u04a0\0\u04ea\0\u0534\0\112\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\112\0\112\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818"+
    "\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68"+
    "\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\u0c6e\0\u0cb8"+
    "\0\u0d02\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08"+
    "\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u05c8\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e"+
    "\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae"+
    "\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u07ce\0\u1720\0\u176a\0\u17b4"+
    "\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u0a1e\0\u0ab2\0\u1970"+
    "\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0"+
    "\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10"+
    "\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060"+
    "\0\u20aa\0\u20f4\0\u213e\0\u2188\0\112\0\u21d2\0\u1b2c\0\u221c"+
    "\0\u2266\0\u22b0\0\u1ce8\0\u1d7c\0\u1e10\0\u22fa\0\u2344\0\u1f38"+
    "\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2266"+
    "\0\u2344\0\u23d8\0\u2594\0\u25de\0\u0172\0\u2628\0\u2672\0\u26bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\6\1\7\1\10\1\11"+
    "\1\6\1\12\2\6\1\13\1\14\1\6\1\15\2\6"+
    "\1\16\2\6\1\17\4\6\1\20\1\6\1\21\1\6"+
    "\1\22\1\23\1\24\1\25\1\26\1\2\1\5\1\21"+
    "\1\27\1\6\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\2\1\23\1\36\1\37\1\40\1\21\1\41\1\21"+
    "\1\42\1\43\2\2\1\44\2\6\1\45\1\41\1\21"+
    "\1\46\3\2\1\21\1\47\2\23\113\0\1\50\1\51"+
    "\7\6\1\52\23\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\6\5\0\2\23"+
    "\1\0\11\6\1\52\4\6\1\54\16\6\1\53\1\6"+
    "\1\0\1\23\4\0\1\6\1\53\1\0\1\6\1\0"+
    "\1\6\5\0\2\23\1\0\1\23\7\0\4\6\2\0"+
    "\1\6\5\0\2\23\1\0\2\6\1\5\1\55\5\6"+
    "\1\52\23\6\1\53\1\6\1\0\1\23\4\0\1\5"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\1\0"+
    "\11\6\1\52\23\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\6\5\0\2\23"+
    "\1\0\2\6\1\56\3\6\1\57\2\6\1\52\23\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\56\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\57\5\0\2\23\1\0\7\6\1\60"+
    "\1\61\1\52\23\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\6\5\0\2\23"+
    "\1\0\10\6\1\11\1\52\20\6\1\62\2\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\2\0\1\6\5\0\2\23\1\0\11\6\1\52\1\12"+
    "\1\63\21\6\1\53\1\6\1\0\1\23\4\0\1\6"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\1\0"+
    "\11\6\1\52\1\64\1\6\1\65\1\66\17\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\2\0\1\6\5\0\2\23\1\0\11\6\1\52\2\6"+
    "\1\67\1\6\1\70\1\71\15\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\11\6\1\52\1\72\5\6\1\73"+
    "\14\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\11\6\1\74\1\75\10\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\11\6\1\52\14\6\1\76\1\77"+
    "\5\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\3\6"+
    "\1\100\5\6\1\52\21\6\1\20\1\6\1\53\1\6"+
    "\1\0\1\23\4\0\1\6\1\53\1\0\1\6\1\0"+
    "\1\6\5\0\2\23\1\0\1\23\7\0\4\6\2\0"+
    "\1\6\5\0\2\23\36\0\1\21\10\0\2\21\1\0"+
    "\1\21\11\0\5\21\7\0\2\21\4\0\2\21\43\0"+
    "\1\101\2\0\1\102\15\0\1\102\3\0\1\102\11\0"+
    "\1\102\12\0\35\23\1\0\1\23\1\0\1\23\4\0"+
    "\1\23\2\0\1\23\1\0\1\23\5\0\2\23\1\0"+
    "\1\23\7\0\4\23\2\0\1\23\5\0\2\23\44\0"+
    "\1\102\15\0\1\102\3\0\1\102\11\0\1\102\21\0"+
    "\1\103\34\0\3\104\2\103\1\105\1\103\13\0\1\104"+
    "\60\0\1\21\5\0\1\106\2\107\1\110\1\27\1\0"+
    "\1\21\7\0\1\106\1\0\2\21\1\111\1\110\1\21"+
    "\7\0\1\111\1\21\4\0\2\21\40\0\1\21\5\0"+
    "\1\112\2\113\1\114\1\21\1\0\1\30\1\115\6\0"+
    "\1\112\1\0\2\21\1\116\1\114\1\21\7\0\1\116"+
    "\1\21\4\0\2\21\3\0\11\6\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\2\0\1\112\1\113\1\117\1\120"+
    "\1\0\1\6\1\115\1\31\5\0\1\23\1\121\1\0"+
    "\1\23\1\0\1\112\1\113\4\0\4\6\1\112\1\0"+
    "\1\6\5\0\2\23\56\0\1\34\112\0\1\35\33\0"+
    "\7\23\1\122\25\23\1\0\1\23\1\0\1\23\3\0"+
    "\1\104\1\123\1\104\1\103\1\122\1\105\1\122\5\0"+
    "\2\23\1\0\1\23\2\0\1\104\4\0\4\23\2\0"+
    "\1\23\5\0\2\23\1\0\35\124\1\0\1\124\1\0"+
    "\1\125\4\0\1\124\2\0\1\124\1\0\1\124\4\0"+
    "\1\124\2\125\1\0\1\124\7\0\4\124\2\0\1\124"+
    "\6\0\1\124\1\0\35\23\1\21\1\23\1\0\1\23"+
    "\4\0\1\23\2\21\1\23\1\21\1\23\5\0\2\23"+
    "\1\0\1\40\4\21\3\0\4\23\2\21\1\23\3\0"+
    "\2\21\2\23\10\0\1\103\25\0\1\21\6\0\2\104"+
    "\1\126\1\127\1\103\1\130\1\103\10\0\3\21\1\126"+
    "\1\21\7\0\2\21\4\0\2\21\3\0\35\124\1\21"+
    "\1\124\1\0\1\125\4\0\1\124\2\21\1\124\1\21"+
    "\1\124\4\0\1\124\2\125\1\0\1\131\4\21\3\0"+
    "\4\124\2\21\1\124\3\0\2\21\1\0\1\124\72\0"+
    "\1\2\20\0\11\6\1\52\23\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\1\6\1\132\2\6"+
    "\2\0\1\6\5\0\2\23\1\0\11\6\1\52\23\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\1\6\1\133\2\6\2\0\1\6\5\0\2\23\1\0"+
    "\2\6\1\56\3\6\1\57\2\6\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\56\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\2\0\1\134\5\0\2\23\1\0\35\135\1\21\1\135"+
    "\1\0\1\135\4\0\1\135\2\21\1\135\1\21\1\135"+
    "\5\0\2\135\1\0\1\136\4\21\3\0\4\135\2\21"+
    "\1\135\3\0\2\21\3\0\1\50\1\137\7\6\1\52"+
    "\23\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\1\6"+
    "\1\137\7\6\1\52\23\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\23\6\1\140\1\6\1\0"+
    "\1\23\4\0\1\6\1\140\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\12\0\1\141\100\0\11\6\1\52\4\6"+
    "\1\142\16\6\1\53\1\6\1\0\1\23\4\0\1\6"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\1\0"+
    "\3\6\1\55\1\143\1\144\3\6\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\3\6"+
    "\1\143\2\0\1\6\5\0\2\23\1\0\2\6\1\145"+
    "\3\6\1\146\2\6\1\52\23\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\145\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\146"+
    "\5\0\2\23\1\0\2\6\1\145\3\6\1\57\2\6"+
    "\1\52\23\6\1\53\1\6\1\0\1\23\4\0\1\145"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\57\5\0\2\23\1\0"+
    "\7\6\1\60\1\147\1\52\23\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\3\6\1\150\4\6\1\147\1\52"+
    "\23\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\5\6"+
    "\1\151\3\6\1\52\16\6\1\151\1\6\1\62\2\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\1\151\3\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\1\6\1\63\1\152\20\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\11\6\1\52\1\153\16\6\1\154"+
    "\3\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\2\6\1\65\20\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\1\153\1\6\1\65\1\66"+
    "\17\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\2\6\1\155\1\6\1\156\16\6\1\53\1\6"+
    "\1\0\1\23\4\0\1\6\1\53\1\0\1\6\1\0"+
    "\1\6\5\0\2\23\1\0\1\23\7\0\4\6\2\0"+
    "\1\6\5\0\2\23\1\0\11\6\1\52\2\6\1\155"+
    "\1\6\1\70\1\157\15\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\5\6\1\157\1\160\14\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\6\5\0\2\23\1\0\11\6\1\52"+
    "\1\161\4\6\1\162\15\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\1\161\5\6\1\73\14\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\6\5\0\2\23\1\0\11\6\1\52"+
    "\11\6\1\74\1\163\10\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\12\6\1\163\1\164\7\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\6\5\0\2\23\1\0\11\6\1\52"+
    "\14\6\1\76\1\165\5\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\10\6\1\166\1\52\15\6\1\165\5\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\6\5\0\2\23\1\0\3\6\1\100"+
    "\1\167\3\6\1\170\1\52\23\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\3\6\1\167\2\0"+
    "\1\6\5\0\2\23\41\0\1\101\60\0\1\103\37\0"+
    "\2\103\1\0\1\103\46\0\1\103\37\0\2\103\1\105"+
    "\1\103\110\0\1\105\77\0\1\33\2\0\1\33\112\0"+
    "\1\106\15\0\1\106\3\0\1\106\11\0\1\106\47\0"+
    "\1\21\5\0\1\106\2\0\2\21\1\0\1\21\7\0"+
    "\1\106\1\0\2\21\1\111\2\21\7\0\1\111\1\21"+
    "\4\0\2\21\40\0\1\21\1\0\1\33\2\0\1\33"+
    "\3\0\2\21\1\0\1\21\11\0\5\21\7\0\2\21"+
    "\4\0\2\21\42\0\1\32\2\0\1\32\112\0\1\112"+
    "\15\0\1\112\3\0\1\112\11\0\1\112\47\0\1\21"+
    "\5\0\1\112\2\0\2\21\1\0\1\21\7\0\1\112"+
    "\1\0\2\21\1\116\2\21\7\0\1\116\1\21\4\0"+
    "\2\21\46\0\1\112\3\113\2\0\2\115\6\0\1\112"+
    "\3\0\1\112\1\113\10\0\1\112\47\0\1\21\1\0"+
    "\1\32\2\0\1\32\3\0\2\21\1\0\1\21\11\0"+
    "\5\21\7\0\2\21\4\0\2\21\3\0\11\6\1\52"+
    "\23\6\1\53\1\6\1\0\1\23\2\0\1\112\1\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\1\23"+
    "\1\121\1\0\1\23\1\0\1\112\5\0\4\6\1\112"+
    "\1\0\1\6\5\0\2\23\12\0\1\141\31\0\1\112"+
    "\15\0\1\112\3\0\1\112\11\0\1\112\12\0\35\23"+
    "\1\0\1\23\1\32\1\23\1\0\1\32\2\0\1\23"+
    "\2\0\1\23\1\0\1\23\5\0\2\23\1\0\1\23"+
    "\7\0\4\23\2\0\1\23\5\0\2\23\1\0\7\23"+
    "\1\122\25\23\1\0\1\23\1\0\1\23\4\0\1\23"+
    "\1\0\1\103\1\122\1\0\1\122\5\0\2\23\1\0"+
    "\1\23\7\0\4\23\2\0\1\23\5\0\2\23\1\0"+
    "\7\23\1\122\25\23\1\0\1\23\1\0\1\23\4\0"+
    "\1\23\1\0\1\103\1\122\1\105\1\122\5\0\2\23"+
    "\1\0\1\23\7\0\4\23\2\0\1\23\5\0\2\23"+
    "\1\0\35\124\1\0\1\124\1\0\1\124\4\0\1\124"+
    "\2\0\1\124\1\0\1\124\4\0\3\124\1\0\1\124"+
    "\7\0\4\124\2\0\1\124\6\0\1\124\10\0\1\103"+
    "\25\0\1\21\10\0\1\21\1\127\1\103\1\130\1\103"+
    "\10\0\5\21\7\0\2\21\4\0\2\21\12\0\1\103"+
    "\25\0\1\21\10\0\1\21\1\127\1\103\1\21\1\103"+
    "\10\0\5\21\7\0\2\21\4\0\2\21\40\0\1\21"+
    "\10\0\2\21\1\0\1\130\11\0\5\21\7\0\2\21"+
    "\4\0\2\21\3\0\35\124\1\21\1\124\1\0\1\124"+
    "\4\0\1\124\2\21\1\124\1\21\1\124\4\0\3\124"+
    "\1\0\1\131\4\21\3\0\4\124\2\21\1\124\3\0"+
    "\2\21\1\0\1\124\1\0\11\6\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\1\6"+
    "\1\171\2\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\23\6\1\53\1\6\1\0\1\23\4\0\1\6"+
    "\1\53\1\0\1\172\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\1\0"+
    "\2\6\1\145\3\6\1\57\2\6\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\145\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\2\0\1\173\5\0\2\23\1\0\35\135\1\0\1\135"+
    "\1\0\1\135\4\0\1\135\2\0\1\135\1\0\1\135"+
    "\5\0\2\135\1\0\1\135\7\0\4\135\2\0\1\135"+
    "\21\0\1\141\24\0\1\174\35\0\1\174\26\0\1\141"+
    "\24\0\1\175\35\0\1\175\15\0\11\6\1\52\1\176"+
    "\3\6\1\142\16\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\6\5\0\2\23"+
    "\1\0\4\6\1\143\1\144\3\6\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\3\6"+
    "\1\143\2\0\1\6\5\0\2\23\1\0\5\6\1\144"+
    "\3\6\1\52\23\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\6\5\0\2\23"+
    "\1\0\2\6\1\145\3\6\1\177\2\6\1\52\23\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\145\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\177\5\0\2\23\1\0\6\6\1\177"+
    "\2\6\1\52\23\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\177\5\0\2\23"+
    "\1\0\3\6\1\200\4\6\1\147\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\2\0\1\6\5\0\2\23\1\0\3\6\1\200\5\6"+
    "\1\201\23\6\1\53\1\6\1\0\1\23\4\0\1\6"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\1\0"+
    "\5\6\1\151\3\6\1\52\16\6\1\151\4\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\1\151"+
    "\3\6\2\0\1\6\5\0\2\23\1\0\1\6\1\202"+
    "\7\6\1\52\2\6\1\152\20\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\11\6\1\52\1\153\16\6\1\203"+
    "\3\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\17\6\1\203\3\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\2\6\1\155\1\6\1\204"+
    "\16\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\4\6\1\204\16\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\5\6\1\157\1\205\14\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\6\5\0\2\23\1\0\11\6\1\52"+
    "\6\6\1\205\14\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\6\5\0\2\23"+
    "\1\0\11\6\1\52\1\161\4\6\1\206\15\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\2\0\1\6\5\0\2\23\1\0\11\6\1\52\5\6"+
    "\1\206\2\6\1\207\12\6\1\53\1\6\1\0\1\23"+
    "\4\0\1\6\1\53\1\0\1\6\1\0\1\6\5\0"+
    "\2\23\1\0\1\23\7\0\4\6\2\0\1\6\5\0"+
    "\2\23\1\0\11\6\1\52\12\6\1\163\1\210\7\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\4\6\2\0\1\6\5\0\2\23\1\0\11\6\1\52"+
    "\13\6\1\210\7\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\4\6\2\0\1\6\5\0\2\23"+
    "\1\0\10\6\1\211\1\52\15\6\1\165\5\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\2\0\1\6\5\0\2\23\1\0\10\6\1\211\1\52"+
    "\16\6\1\212\4\6\1\53\1\6\1\0\1\23\4\0"+
    "\1\6\1\53\1\0\1\6\1\0\1\6\5\0\2\23"+
    "\1\0\1\23\7\0\1\212\3\6\2\0\1\6\5\0"+
    "\2\23\1\0\4\6\1\167\3\6\1\170\1\52\23\6"+
    "\1\53\1\6\1\0\1\23\4\0\1\6\1\53\1\0"+
    "\1\6\1\0\1\6\5\0\2\23\1\0\1\23\7\0"+
    "\3\6\1\167\2\0\1\6\5\0\2\23\1\0\2\6"+
    "\1\213\5\6\1\170\1\52\23\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\213\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\11\6\1\52\23\6\1\53\1\6"+
    "\1\0\1\23\4\0\1\6\1\53\1\0\1\214\1\0"+
    "\1\6\5\0\2\23\1\0\1\23\7\0\4\6\2\0"+
    "\1\6\5\0\2\23\1\0\11\6\1\52\23\6\1\53"+
    "\1\6\1\0\1\23\4\0\1\6\1\53\1\0\1\6"+
    "\1\0\1\6\5\0\2\23\1\0\1\23\7\0\4\6"+
    "\1\215\1\0\1\6\5\0\2\23\1\0\2\6\1\145"+
    "\3\6\1\57\2\6\1\52\23\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\145\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\57"+
    "\1\216\4\0\2\23\37\0\1\174\35\0\1\174\15\0"+
    "\11\6\1\52\1\176\2\6\1\217\17\6\1\53\1\6"+
    "\1\0\1\23\4\0\1\6\1\53\1\0\1\6\1\0"+
    "\1\6\5\0\2\23\1\0\1\23\7\0\4\6\2\0"+
    "\1\6\5\0\2\23\1\0\3\6\1\200\5\6\1\220"+
    "\23\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\220\23\6\1\140\1\6\1\0\1\23\4\0\1\6"+
    "\1\140\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\1\0"+
    "\1\6\1\202\7\6\1\52\23\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\11\6\1\52\5\6\1\206\2\6"+
    "\1\221\12\6\1\53\1\6\1\0\1\23\4\0\1\6"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\1\0"+
    "\11\6\1\52\10\6\1\221\12\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\4\6\2\0\1\6"+
    "\5\0\2\23\1\0\10\6\1\211\1\52\16\6\1\222"+
    "\4\6\1\53\1\6\1\0\1\23\4\0\1\6\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\1\222\3\6\2\0\1\6\5\0\2\23\1\0"+
    "\11\6\1\52\16\6\1\222\4\6\1\53\1\6\1\0"+
    "\1\23\4\0\1\6\1\53\1\0\1\6\1\0\1\6"+
    "\5\0\2\23\1\0\1\23\7\0\1\222\3\6\2\0"+
    "\1\6\5\0\2\23\1\0\2\6\1\213\6\6\1\52"+
    "\23\6\1\53\1\6\1\0\1\23\4\0\1\213\1\53"+
    "\1\0\1\6\1\0\1\6\5\0\2\23\1\0\1\23"+
    "\7\0\4\6\2\0\1\6\5\0\2\23\1\0\11\6"+
    "\1\52\23\6\1\53\1\6\1\0\1\23\4\0\1\6"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\2\6\1\172\1\6\1\215\1\0\1\6"+
    "\5\0\2\23\101\0\1\223\10\0\71\224\2\0\11\224"+
    "\1\0\5\224\1\0\11\6\1\52\3\6\1\217\3\6"+
    "\1\225\13\6\1\53\1\6\1\0\1\23\4\0\1\6"+
    "\1\53\1\0\1\6\1\0\1\6\5\0\2\23\1\0"+
    "\1\23\7\0\4\6\2\0\1\6\5\0\2\23\57\226"+
    "\1\0\10\226\4\0\5\226\1\227\2\226\3\0\62\226"+
    "\1\0\10\226\4\0\5\226\1\0\2\226\3\0\3\226"+
    "\71\230\2\0\11\230\1\0\5\230\57\226\1\0\10\226"+
    "\4\0\5\226\1\224\2\226\3\0\3\226\71\230\3\0"+
    "\10\230\1\0\5\230";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9990];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\5\1\2\11\17\1\1\0"+
    "\26\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\4\1\1\0\12\1\2\0"+
    "\33\1\1\11\17\1\2\0\4\1\2\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzArabicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3024) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 25: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 26: break;
          case 3: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 27: break;
          case 4: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 28: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 29: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 30: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 31: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 32: break;
          case 9: 
            { return JflexBuzzTokenizer.NO;
            }
          case 33: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 34: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 35: break;
          case 12: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 36: break;
          case 13: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 37: break;
          case 14: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 38: break;
          case 15: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 39: break;
          case 16: 
            { return JflexBuzzTokenizer.APOSTROPHE_NT;
            }
          case 40: break;
          case 17: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 41: break;
          case 18: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 42: break;
          case 19: 
            { return JflexBuzzTokenizer.YES;
            }
          case 43: break;
          case 20: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 44: break;
          case 21: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 45: break;
          case 22: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 46: break;
          case 23: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 47: break;
          case 24: 
            { return JflexBuzzTokenizer.URL;
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

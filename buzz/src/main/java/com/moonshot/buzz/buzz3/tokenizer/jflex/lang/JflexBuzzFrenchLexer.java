/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzFrenchLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\56\1\70\1\70\1\55\22\0\1\57\1\43\1\74"+
    "\1\53\1\71\2\74\1\34\1\37\1\36\1\34\2\74\1\75\1\72"+
    "\1\65\3\46\1\30\4\46\1\47\1\46\1\64\1\33\1\27\1\52"+
    "\1\32\1\44\1\73\1\2\1\25\1\20\1\10\1\54\1\5\1\6"+
    "\1\1\1\23\1\54\1\17\1\14\1\4\1\11\1\3\1\40\1\54"+
    "\1\15\1\13\1\16\1\21\1\54\1\7\1\54\1\22\1\26\1\37"+
    "\1\67\1\36\1\74\1\51\1\0\1\2\1\25\1\20\1\10\1\54"+
    "\1\63\1\6\1\60\1\23\1\54\1\17\1\14\1\4\1\11\1\35"+
    "\1\12\1\54\1\15\1\62\1\61\1\21\1\54\1\66\1\54\1\22"+
    "\1\26\1\0\1\74\1\0\1\74\6\0\1\70\32\0\1\57\11\0"+
    "\1\54\11\0\1\0\1\54\1\0\1\45\2\0\1\54\5\0\11\54"+
    "\1\24\15\54\1\0\21\54\1\24\15\54\1\0\u01ca\54\4\0\14\54"+
    "\16\0\5\54\7\0\1\54\1\0\1\54\21\0\160\45\5\54\1\0"+
    "\2\54\2\0\4\54\10\0\1\54\1\0\3\54\1\0\1\54\1\0"+
    "\24\54\1\0\123\54\1\0\213\54\1\0\7\45\236\54\11\0\46\54"+
    "\2\0\1\54\7\0\47\54\11\0\55\45\1\45\1\45\1\0\2\45"+
    "\1\0\2\45\1\0\1\45\10\0\33\54\5\0\3\54\2\45\33\0"+
    "\13\45\5\0\53\54\25\45\12\46\4\0\2\54\1\45\143\54\1\0"+
    "\1\54\7\45\2\0\6\45\2\54\2\45\1\0\4\45\2\54\12\46"+
    "\3\54\2\0\1\54\20\0\1\54\1\45\36\54\33\45\2\0\131\54"+
    "\13\45\1\54\16\0\12\46\41\54\11\45\2\54\4\0\1\54\5\0"+
    "\26\54\4\45\1\54\11\45\1\54\3\45\1\54\5\45\22\0\31\54"+
    "\3\45\104\0\1\54\1\0\13\54\67\0\33\45\1\0\4\45\66\54"+
    "\3\45\1\54\22\45\1\54\7\45\12\54\2\45\2\0\12\46\1\0"+
    "\7\54\1\0\7\54\1\0\3\45\1\0\10\54\2\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\1\54\3\0\4\54\2\0\1\45\1\54"+
    "\7\45\2\0\2\45\2\0\3\45\1\54\10\0\1\45\4\0\2\54"+
    "\1\0\3\54\2\45\2\0\12\46\2\54\17\0\3\45\1\0\6\54"+
    "\4\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54\1\0\2\54"+
    "\1\0\2\54\2\0\1\45\1\0\5\45\4\0\2\45\2\0\3\45"+
    "\3\0\1\45\7\0\4\54\1\0\1\54\7\0\12\46\2\45\3\54"+
    "\1\45\13\0\3\45\1\0\11\54\1\0\3\54\1\0\26\54\1\0"+
    "\7\54\1\0\2\54\1\0\5\54\2\0\1\45\1\54\10\45\1\0"+
    "\3\45\1\0\3\45\2\0\1\54\17\0\2\54\2\45\2\0\12\46"+
    "\21\0\3\45\1\0\10\54\2\0\2\54\2\0\26\54\1\0\7\54"+
    "\1\0\2\54\1\0\5\54\2\0\1\45\1\54\7\45\2\0\2\45"+
    "\2\0\3\45\10\0\2\45\4\0\2\54\1\0\3\54\2\45\2\0"+
    "\12\46\1\0\1\54\20\0\1\45\1\54\1\0\6\54\3\0\3\54"+
    "\1\0\4\54\3\0\2\54\1\0\1\54\1\0\2\54\3\0\2\54"+
    "\3\0\3\54\3\0\14\54\4\0\5\45\3\0\3\45\1\0\4\45"+
    "\2\0\1\54\6\0\1\45\16\0\12\46\21\0\3\45\1\0\10\54"+
    "\1\0\3\54\1\0\27\54\1\0\12\54\1\0\5\54\3\0\1\54"+
    "\7\45\1\0\3\45\1\0\4\45\7\0\2\45\1\0\2\54\6\0"+
    "\2\54\2\45\2\0\12\46\22\0\2\45\1\0\10\54\1\0\3\54"+
    "\1\0\27\54\1\0\12\54\1\0\5\54\2\0\1\45\1\54\7\45"+
    "\1\0\3\45\1\0\4\45\7\0\2\45\7\0\1\54\1\0\2\54"+
    "\2\45\2\0\12\46\1\0\2\54\17\0\2\45\1\0\10\54\1\0"+
    "\3\54\1\0\51\54\2\0\1\54\7\45\1\0\3\45\1\0\4\45"+
    "\1\54\10\0\1\45\10\0\2\54\2\45\2\0\12\46\12\0\6\54"+
    "\2\0\2\45\1\0\22\54\3\0\30\54\1\0\11\54\1\0\1\54"+
    "\2\0\7\54\3\0\1\45\4\0\6\45\1\0\1\45\1\0\10\45"+
    "\22\0\2\45\15\0\60\54\1\45\2\54\7\45\5\0\7\54\10\45"+
    "\1\0\12\46\47\0\2\54\1\0\1\54\2\0\2\54\1\0\1\54"+
    "\2\0\1\54\6\0\4\54\1\0\7\54\1\0\3\54\1\0\1\54"+
    "\1\0\1\54\2\0\2\54\1\0\4\54\1\45\2\54\6\45\1\0"+
    "\2\45\1\54\2\0\5\54\1\0\1\54\1\0\6\45\2\0\12\46"+
    "\2\0\4\54\40\0\1\54\12\0\2\45\13\0\2\45\6\0\12\46"+
    "\13\0\1\45\1\0\1\45\1\0\1\45\4\0\2\45\10\54\1\0"+
    "\44\54\4\0\24\45\1\0\2\45\5\54\13\45\1\0\44\45\11\0"+
    "\1\45\71\0\53\54\24\45\1\54\12\46\6\0\6\54\4\45\4\54"+
    "\3\45\1\54\3\45\2\54\7\45\3\54\4\45\15\54\14\45\1\54"+
    "\1\45\12\46\4\45\2\0\46\54\1\0\1\54\5\0\1\54\2\0"+
    "\53\54\1\0\u014d\54\1\0\4\54\2\0\7\54\1\0\1\54\1\0"+
    "\4\54\2\0\51\54\1\0\4\54\2\0\41\54\1\0\4\54\2\0"+
    "\7\54\1\0\1\54\1\0\4\54\2\0\17\54\1\0\71\54\1\0"+
    "\4\54\2\0\103\54\2\0\3\45\40\0\20\54\20\0\125\54\14\0"+
    "\u026c\54\2\0\21\54\1\57\32\54\5\0\113\54\25\0\15\54\1\0"+
    "\4\54\3\45\13\0\22\54\3\45\13\0\22\54\2\45\14\0\15\54"+
    "\1\0\3\54\1\0\2\45\14\0\64\54\40\45\3\0\1\54\4\0"+
    "\1\54\1\45\2\0\12\46\41\0\3\45\2\0\12\46\6\0\130\54"+
    "\10\0\51\54\1\45\1\54\5\0\106\54\12\0\35\54\3\0\14\45"+
    "\4\0\14\45\12\0\12\46\36\54\2\0\5\54\13\0\54\54\4\0"+
    "\21\45\7\54\2\45\6\0\12\46\46\0\27\54\5\45\4\0\65\54"+
    "\12\45\1\0\35\45\2\0\1\45\12\46\6\0\12\46\15\0\1\54"+
    "\130\0\5\45\57\54\21\45\7\54\4\0\12\46\21\0\11\45\14\0"+
    "\3\45\36\54\15\45\2\54\12\46\54\54\16\45\14\0\44\54\24\45"+
    "\10\0\12\46\3\0\3\54\12\46\44\54\122\0\3\45\1\0\25\45"+
    "\4\54\1\45\4\54\3\45\2\54\11\0\300\54\47\45\25\0\4\45"+
    "\u0116\54\2\0\6\54\2\0\46\54\2\0\6\54\2\0\10\54\1\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\37\54\2\0\65\54\1\0"+
    "\7\54\1\0\1\54\3\0\3\54\1\0\7\54\3\0\4\54\2\0"+
    "\6\54\4\0\15\54\5\0\3\54\1\0\7\54\3\0\13\57\1\0"+
    "\2\45\13\0\1\0\2\0\2\74\12\0\1\70\1\70\5\0\1\57"+
    "\57\0\1\57\21\0\1\54\15\0\1\54\20\0\15\54\63\0\41\45"+
    "\21\0\1\54\4\0\1\54\2\0\12\54\1\0\1\54\3\0\5\54"+
    "\6\0\1\54\1\0\1\54\1\0\1\54\1\0\4\54\1\0\13\54"+
    "\2\0\4\54\5\0\5\54\4\0\1\54\64\0\2\54\u04b5\0\1\41"+
    "\52\0\1\31\246\0\1\41\127\0\1\31\u049b\0\57\54\1\0\57\54"+
    "\1\0\205\54\6\0\4\54\3\45\2\54\14\0\46\54\1\0\1\54"+
    "\5\0\1\54\2\0\70\54\7\0\1\54\17\0\1\45\27\54\11\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\40\45\57\0\1\54\u01d0\0"+
    "\1\57\2\0\1\45\1\0\2\54\25\0\1\45\15\0\6\45\1\0"+
    "\5\54\5\0\2\54\4\0\126\54\2\0\2\45\2\45\3\54\1\45"+
    "\132\54\1\45\4\54\5\0\51\54\3\0\136\54\21\0\33\54\65\0"+
    "\20\54\u0200\0\u19b6\54\112\0\u51cd\54\63\0\u048d\54\103\0\56\54\2\0"+
    "\u010d\54\3\0\20\54\12\46\2\54\24\0\57\54\4\45\1\0\12\45"+
    "\1\45\31\54\7\0\1\45\106\54\12\0\2\45\45\0\11\54\2\0"+
    "\147\54\2\0\4\54\1\0\4\54\14\0\13\54\115\0\12\54\1\45"+
    "\3\54\1\45\4\54\1\45\27\54\5\45\30\0\64\54\14\0\2\45"+
    "\62\54\21\45\13\0\12\46\6\0\22\45\6\54\3\0\1\54\4\0"+
    "\12\46\34\54\10\45\2\0\27\54\15\45\14\0\35\54\3\0\4\45"+
    "\57\54\16\45\16\0\1\54\12\46\46\0\51\54\16\45\11\0\3\54"+
    "\1\45\10\54\2\45\2\0\12\46\6\0\27\54\3\0\1\54\1\45"+
    "\4\0\60\54\1\45\1\54\3\45\2\54\2\45\5\54\2\45\1\54"+
    "\1\45\1\54\30\0\3\54\2\0\13\54\5\45\2\0\3\54\2\45"+
    "\12\0\6\54\2\0\6\54\2\0\6\54\11\0\7\54\1\0\7\54"+
    "\221\0\43\54\10\45\1\0\2\45\2\0\12\46\6\0\u2ba4\54\14\0"+
    "\27\54\4\0\61\54\u2104\0\u016e\54\2\0\152\54\46\0\7\54\14\0"+
    "\5\54\5\0\1\54\1\45\12\54\1\0\15\54\1\0\5\54\1\0"+
    "\1\54\1\0\2\54\1\0\2\54\1\0\154\54\41\0\u016b\54\22\0"+
    "\100\54\2\0\66\54\50\0\14\54\4\0\20\45\20\0\7\45\111\0"+
    "\5\54\1\0\207\54\6\0\1\50\14\0\12\46\7\0\32\54\6\0"+
    "\32\54\3\0\1\45\7\0\131\54\3\0\6\54\2\0\6\54\2\0"+
    "\6\54\2\0\3\54\43\0\14\54\1\0\32\54\1\0\23\54\1\0"+
    "\2\54\1\0\17\54\2\0\16\54\42\0\173\54\u0102\0\1\45\202\0"+
    "\35\54\3\0\61\54\57\0\37\54\21\0\21\54\1\0\10\54\66\0"+
    "\36\54\2\0\44\54\4\0\10\54\60\0\236\54\2\0\12\46\u0356\0"+
    "\6\54\2\0\1\54\1\0\54\54\1\0\2\54\3\0\1\54\2\0"+
    "\27\54\252\0\26\54\12\0\32\54\106\0\70\54\6\0\2\54\100\0"+
    "\1\54\3\45\1\0\2\45\5\0\4\45\4\54\1\0\3\54\1\0"+
    "\33\54\4\0\3\45\4\0\1\45\40\0\35\54\203\0\66\54\12\0"+
    "\26\54\12\0\23\54\215\0\111\54\u03b7\0\3\45\65\54\17\45\37\0"+
    "\12\46\20\0\3\45\55\54\13\45\25\0\31\54\7\0\12\46\6\0"+
    "\3\45\44\54\16\45\1\0\12\46\100\0\3\45\60\54\16\45\4\54"+
    "\13\0\12\46\u04a6\0\53\54\15\45\10\0\12\46\u0936\0\u036f\54\u0c91\0"+
    "\u042f\54\u33d1\0\u0239\54\u04c7\0\105\54\13\0\1\54\56\45\20\0\4\45"+
    "\15\54\u4060\0\2\54\u2163\0\5\45\3\0\6\45\10\0\10\45\2\0"+
    "\7\45\36\0\4\45\224\0\3\45\u01bb\0\125\54\1\0\107\54\1\0"+
    "\2\54\2\0\1\54\2\0\2\54\2\0\4\54\1\0\14\54\1\0"+
    "\1\54\1\0\7\54\1\0\101\54\1\0\4\54\2\0\10\54\1\0"+
    "\7\54\1\0\34\54\1\0\4\54\1\0\5\54\1\0\1\54\3\0"+
    "\7\54\1\0\u0154\54\2\0\31\54\1\0\31\54\1\0\37\54\1\0"+
    "\31\54\1\0\37\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0"+
    "\37\54\1\0\31\54\1\0\10\54\2\0\62\46\u1600\0\4\54\1\0"+
    "\33\54\1\0\2\54\1\0\1\54\2\0\1\54\1\0\12\54\1\0"+
    "\4\54\1\0\1\54\1\0\1\54\6\0\1\54\4\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\3\54\1\0\2\54\1\0\1\54\2\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54\1\0"+
    "\2\54\1\0\1\54\2\0\4\54\1\0\7\54\1\0\4\54\1\0"+
    "\4\54\1\0\1\54\1\0\12\54\1\0\21\54\5\0\3\54\1\0"+
    "\5\54\1\0\21\54\u047d\0\1\41\116\0\1\41\303\0\2\41\1\0"+
    "\1\41\73\0\1\41\1\31\2\0\5\31\1\42\13\31\2\0\1\42"+
    "\u015e\0\4\41\1\0\1\41\2\0\5\41\1\0\1\41\2\0\1\42"+
    "\5\0\1\41\3\0\2\41\1\42\1\0\2\42\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\5\0\1\41\33\0\1\41\u09b0\0\ua6d7\54\51\0"+
    "\u1035\54\13\0\336\54\u3fe2\0\u021e\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\45\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\15\2\1\1\1\3\2\1\2\4\1\2"+
    "\1\5\1\6\1\7\1\10\1\2\1\1\3\4\1\1"+
    "\2\2\1\4\1\2\1\4\1\2\1\11\27\2\1\3"+
    "\1\0\1\5\1\0\2\6\1\0\1\6\1\4\1\5"+
    "\2\0\1\5\1\4\1\2\2\5\1\2\1\12\1\0"+
    "\1\5\1\6\1\4\1\12\3\2\2\13\1\2\2\11"+
    "\4\2\1\14\3\2\1\15\1\2\1\16\6\2\1\17"+
    "\4\2\1\20\5\2\1\21\2\2\1\22\1\23\2\2"+
    "\1\24\2\2\2\16\1\2\2\0\2\2\1\25\2\2"+
    "\1\26\1\27\2\0\1\30\1\25\2\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\76\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\76\0\76"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u041e"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u05d0\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u07fe\0\u1496\0\u08f6\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u0c5a"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1702\0\u1c56"+
    "\0\u1c94\0\u1838\0\u1cd2\0\u1d10\0\u1930\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1c94\0\u1d10"+
    "\0\u1f7c\0\u1fba\0\u1e84\0\u1f00\0\u1ff8\0\u2036\0\u2074";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\10\1\15\2\10\1\16\5\10"+
    "\1\17\1\10\1\20\1\10\1\21\1\22\1\23\1\2"+
    "\1\5\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\2\1\10\1\33\1\34\1\35\1\36\1\37\1\10"+
    "\1\40\2\2\1\41\2\10\1\42\1\36\1\43\1\44"+
    "\3\2\1\43\1\45\2\43\77\0\1\46\1\47\21\10"+
    "\1\50\2\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\1\46"+
    "\3\10\2\0\1\10\10\0\1\51\1\52\1\10\1\53"+
    "\10\10\1\54\11\10\1\0\1\10\4\0\1\10\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\1\51\3\10\2\0\1\10\10\0\2\10\1\55\1\56"+
    "\14\10\1\57\5\10\1\0\1\10\4\0\1\55\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\3\10\1\6\3\10\1\60"+
    "\16\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\10\10\0\4\10\1\61\13\10\1\62\5\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\3\10\1\61\2\0\1\10"+
    "\10\0\26\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\10\0\2\10\1\63\3\10\1\64\17\10"+
    "\1\0\1\10\4\0\1\63\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\4\10\2\0\1\64"+
    "\10\0\1\10\1\65\5\10\1\66\16\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\4\10\2\0\1\10\10\0\2\10"+
    "\1\67\5\10\1\70\15\10\1\0\1\10\4\0\1\67"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\4\10\2\0\1\10\10\0\11\10\1\14\3\10"+
    "\1\71\10\10\1\0\1\10\4\0\1\10\2\0\1\14"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\1\10"+
    "\1\71\2\10\2\0\1\10\10\0\2\10\1\72\1\73"+
    "\7\10\1\74\12\10\1\0\1\10\4\0\1\72\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\16\10\1\16\1\75\6\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\4\10\2\0\1\10"+
    "\10\0\22\10\1\76\1\10\1\17\1\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\4\10\2\0\1\10\37\0\1\77"+
    "\2\0\1\100\13\0\1\100\2\0\1\100\11\0\1\100"+
    "\44\0\1\100\13\0\1\100\2\0\1\100\11\0\1\100"+
    "\21\0\1\101\1\0\1\101\21\0\2\102\1\101\1\103"+
    "\1\101\34\0\1\102\33\0\1\104\2\105\1\24\1\43"+
    "\7\0\1\104\1\0\1\43\1\106\1\43\10\0\1\106"+
    "\1\43\4\0\3\43\1\107\33\0\1\110\2\111\1\43"+
    "\1\25\1\112\6\0\1\110\1\0\1\43\1\113\1\43"+
    "\10\0\1\113\1\43\4\0\3\43\1\114\1\0\11\10"+
    "\1\14\3\10\1\71\10\10\1\0\1\10\2\0\1\110"+
    "\1\111\1\115\1\0\1\112\1\26\5\0\1\10\1\116"+
    "\1\0\1\10\1\110\1\0\1\10\3\0\1\10\1\71"+
    "\2\10\1\110\1\0\1\10\6\0\1\111\43\0\1\31"+
    "\76\0\1\32\32\0\7\10\1\117\1\10\1\117\14\10"+
    "\1\0\1\10\3\0\1\102\1\120\1\101\1\103\1\117"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\6\0\1\102\1\0\26\121\1\0\1\122"+
    "\4\0\1\121\2\0\1\121\4\0\1\121\2\122\1\0"+
    "\1\121\2\0\1\121\3\0\4\121\2\0\1\121\10\0"+
    "\26\10\1\0\1\10\4\0\1\10\2\43\1\10\5\0"+
    "\2\10\1\0\1\35\2\43\1\10\3\0\4\10\2\43"+
    "\1\10\3\0\4\43\10\0\1\101\1\0\1\101\21\0"+
    "\2\102\1\123\1\124\1\101\10\0\3\43\10\0\2\43"+
    "\4\0\3\43\1\125\1\0\26\121\1\0\1\122\4\0"+
    "\1\121\2\43\1\121\4\0\1\121\2\122\1\0\1\126"+
    "\2\43\1\121\3\0\4\121\2\43\1\121\3\0\4\43"+
    "\56\0\1\2\20\0\1\46\1\47\21\10\1\50\2\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\1\46\1\127\2\10"+
    "\2\0\1\10\10\0\4\10\1\61\13\10\1\62\5\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\1\10\1\130\1\10"+
    "\1\61\2\0\1\10\45\0\2\43\11\0\3\43\10\0"+
    "\2\43\4\0\4\43\1\0\2\10\1\63\3\10\1\64"+
    "\17\10\1\0\1\10\4\0\1\63\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\131\10\0\26\132\1\0\1\132\4\0\1\132\2\43"+
    "\1\132\5\0\2\132\1\0\1\133\2\43\1\132\3\0"+
    "\4\132\2\43\1\132\3\0\4\43\1\0\1\46\1\134"+
    "\24\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\1\46\3\10"+
    "\2\0\1\10\10\0\1\135\1\136\7\10\1\137\14\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\137\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\1\135\3\10\2\0"+
    "\1\10\10\0\1\140\25\10\1\0\1\10\4\0\1\10"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\1\140\3\10\2\0\1\10\10\0\2\135\24\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\1\135\3\10\2\0"+
    "\1\10\10\0\1\51\1\52\1\10\1\141\10\10\1\54"+
    "\11\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\1\51\3\10"+
    "\2\0\1\10\10\0\2\10\1\142\1\141\22\10\1\0"+
    "\1\10\4\0\1\142\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\1\143\4\10\1\143\6\10\1\54\11\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\1\143\3\10\2\0\1\10\10\0"+
    "\2\10\1\55\1\56\5\10\1\144\6\10\1\145\5\10"+
    "\1\0\1\10\4\0\1\55\2\0\1\144\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\4\10\2\0\1\10"+
    "\10\0\3\10\1\56\1\146\1\147\20\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\3\10\1\146\2\0\1\10\10\0"+
    "\20\10\1\145\1\10\1\150\3\10\1\0\1\10\4\0"+
    "\1\10\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\4\10\2\0\1\10\10\0\7\10\1\60"+
    "\4\10\1\151\11\10\1\0\1\10\4\0\1\10\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\4\10\1\61\13\10\1\152"+
    "\5\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\3\10\1\61"+
    "\2\0\1\10\10\0\17\10\1\153\1\152\5\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\2\10\1\154\3\10\1\155\17\10\1\0\1\10\4\0"+
    "\1\154\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\4\10\2\0\1\155\10\0\2\10\1\154"+
    "\3\10\1\64\17\10\1\0\1\10\4\0\1\154\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\64\10\0\1\10\1\156\1\10\1\157"+
    "\22\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\10\10\0\1\10\1\156\5\10\1\66\16\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\2\10\1\160\23\10\1\0\1\10\4\0\1\160\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\2\10\1\160\5\10\1\70"+
    "\15\10\1\0\1\10\4\0\1\160\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\10\10\0\7\10\1\60\5\10\1\71\10\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\1\10\1\71\2\10\2\0"+
    "\1\10\10\0\2\10\1\161\10\10\1\162\12\10\1\0"+
    "\1\10\4\0\1\161\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\1\10\1\163\1\10\1\73\1\164\21\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\3\10\1\164\2\0\1\10\10\0"+
    "\2\10\1\161\1\73\7\10\1\74\12\10\1\0\1\10"+
    "\4\0\1\161\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\4\10\2\0\1\10\10\0\7\10"+
    "\1\60\7\10\1\75\6\10\1\0\1\10\4\0\1\10"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\4\10\2\0\1\10\10\0\22\10\1\76\2\10"+
    "\1\165\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\10\37\0\1\77\55\0\1\101\1\0\1\101\23\0"+
    "\1\101\1\0\1\101\45\0\1\101\1\0\1\101\23\0"+
    "\1\101\1\103\1\101\74\0\1\103\65\0\1\30\2\0"+
    "\1\30\76\0\1\104\13\0\1\104\2\0\1\104\11\0"+
    "\1\104\40\0\1\30\2\0\1\30\3\0\2\43\11\0"+
    "\3\43\10\0\2\43\4\0\4\43\33\0\1\104\2\0"+
    "\2\43\7\0\1\104\1\0\1\43\1\106\1\43\10\0"+
    "\1\106\1\43\4\0\4\43\27\0\1\27\2\0\1\27"+
    "\76\0\1\110\13\0\1\110\2\0\1\110\11\0\1\110"+
    "\44\0\1\110\2\111\1\0\2\112\6\0\1\110\2\0"+
    "\1\110\11\0\1\110\10\0\1\111\27\0\1\27\2\0"+
    "\1\27\3\0\2\43\11\0\3\43\10\0\2\43\4\0"+
    "\4\43\33\0\1\110\2\0\2\43\7\0\1\110\1\0"+
    "\1\43\1\113\1\43\10\0\1\113\1\43\4\0\4\43"+
    "\1\0\26\10\1\0\1\10\2\0\1\110\1\0\1\10"+
    "\2\0\1\10\5\0\1\10\1\116\1\0\1\10\1\110"+
    "\1\0\1\10\3\0\4\10\1\110\1\0\1\10\10\0"+
    "\26\10\1\27\1\10\1\0\1\27\2\0\1\10\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\7\10\1\117\1\10\1\117"+
    "\14\10\1\0\1\10\4\0\1\10\1\101\1\0\1\117"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\10\0\7\10\1\117\1\10\1\117\14\10"+
    "\1\0\1\10\4\0\1\10\1\101\1\103\1\117\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\10\10\0\26\121\1\0\1\121\4\0\1\121\2\0"+
    "\1\121\4\0\3\121\1\0\1\121\2\0\1\121\3\0"+
    "\4\121\2\0\1\121\17\0\1\101\1\0\1\101\23\0"+
    "\1\123\1\43\1\101\10\0\3\43\10\0\2\43\4\0"+
    "\4\43\36\0\1\43\1\124\11\0\3\43\10\0\2\43"+
    "\4\0\4\43\10\0\1\101\1\0\1\101\23\0\1\123"+
    "\1\124\1\101\10\0\3\43\10\0\2\43\4\0\4\43"+
    "\1\0\26\121\1\0\1\121\4\0\1\121\2\43\1\121"+
    "\4\0\3\121\1\0\1\126\2\43\1\121\3\0\4\121"+
    "\2\43\1\121\3\0\4\43\1\0\26\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\1\10\1\166\2\10\2\0\1\10"+
    "\10\0\11\10\1\167\14\10\1\0\1\10\4\0\1\10"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\4\10\2\0\1\10\10\0\2\10\1\154\3\10"+
    "\1\64\17\10\1\0\1\10\4\0\1\154\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\170\10\0\26\132\1\0\1\132\4\0\1\132"+
    "\2\0\1\132\5\0\2\132\1\0\1\132\2\0\1\132"+
    "\3\0\4\132\2\0\1\132\10\0\1\135\1\136\7\10"+
    "\1\171\14\10\1\0\1\10\4\0\1\10\2\0\1\171"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\1\135"+
    "\3\10\2\0\1\10\10\0\11\10\1\172\14\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\172\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\1\140\22\10\1\173\2\10\1\0\1\10\4\0\1\10"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\1\140\3\10\2\0\1\10\10\0\2\10\1\174"+
    "\1\141\22\10\1\0\1\10\4\0\1\174\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\10\0\2\10\1\174\15\10\1\175\5\10"+
    "\1\0\1\10\4\0\1\174\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\4\10\2\0\1\10"+
    "\10\0\1\143\4\10\1\143\20\10\1\0\1\10\4\0"+
    "\1\10\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\1\143\3\10\2\0\1\10\10\0\11\10"+
    "\1\144\1\176\13\10\1\0\1\10\4\0\1\10\2\0"+
    "\1\144\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\2\10\1\176\1\10\2\0\1\10\10\0\20\10\1\145"+
    "\1\10\1\177\3\10\1\0\1\10\4\0\1\10\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\4\10\1\146\1\147\20\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\3\10\1\146\2\0"+
    "\1\10\10\0\5\10\1\147\20\10\1\0\1\10\4\0"+
    "\1\10\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\4\10\2\0\1\10\10\0\22\10\1\177"+
    "\3\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\10\10\0\14\10\1\151\11\10\1\0\1\10\4\0"+
    "\1\10\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\4\10\2\0\1\10\10\0\17\10\1\200"+
    "\1\152\5\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\10\0\16\10\1\201\1\200\6\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\2\10\1\154\3\10\1\202\17\10\1\0\1\10\4\0"+
    "\1\154\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\4\10\2\0\1\202\10\0\6\10\1\202"+
    "\17\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\202\10\0\1\10\1\156\1\10\1\203\22\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\3\10\1\203\4\10\1\204\15\10\1\0\1\10\4\0"+
    "\1\10\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\4\10\2\0\1\10\10\0\2\10\1\161"+
    "\10\10\1\205\12\10\1\0\1\10\4\0\1\161\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\13\10\1\205\12\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\1\10\1\163\1\206\23\10\1\0\1\10\4\0\1\206"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\4\10\2\0\1\10\10\0\1\10\1\163\2\10"+
    "\1\164\21\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\3\10"+
    "\1\164\2\0\1\10\10\0\25\10\1\165\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\4\10\2\0\1\10\10\0\11\10"+
    "\1\207\14\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\10\0\26\10\1\0\1\10\4\0\1\10"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\4\10\1\210\1\0\1\10\10\0\2\10\1\154"+
    "\3\10\1\64\17\10\1\0\1\10\4\0\1\154\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\64\1\211\7\0\11\10\1\212\14\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\212\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\4\10\2\0\1\10"+
    "\10\0\11\10\1\212\7\10\1\213\4\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\212\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\4\10\2\0\1\10\10\0\23\10"+
    "\1\173\2\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\10\0\2\10\1\174\15\10\1\214\5\10"+
    "\1\0\1\10\4\0\1\174\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\4\10\2\0\1\10"+
    "\10\0\14\10\1\215\3\10\1\216\5\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\10\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\4\10\2\0\1\10\10\0\12\10"+
    "\1\176\13\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\2\10"+
    "\1\176\1\10\2\0\1\10\10\0\16\10\1\217\1\200"+
    "\6\10\1\0\1\10\4\0\1\10\2\0\1\10\5\0"+
    "\2\10\1\0\1\10\2\0\1\10\3\0\4\10\2\0"+
    "\1\10\10\0\16\10\1\217\7\10\1\0\1\10\4\0"+
    "\1\10\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\4\10\2\0\1\10\10\0\3\10\1\203"+
    "\4\10\1\220\15\10\1\0\1\10\4\0\1\10\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\10\10\1\220\15\10\1\0"+
    "\1\10\4\0\1\10\2\0\1\10\5\0\2\10\1\0"+
    "\1\10\2\0\1\10\3\0\4\10\2\0\1\10\10\0"+
    "\2\10\1\206\23\10\1\0\1\10\4\0\1\206\2\0"+
    "\1\10\5\0\2\10\1\0\1\10\2\0\1\10\3\0"+
    "\4\10\2\0\1\10\10\0\26\10\1\0\1\10\4\0"+
    "\1\10\2\0\1\10\5\0\2\10\1\0\1\10\2\0"+
    "\1\10\3\0\2\10\1\167\1\10\1\210\1\0\1\10"+
    "\74\0\1\221\10\0\55\222\2\0\11\222\1\0\5\222"+
    "\1\0\11\10\1\212\7\10\1\223\4\10\1\0\1\10"+
    "\4\0\1\10\2\0\1\212\5\0\2\10\1\0\1\10"+
    "\2\0\1\10\3\0\4\10\2\0\1\10\10\0\21\10"+
    "\1\223\4\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\10\0\14\10\1\224\3\10\1\214\5\10"+
    "\1\0\1\10\4\0\1\10\2\0\1\10\5\0\2\10"+
    "\1\0\1\10\2\0\1\10\3\0\4\10\2\0\1\10"+
    "\10\0\14\10\1\224\11\10\1\0\1\10\4\0\1\10"+
    "\2\0\1\10\5\0\2\10\1\0\1\10\2\0\1\10"+
    "\3\0\4\10\2\0\1\10\10\0\14\10\1\224\3\10"+
    "\1\216\5\10\1\0\1\10\4\0\1\10\2\0\1\10"+
    "\5\0\2\10\1\0\1\10\2\0\1\10\3\0\4\10"+
    "\2\0\1\10\7\0\44\225\1\0\6\225\1\0\1\225"+
    "\3\0\5\225\1\226\2\225\3\0\47\225\1\0\6\225"+
    "\1\0\1\225\3\0\5\225\1\0\2\225\3\0\3\225"+
    "\55\227\2\0\11\227\1\0\5\227\44\225\1\0\6\225"+
    "\1\0\1\225\3\0\5\225\1\222\2\225\3\0\3\225"+
    "\55\227\3\0\10\227\1\0\5\227";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\5\1\2\11\47\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\2\0\7\1\1\0"+
    "\65\1\2\0\7\1\2\0\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzFrenchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2962) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 26: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 27: break;
          case 3: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 28: break;
          case 4: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 29: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 30: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 31: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 32: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 33: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 34: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 35: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 36: break;
          case 12: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 37: break;
          case 13: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 38: break;
          case 14: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 39: break;
          case 15: 
            { return JflexBuzzTokenizer.NO;
            }
          case 40: break;
          case 16: 
            { return JflexBuzzTokenizer.KISSES;
            }
          case 41: break;
          case 17: 
            { return JflexBuzzTokenizer.HEHE;
            }
          case 42: break;
          case 18: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 43: break;
          case 19: 
            { return JflexBuzzTokenizer.YES;
            }
          case 44: break;
          case 20: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 45: break;
          case 21: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 46: break;
          case 22: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 47: break;
          case 23: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 48: break;
          case 24: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 49: break;
          case 25: 
            { return JflexBuzzTokenizer.URL;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

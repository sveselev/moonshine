/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzSpanishLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\57\1\71\1\71\1\56\22\0\1\60\1\44\1\75"+
    "\1\54\1\72\2\75\1\35\1\40\1\37\1\35\2\75\1\76\1\73"+
    "\1\66\3\47\1\31\4\47\1\50\1\47\1\65\1\34\1\30\1\53"+
    "\1\33\1\45\1\74\1\3\1\55\1\17\1\12\1\23\1\7\1\10"+
    "\1\4\1\27\1\5\1\20\1\16\1\1\1\13\1\6\1\41\1\25"+
    "\1\22\1\15\1\24\1\2\1\26\1\11\1\55\1\21\1\55\1\40"+
    "\1\70\1\37\1\75\1\52\1\0\1\3\1\55\1\17\1\12\1\23"+
    "\1\64\1\10\1\61\1\27\1\5\1\20\1\16\1\1\1\13\1\36"+
    "\1\14\1\25\1\22\1\63\1\62\1\2\1\26\1\67\1\55\1\21"+
    "\1\55\1\0\1\75\1\0\1\75\6\0\1\71\32\0\1\60\11\0"+
    "\1\55\11\0\1\0\1\55\1\0\1\46\2\0\1\55\5\0\14\55"+
    "\2\27\11\55\1\0\24\55\2\27\11\55\1\0\u01ca\55\4\0\14\55"+
    "\16\0\5\55\7\0\1\55\1\0\1\55\21\0\160\46\5\55\1\0"+
    "\2\55\2\0\4\55\10\0\1\55\1\0\3\55\1\0\1\55\1\0"+
    "\24\55\1\0\123\55\1\0\213\55\1\0\7\46\236\55\11\0\46\55"+
    "\2\0\1\55\7\0\47\55\11\0\55\46\1\46\1\46\1\0\2\46"+
    "\1\0\2\46\1\0\1\46\10\0\33\55\5\0\3\55\2\46\33\0"+
    "\13\46\5\0\53\55\25\46\12\47\4\0\2\55\1\46\143\55\1\0"+
    "\1\55\7\46\2\0\6\46\2\55\2\46\1\0\4\46\2\55\12\47"+
    "\3\55\2\0\1\55\20\0\1\55\1\46\36\55\33\46\2\0\131\55"+
    "\13\46\1\55\16\0\12\47\41\55\11\46\2\55\4\0\1\55\5\0"+
    "\26\55\4\46\1\55\11\46\1\55\3\46\1\55\5\46\22\0\31\55"+
    "\3\46\104\0\1\55\1\0\13\55\67\0\33\46\1\0\4\46\66\55"+
    "\3\46\1\55\22\46\1\55\7\46\12\55\2\46\2\0\12\47\1\0"+
    "\7\55\1\0\7\55\1\0\3\46\1\0\10\55\2\0\2\55\2\0"+
    "\26\55\1\0\7\55\1\0\1\55\3\0\4\55\2\0\1\46\1\55"+
    "\7\46\2\0\2\46\2\0\3\46\1\55\10\0\1\46\4\0\2\55"+
    "\1\0\3\55\2\46\2\0\12\47\2\55\17\0\3\46\1\0\6\55"+
    "\4\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55\1\0\2\55"+
    "\1\0\2\55\2\0\1\46\1\0\5\46\4\0\2\46\2\0\3\46"+
    "\3\0\1\46\7\0\4\55\1\0\1\55\7\0\12\47\2\46\3\55"+
    "\1\46\13\0\3\46\1\0\11\55\1\0\3\55\1\0\26\55\1\0"+
    "\7\55\1\0\2\55\1\0\5\55\2\0\1\46\1\55\10\46\1\0"+
    "\3\46\1\0\3\46\2\0\1\55\17\0\2\55\2\46\2\0\12\47"+
    "\21\0\3\46\1\0\10\55\2\0\2\55\2\0\26\55\1\0\7\55"+
    "\1\0\2\55\1\0\5\55\2\0\1\46\1\55\7\46\2\0\2\46"+
    "\2\0\3\46\10\0\2\46\4\0\2\55\1\0\3\55\2\46\2\0"+
    "\12\47\1\0\1\55\20\0\1\46\1\55\1\0\6\55\3\0\3\55"+
    "\1\0\4\55\3\0\2\55\1\0\1\55\1\0\2\55\3\0\2\55"+
    "\3\0\3\55\3\0\14\55\4\0\5\46\3\0\3\46\1\0\4\46"+
    "\2\0\1\55\6\0\1\46\16\0\12\47\21\0\3\46\1\0\10\55"+
    "\1\0\3\55\1\0\27\55\1\0\12\55\1\0\5\55\3\0\1\55"+
    "\7\46\1\0\3\46\1\0\4\46\7\0\2\46\1\0\2\55\6\0"+
    "\2\55\2\46\2\0\12\47\22\0\2\46\1\0\10\55\1\0\3\55"+
    "\1\0\27\55\1\0\12\55\1\0\5\55\2\0\1\46\1\55\7\46"+
    "\1\0\3\46\1\0\4\46\7\0\2\46\7\0\1\55\1\0\2\55"+
    "\2\46\2\0\12\47\1\0\2\55\17\0\2\46\1\0\10\55\1\0"+
    "\3\55\1\0\51\55\2\0\1\55\7\46\1\0\3\46\1\0\4\46"+
    "\1\55\10\0\1\46\10\0\2\55\2\46\2\0\12\47\12\0\6\55"+
    "\2\0\2\46\1\0\22\55\3\0\30\55\1\0\11\55\1\0\1\55"+
    "\2\0\7\55\3\0\1\46\4\0\6\46\1\0\1\46\1\0\10\46"+
    "\22\0\2\46\15\0\60\55\1\46\2\55\7\46\5\0\7\55\10\46"+
    "\1\0\12\47\47\0\2\55\1\0\1\55\2\0\2\55\1\0\1\55"+
    "\2\0\1\55\6\0\4\55\1\0\7\55\1\0\3\55\1\0\1\55"+
    "\1\0\1\55\2\0\2\55\1\0\4\55\1\46\2\55\6\46\1\0"+
    "\2\46\1\55\2\0\5\55\1\0\1\55\1\0\6\46\2\0\12\47"+
    "\2\0\4\55\40\0\1\55\12\0\2\46\13\0\2\46\6\0\12\47"+
    "\13\0\1\46\1\0\1\46\1\0\1\46\4\0\2\46\10\55\1\0"+
    "\44\55\4\0\24\46\1\0\2\46\5\55\13\46\1\0\44\46\11\0"+
    "\1\46\71\0\53\55\24\46\1\55\12\47\6\0\6\55\4\46\4\55"+
    "\3\46\1\55\3\46\2\55\7\46\3\55\4\46\15\55\14\46\1\55"+
    "\1\46\12\47\4\46\2\0\46\55\1\0\1\55\5\0\1\55\2\0"+
    "\53\55\1\0\u014d\55\1\0\4\55\2\0\7\55\1\0\1\55\1\0"+
    "\4\55\2\0\51\55\1\0\4\55\2\0\41\55\1\0\4\55\2\0"+
    "\7\55\1\0\1\55\1\0\4\55\2\0\17\55\1\0\71\55\1\0"+
    "\4\55\2\0\103\55\2\0\3\46\40\0\20\55\20\0\125\55\14\0"+
    "\u026c\55\2\0\21\55\1\60\32\55\5\0\113\55\25\0\15\55\1\0"+
    "\4\55\3\46\13\0\22\55\3\46\13\0\22\55\2\46\14\0\15\55"+
    "\1\0\3\55\1\0\2\46\14\0\64\55\40\46\3\0\1\55\4\0"+
    "\1\55\1\46\2\0\12\47\41\0\3\46\2\0\12\47\6\0\130\55"+
    "\10\0\51\55\1\46\1\55\5\0\106\55\12\0\35\55\3\0\14\46"+
    "\4\0\14\46\12\0\12\47\36\55\2\0\5\55\13\0\54\55\4\0"+
    "\21\46\7\55\2\46\6\0\12\47\46\0\27\55\5\46\4\0\65\55"+
    "\12\46\1\0\35\46\2\0\1\46\12\47\6\0\12\47\15\0\1\55"+
    "\130\0\5\46\57\55\21\46\7\55\4\0\12\47\21\0\11\46\14\0"+
    "\3\46\36\55\15\46\2\55\12\47\54\55\16\46\14\0\44\55\24\46"+
    "\10\0\12\47\3\0\3\55\12\47\44\55\122\0\3\46\1\0\25\46"+
    "\4\55\1\46\4\55\3\46\2\55\11\0\300\55\47\46\25\0\4\46"+
    "\u0116\55\2\0\6\55\2\0\46\55\2\0\6\55\2\0\10\55\1\0"+
    "\1\55\1\0\1\55\1\0\1\55\1\0\37\55\2\0\65\55\1\0"+
    "\7\55\1\0\1\55\3\0\3\55\1\0\7\55\3\0\4\55\2\0"+
    "\6\55\4\0\15\55\5\0\3\55\1\0\7\55\3\0\13\60\1\0"+
    "\2\46\13\0\1\0\2\0\2\75\12\0\1\71\1\71\5\0\1\60"+
    "\57\0\1\60\21\0\1\55\15\0\1\55\20\0\15\55\63\0\41\46"+
    "\21\0\1\55\4\0\1\55\2\0\12\55\1\0\1\55\3\0\5\55"+
    "\6\0\1\55\1\0\1\55\1\0\1\55\1\0\4\55\1\0\13\55"+
    "\2\0\4\55\5\0\5\55\4\0\1\55\64\0\2\55\u04b5\0\1\42"+
    "\52\0\1\32\246\0\1\42\127\0\1\32\u049b\0\57\55\1\0\57\55"+
    "\1\0\205\55\6\0\4\55\3\46\2\55\14\0\46\55\1\0\1\55"+
    "\5\0\1\55\2\0\70\55\7\0\1\55\17\0\1\46\27\55\11\0"+
    "\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0"+
    "\7\55\1\0\7\55\1\0\7\55\1\0\40\46\57\0\1\55\u01d0\0"+
    "\1\60\2\0\1\46\1\0\2\55\25\0\1\46\15\0\6\46\1\0"+
    "\5\55\5\0\2\55\4\0\126\55\2\0\2\46\2\46\3\55\1\46"+
    "\132\55\1\46\4\55\5\0\51\55\3\0\136\55\21\0\33\55\65\0"+
    "\20\55\u0200\0\u19b6\55\112\0\u51cd\55\63\0\u048d\55\103\0\56\55\2\0"+
    "\u010d\55\3\0\20\55\12\47\2\55\24\0\57\55\4\46\1\0\12\46"+
    "\1\46\31\55\7\0\1\46\106\55\12\0\2\46\45\0\11\55\2\0"+
    "\147\55\2\0\4\55\1\0\4\55\14\0\13\55\115\0\12\55\1\46"+
    "\3\55\1\46\4\55\1\46\27\55\5\46\30\0\64\55\14\0\2\46"+
    "\62\55\21\46\13\0\12\47\6\0\22\46\6\55\3\0\1\55\4\0"+
    "\12\47\34\55\10\46\2\0\27\55\15\46\14\0\35\55\3\0\4\46"+
    "\57\55\16\46\16\0\1\55\12\47\46\0\51\55\16\46\11\0\3\55"+
    "\1\46\10\55\2\46\2\0\12\47\6\0\27\55\3\0\1\55\1\46"+
    "\4\0\60\55\1\46\1\55\3\46\2\55\2\46\5\55\2\46\1\55"+
    "\1\46\1\55\30\0\3\55\2\0\13\55\5\46\2\0\3\55\2\46"+
    "\12\0\6\55\2\0\6\55\2\0\6\55\11\0\7\55\1\0\7\55"+
    "\221\0\43\55\10\46\1\0\2\46\2\0\12\47\6\0\u2ba4\55\14\0"+
    "\27\55\4\0\61\55\u2104\0\u016e\55\2\0\152\55\46\0\7\55\14\0"+
    "\5\55\5\0\1\55\1\46\12\55\1\0\15\55\1\0\5\55\1\0"+
    "\1\55\1\0\2\55\1\0\2\55\1\0\154\55\41\0\u016b\55\22\0"+
    "\100\55\2\0\66\55\50\0\14\55\4\0\20\46\20\0\7\46\111\0"+
    "\5\55\1\0\207\55\6\0\1\51\14\0\12\47\7\0\32\55\6\0"+
    "\32\55\3\0\1\46\7\0\131\55\3\0\6\55\2\0\6\55\2\0"+
    "\6\55\2\0\3\55\43\0\14\55\1\0\32\55\1\0\23\55\1\0"+
    "\2\55\1\0\17\55\2\0\16\55\42\0\173\55\u0102\0\1\46\202\0"+
    "\35\55\3\0\61\55\57\0\37\55\21\0\21\55\1\0\10\55\66\0"+
    "\36\55\2\0\44\55\4\0\10\55\60\0\236\55\2\0\12\47\u0356\0"+
    "\6\55\2\0\1\55\1\0\54\55\1\0\2\55\3\0\1\55\2\0"+
    "\27\55\252\0\26\55\12\0\32\55\106\0\70\55\6\0\2\55\100\0"+
    "\1\55\3\46\1\0\2\46\5\0\4\46\4\55\1\0\3\55\1\0"+
    "\33\55\4\0\3\46\4\0\1\46\40\0\35\55\203\0\66\55\12\0"+
    "\26\55\12\0\23\55\215\0\111\55\u03b7\0\3\46\65\55\17\46\37\0"+
    "\12\47\20\0\3\46\55\55\13\46\25\0\31\55\7\0\12\47\6\0"+
    "\3\46\44\55\16\46\1\0\12\47\100\0\3\46\60\55\16\46\4\55"+
    "\13\0\12\47\u04a6\0\53\55\15\46\10\0\12\47\u0936\0\u036f\55\u0c91\0"+
    "\u042f\55\u33d1\0\u0239\55\u04c7\0\105\55\13\0\1\55\56\46\20\0\4\46"+
    "\15\55\u4060\0\2\55\u2163\0\5\46\3\0\6\46\10\0\10\46\2\0"+
    "\7\46\36\0\4\46\224\0\3\46\u01bb\0\125\55\1\0\107\55\1\0"+
    "\2\55\2\0\1\55\2\0\2\55\2\0\4\55\1\0\14\55\1\0"+
    "\1\55\1\0\7\55\1\0\101\55\1\0\4\55\2\0\10\55\1\0"+
    "\7\55\1\0\34\55\1\0\4\55\1\0\5\55\1\0\1\55\3\0"+
    "\7\55\1\0\u0154\55\2\0\31\55\1\0\31\55\1\0\37\55\1\0"+
    "\31\55\1\0\37\55\1\0\31\55\1\0\37\55\1\0\31\55\1\0"+
    "\37\55\1\0\31\55\1\0\10\55\2\0\62\47\u1600\0\4\55\1\0"+
    "\33\55\1\0\2\55\1\0\1\55\2\0\1\55\1\0\12\55\1\0"+
    "\4\55\1\0\1\55\1\0\1\55\6\0\1\55\4\0\1\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\2\55\1\0\1\55\2\0"+
    "\1\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0"+
    "\2\55\1\0\1\55\2\0\4\55\1\0\7\55\1\0\4\55\1\0"+
    "\4\55\1\0\1\55\1\0\12\55\1\0\21\55\5\0\3\55\1\0"+
    "\5\55\1\0\21\55\u047d\0\1\42\116\0\1\42\303\0\2\42\1\0"+
    "\1\42\73\0\1\42\1\32\2\0\5\32\1\43\13\32\2\0\1\43"+
    "\u015e\0\4\42\1\0\1\42\2\0\5\42\1\0\1\42\2\0\1\43"+
    "\5\0\1\42\3\0\2\42\1\43\1\0\2\43\7\0\1\43\1\0"+
    "\1\43\1\0\1\43\5\0\1\42\33\0\1\42\u09b0\0\ua6d7\55\51\0"+
    "\u1035\55\13\0\336\55\u3fe2\0\u021e\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\46\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\15\2\1\1\1\3\2\1\2\4\1\2"+
    "\1\5\1\6\1\7\1\10\1\2\1\1\3\4\1\1"+
    "\2\2\1\4\1\2\1\4\5\2\1\11\1\2\1\11"+
    "\17\2\1\12\1\3\1\0\1\5\1\0\2\6\1\0"+
    "\1\6\1\4\1\5\2\0\1\5\1\4\1\2\2\5"+
    "\1\2\1\13\1\0\1\5\1\6\1\4\1\13\3\2"+
    "\2\14\4\2\1\11\1\15\1\11\3\2\1\16\7\2"+
    "\1\17\1\20\22\2\1\21\2\2\1\22\2\2\2\23"+
    "\4\2\2\0\1\2\2\12\3\2\1\24\1\25\1\12"+
    "\2\2\2\0\1\12\1\26\1\12\1\2\2\0\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\77\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\77\0\77"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc"+
    "\0\u091b\0\u095a\0\u0999\0\u09d8\0\u017a\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u042f\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u05e8\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u081f\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u091b\0\u1569"+
    "\0\u15a8\0\u15e7\0\u15a8\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u0c0f\0\u0ccc\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94"+
    "\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u17a0\0\u1d88\0\u1dc7\0\u1e06\0\u191a"+
    "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1bcf"+
    "\0\u1c0e\0\u1ffe\0\u203d\0\u207c\0\u1d49\0\u1dc7\0\u20bb\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u1ffe\0\u207c\0\u20fa\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\4\1\15\1\16\5\4"+
    "\1\17\3\4\1\20\1\4\1\21\1\22\1\23\1\2"+
    "\1\10\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\2\1\4\1\33\1\34\1\35\1\36\1\37\1\4"+
    "\1\40\2\2\1\41\1\17\1\15\1\42\1\36\1\43"+
    "\1\44\3\2\1\43\1\45\2\43\100\0\1\4\1\46"+
    "\25\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\4\10\0\27\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\4\10\0\1\47\1\4\1\50\1\51"+
    "\15\4\1\52\5\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\1\51\3\4\2\0\1\4\10\0\2\4\1\53\1\54"+
    "\23\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\1\54\3\4"+
    "\2\0\1\4\10\0\2\4\1\55\1\4\1\55\22\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\1\56\4\4\1\57\21\4\1\0\1\4\4\0"+
    "\1\57\2\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\4\4\2\0\1\4\10\0\1\4\1\60"+
    "\4\4\1\61\20\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\3\4\1\61\2\0\1\4\10\0\5\4\1\62\2\4"+
    "\1\63\16\4\1\0\1\4\4\0\1\62\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\63\10\0\2\4\1\64\6\4\1\65\15\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\5\4\1\66\4\4\1\67\14\4\1\0\1\4"+
    "\4\0\1\66\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\14\4"+
    "\1\70\11\4\1\71\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\70\1\4\2\0\1\4\10\0\1\72\4\4"+
    "\1\73\7\4\1\74\11\4\1\0\1\4\4\0\1\73"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\4\10\0\24\4\1\75\2\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\40\0\1\76\2\0\1\77\13\0\1\77\2\0\1\77"+
    "\11\0\1\77\45\0\1\77\13\0\1\77\2\0\1\77"+
    "\11\0\1\77\23\0\1\100\1\0\1\100\20\0\2\101"+
    "\1\100\1\102\1\100\34\0\1\101\34\0\1\103\2\104"+
    "\1\24\1\43\7\0\1\103\1\0\1\43\1\105\1\43"+
    "\10\0\1\105\1\43\4\0\3\43\1\106\34\0\1\107"+
    "\2\110\1\43\1\25\1\111\6\0\1\107\1\0\1\43"+
    "\1\112\1\43\10\0\1\112\1\43\4\0\3\43\1\113"+
    "\1\0\27\4\1\0\1\4\2\0\1\107\1\110\1\114"+
    "\1\0\1\111\1\26\5\0\1\4\1\115\1\0\1\4"+
    "\1\107\1\0\1\4\3\0\4\4\1\107\1\0\1\4"+
    "\6\0\1\110\44\0\1\31\77\0\1\32\32\0\11\4"+
    "\1\116\1\4\1\116\13\4\1\0\1\4\3\0\1\101"+
    "\1\117\1\100\1\102\1\116\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\6\0\1\101"+
    "\1\0\27\120\1\0\1\121\4\0\1\120\2\0\1\120"+
    "\4\0\1\120\2\121\1\0\1\120\2\0\1\120\3\0"+
    "\4\120\2\0\1\120\10\0\27\4\1\0\1\4\4\0"+
    "\1\4\2\43\1\4\5\0\2\4\1\0\1\35\2\43"+
    "\1\4\3\0\4\4\2\43\1\4\3\0\4\43\12\0"+
    "\1\100\1\0\1\100\20\0\2\101\1\122\1\123\1\100"+
    "\10\0\3\43\10\0\2\43\4\0\3\43\1\124\1\0"+
    "\27\120\1\0\1\121\4\0\1\120\2\43\1\120\4\0"+
    "\1\120\2\121\1\0\1\125\2\43\1\120\3\0\4\120"+
    "\2\43\1\120\3\0\4\43\57\0\1\2\20\0\2\4"+
    "\1\53\1\54\23\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\1\54\1\126\2\4\2\0\1\4\10\0\1\4\1\60"+
    "\4\4\1\61\20\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\1\4\1\127\1\4\1\61\2\0\1\4\46\0\2\43"+
    "\11\0\3\43\10\0\2\43\4\0\4\43\1\0\5\4"+
    "\1\62\2\4\1\63\16\4\1\0\1\4\4\0\1\62"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\130\10\0\27\131\1\0\1\131"+
    "\4\0\1\131\2\43\1\131\5\0\2\131\1\0\1\132"+
    "\2\43\1\131\3\0\4\131\2\43\1\131\3\0\4\43"+
    "\1\0\2\4\1\133\24\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\4\10\0\1\134\1\4\1\135"+
    "\2\4\1\136\21\4\1\0\1\4\4\0\1\136\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\4\10\0\1\134\1\4\1\50\1\51"+
    "\15\4\1\52\5\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\1\51\3\4\2\0\1\4\10\0\2\4\2\137\23\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\1\137\3\4\2\0"+
    "\1\4\10\0\3\4\1\140\3\4\1\140\11\4\1\52"+
    "\5\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\1\140\3\4"+
    "\2\0\1\4\10\0\2\4\1\141\1\137\7\4\1\142"+
    "\13\4\1\0\1\4\4\0\1\4\2\0\1\142\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\1\137\3\4"+
    "\2\0\1\4\10\0\2\4\1\143\1\54\23\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\1\54\3\4\2\0\1\4"+
    "\10\0\1\56\5\4\1\144\1\145\17\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\3\4\1\144\2\0\1\4\10\0"+
    "\1\56\4\4\1\57\5\4\1\146\13\4\1\0\1\4"+
    "\4\0\1\57\2\0\1\146\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\1\4"+
    "\1\147\14\4\1\150\10\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\4\10\0\1\4\1\147\4\4"+
    "\1\61\20\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\3\4"+
    "\1\61\2\0\1\4\10\0\5\4\1\151\2\4\1\152"+
    "\16\4\1\0\1\4\4\0\1\151\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\152\10\0\5\4\1\151\2\4\1\63\16\4\1\0"+
    "\1\4\4\0\1\151\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\4\4\2\0\1\63\10\0"+
    "\1\153\1\4\1\154\24\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\4\10\0\2\4\1\154\6\4"+
    "\1\65\15\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\5\4\1\155\21\4\1\0\1\4"+
    "\4\0\1\155\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\5\4"+
    "\1\155\4\4\1\67\14\4\1\0\1\4\4\0\1\155"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\4\10\0\14\4\1\70\11\4"+
    "\1\156\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\2\4\1\70"+
    "\1\4\2\0\1\4\10\0\26\4\1\156\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\1\72"+
    "\1\4\1\157\3\4\1\160\20\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\3\4\1\160\2\0\1\4\10\0\5\4"+
    "\1\161\7\4\1\162\7\4\1\163\1\4\1\0\1\4"+
    "\4\0\1\161\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\1\72"+
    "\4\4\1\164\7\4\1\74\11\4\1\0\1\4\4\0"+
    "\1\164\2\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\4\4\2\0\1\4\10\0\1\165\26\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\40\0\1\76\57\0\1\100\1\0\1\100\22\0\1\100"+
    "\1\0\1\100\47\0\1\100\1\0\1\100\22\0\1\100"+
    "\1\102\1\100\75\0\1\102\66\0\1\30\2\0\1\30"+
    "\77\0\1\103\13\0\1\103\2\0\1\103\11\0\1\103"+
    "\41\0\1\30\2\0\1\30\3\0\2\43\11\0\3\43"+
    "\10\0\2\43\4\0\4\43\34\0\1\103\2\0\2\43"+
    "\7\0\1\103\1\0\1\43\1\105\1\43\10\0\1\105"+
    "\1\43\4\0\4\43\30\0\1\27\2\0\1\27\77\0"+
    "\1\107\13\0\1\107\2\0\1\107\11\0\1\107\45\0"+
    "\1\107\2\110\1\0\2\111\6\0\1\107\2\0\1\107"+
    "\11\0\1\107\10\0\1\110\30\0\1\27\2\0\1\27"+
    "\3\0\2\43\11\0\3\43\10\0\2\43\4\0\4\43"+
    "\34\0\1\107\2\0\2\43\7\0\1\107\1\0\1\43"+
    "\1\112\1\43\10\0\1\112\1\43\4\0\4\43\1\0"+
    "\27\4\1\0\1\4\2\0\1\107\1\0\1\4\2\0"+
    "\1\4\5\0\1\4\1\115\1\0\1\4\1\107\1\0"+
    "\1\4\3\0\4\4\1\107\1\0\1\4\10\0\27\4"+
    "\1\27\1\4\1\0\1\27\2\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\11\4\1\116\1\4\1\116\13\4"+
    "\1\0\1\4\4\0\1\4\1\100\1\0\1\116\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\4\10\0\11\4\1\116\1\4\1\116\13\4\1\0"+
    "\1\4\4\0\1\4\1\100\1\102\1\116\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\27\120\1\0\1\120\4\0\1\120\2\0\1\120"+
    "\4\0\3\120\1\0\1\120\2\0\1\120\3\0\4\120"+
    "\2\0\1\120\21\0\1\100\1\0\1\100\22\0\1\122"+
    "\1\43\1\100\10\0\3\43\10\0\2\43\4\0\4\43"+
    "\37\0\1\43\1\123\11\0\3\43\10\0\2\43\4\0"+
    "\4\43\12\0\1\100\1\0\1\100\22\0\1\122\1\123"+
    "\1\100\10\0\3\43\10\0\2\43\4\0\4\43\1\0"+
    "\27\120\1\0\1\120\4\0\1\120\2\43\1\120\4\0"+
    "\3\120\1\0\1\125\2\43\1\120\3\0\4\120\2\43"+
    "\1\120\3\0\4\43\1\0\27\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\1\4\1\166\2\4\2\0\1\4\10\0"+
    "\13\4\1\167\13\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\4\10\0\5\4\1\151\2\4\1\63"+
    "\16\4\1\0\1\4\4\0\1\151\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\170\10\0\27\131\1\0\1\131\4\0\1\131\2\0"+
    "\1\131\5\0\2\131\1\0\1\131\2\0\1\131\3\0"+
    "\4\131\2\0\1\131\10\0\2\4\1\171\1\172\23\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\1\172\3\4\2\0"+
    "\1\4\10\0\1\134\1\4\1\173\2\4\1\174\21\4"+
    "\1\0\1\4\4\0\1\174\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\2\4\1\173\2\4\1\173\13\4\1\175\5\4"+
    "\1\0\1\4\4\0\1\173\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\2\4\1\173\2\4\1\174\13\4\1\176\5\4"+
    "\1\0\1\4\4\0\1\174\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\3\4\1\140\3\4\1\140\17\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\1\140\3\4\2\0\1\4\10\0"+
    "\2\4\1\141\1\137\7\4\1\177\13\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\177\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\1\137\3\4\2\0\1\4\10\0"+
    "\13\4\1\200\13\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\200\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\4\10\0\6\4\1\144\1\145\17\4"+
    "\1\0\1\4\4\0\1\4\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\3\4\1\144\2\0"+
    "\1\4\10\0\7\4\1\145\17\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\4\4\2\0\1\4\10\0\13\4\1\146"+
    "\1\201\12\4\1\0\1\4\4\0\1\4\2\0\1\146"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\2\4"+
    "\1\201\1\4\2\0\1\4\10\0\1\4\1\147\14\4"+
    "\1\202\10\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\16\4\1\202\1\203\7\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\4\4\2\0\1\4\10\0"+
    "\5\4\1\151\2\4\1\204\16\4\1\0\1\4\4\0"+
    "\1\151\2\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\4\4\2\0\1\204\10\0\10\4\1\204"+
    "\16\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\204\10\0\1\205\11\4\1\206\14\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\1\205"+
    "\1\4\1\154\24\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\4\10\0\2\4\1\157\2\4\1\207"+
    "\21\4\1\0\1\4\4\0\1\207\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\4\10\0\2\4\1\157\3\4\1\160\20\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\3\4\1\160\2\0\1\4"+
    "\10\0\5\4\1\161\7\4\1\210\7\4\1\211\1\4"+
    "\1\0\1\4\4\0\1\161\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\15\4\1\210\11\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\4\10\0\22\4\1\212\2\4"+
    "\1\211\1\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\5\4\1\161\7\4\1\210\7\4"+
    "\1\163\1\4\1\0\1\4\4\0\1\161\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\15\4\1\213\11\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\13\4"+
    "\1\214\13\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\27\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\1\215\1\0\1\4\10\0\5\4\1\151"+
    "\2\4\1\63\16\4\1\0\1\4\4\0\1\151\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\63\1\216\7\0\2\4\1\171\1\51"+
    "\23\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\1\51\3\4"+
    "\2\0\1\4\10\0\2\4\1\137\1\217\23\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\1\217\3\4\2\0\1\4"+
    "\10\0\2\4\1\173\2\4\1\173\13\4\1\220\5\4"+
    "\1\0\1\4\4\0\1\173\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\2\4\1\173\2\4\1\174\13\4\1\221\5\4"+
    "\1\0\1\4\4\0\1\174\2\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\3\0\4\4\2\0\1\4"+
    "\10\0\21\4\1\220\5\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\4\4\2\0\1\4\10\0\21\4\1\221\1\222"+
    "\4\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\4\10\0\13\4\1\223\13\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\223\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\4\4\2\0\1\4\10\0\13\4\1\223"+
    "\4\4\1\224\6\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\223\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\4\10\0\14\4\1\201\12\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\2\4\1\201\1\4\2\0"+
    "\1\4\10\0\16\4\1\202\1\225\7\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\17\4"+
    "\1\225\7\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\1\205\11\4\1\226\14\4\1\0"+
    "\1\4\4\0\1\4\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\4\4\2\0\1\4\10\0"+
    "\12\4\1\226\14\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\4\4\2\0\1\4\10\0\5\4\1\207\21\4\1\0"+
    "\1\4\4\0\1\207\2\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\1\4\3\0\4\4\2\0\1\4\10\0"+
    "\22\4\1\227\2\4\1\211\1\4\1\0\1\4\4\0"+
    "\1\4\2\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\1\4\3\0\4\4\2\0\1\4\10\0\14\4\1\230"+
    "\5\4\1\227\4\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\230\1\4\2\0\1\4\10\0\15\4\1\231"+
    "\11\4\1\0\1\4\4\0\1\4\2\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\4\4\2\0"+
    "\1\4\10\0\27\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\167\1\4\1\215\1\0\1\4\75\0\1\232"+
    "\10\0\56\233\2\0\11\233\1\0\5\233\1\0\2\4"+
    "\1\51\1\217\23\4\1\0\1\4\4\0\1\4\2\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\1\4\3\0"+
    "\1\217\3\4\2\0\1\4\10\0\14\4\1\230\5\4"+
    "\1\234\4\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\2\4"+
    "\1\230\1\4\2\0\1\4\10\0\13\4\1\223\4\4"+
    "\1\235\6\4\1\0\1\4\4\0\1\4\2\0\1\223"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\10\0\20\4\1\235\6\4\1\0\1\4"+
    "\4\0\1\4\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\10\0\14\4"+
    "\1\236\5\4\1\227\4\4\1\0\1\4\4\0\1\4"+
    "\2\0\1\4\5\0\2\4\1\0\1\4\2\0\1\4"+
    "\3\0\2\4\1\236\1\4\2\0\1\4\10\0\14\4"+
    "\1\236\12\4\1\0\1\4\4\0\1\4\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\2\4"+
    "\1\236\1\4\2\0\1\4\10\0\5\4\1\237\7\4"+
    "\1\231\11\4\1\0\1\4\4\0\1\237\2\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\2\0\1\4\7\0\45\240\1\0\6\240\1\0\1\240"+
    "\3\0\5\240\1\241\2\240\3\0\50\240\1\0\6\240"+
    "\1\0\1\240\3\0\5\240\1\0\2\240\3\0\3\240"+
    "\1\0\5\4\1\237\17\4\1\211\1\4\1\0\1\4"+
    "\4\0\1\237\2\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\1\4\3\0\4\4\2\0\1\4\7\0\56\242"+
    "\2\0\11\242\1\0\5\242\45\240\1\0\6\240\1\0"+
    "\1\240\3\0\5\240\1\233\2\240\3\0\3\240\56\242"+
    "\3\0\10\242\1\0\5\242";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8946];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\5\1\2\11\46\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\2\0\7\1\1\0"+
    "\73\1\2\0\13\1\2\0\4\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzSpanishLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2962) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 24: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 25: break;
          case 3: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 26: break;
          case 4: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 27: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 28: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 29: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 30: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 31: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 32: break;
          case 10: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 33: break;
          case 11: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 34: break;
          case 12: 
            { return JflexBuzzTokenizer.USER;
            }
          case 35: break;
          case 13: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 36: break;
          case 14: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 37: break;
          case 15: 
            { return JflexBuzzTokenizer.NO;
            }
          case 38: break;
          case 16: 
            { return JflexBuzzTokenizer.YES;
            }
          case 39: break;
          case 17: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 40: break;
          case 18: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 41: break;
          case 19: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 42: break;
          case 20: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 43: break;
          case 21: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 44: break;
          case 22: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 45: break;
          case 23: 
            { return JflexBuzzTokenizer.URL;
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

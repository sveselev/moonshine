/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzEnglishLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\60\1\72\1\72\1\57\22\0\1\61\1\44\1\53"+
    "\1\56\1\73\2\53\1\36\1\40\1\37\1\34\2\53\1\55\1\74"+
    "\1\67\3\47\1\30\4\47\1\50\1\47\1\66\1\33\1\27\1\54"+
    "\1\32\1\45\1\75\1\3\1\24\1\16\1\11\1\22\1\6\1\7"+
    "\1\4\2\24\1\17\1\15\1\1\1\12\1\5\1\41\1\24\1\23"+
    "\1\14\1\26\1\2\1\21\1\10\1\24\1\20\1\24\1\40\1\71"+
    "\1\37\1\53\1\52\1\0\1\3\1\24\1\16\1\11\1\22\1\65"+
    "\1\7\1\62\2\24\1\17\1\15\1\1\1\12\1\35\1\13\1\24"+
    "\1\23\1\64\1\63\1\2\1\21\1\70\1\24\1\20\1\24\1\0"+
    "\1\53\1\0\1\53\6\0\1\72\32\0\1\61\11\0\1\24\11\0"+
    "\1\25\1\24\1\0\1\46\2\0\1\24\5\0\27\24\1\0\37\24"+
    "\1\0\u01ca\24\4\0\14\24\16\0\5\24\7\0\1\24\1\0\1\24"+
    "\21\0\160\46\5\24\1\0\2\24\2\0\4\24\10\0\1\24\1\0"+
    "\3\24\1\0\1\24\1\0\24\24\1\0\123\24\1\0\213\24\1\0"+
    "\7\46\236\24\11\0\46\24\2\0\1\24\7\0\47\24\11\0\55\46"+
    "\1\46\1\46\1\0\2\46\1\0\2\46\1\0\1\46\10\0\33\24"+
    "\5\0\3\24\2\46\33\0\13\46\5\0\53\24\25\46\12\47\4\0"+
    "\2\24\1\46\143\24\1\0\1\24\7\46\2\0\6\46\2\24\2\46"+
    "\1\0\4\46\2\24\12\47\3\24\2\0\1\24\20\0\1\24\1\46"+
    "\36\24\33\46\2\0\131\24\13\46\1\24\16\0\12\47\41\24\11\46"+
    "\2\24\4\0\1\24\5\0\26\24\4\46\1\24\11\46\1\24\3\46"+
    "\1\24\5\46\22\0\31\24\3\46\104\0\1\24\1\0\13\24\67\0"+
    "\33\46\1\0\4\46\66\24\3\46\1\24\22\46\1\24\7\46\12\24"+
    "\2\46\2\0\12\47\1\0\7\24\1\0\7\24\1\0\3\46\1\0"+
    "\10\24\2\0\2\24\2\0\26\24\1\0\7\24\1\0\1\24\3\0"+
    "\4\24\2\0\1\46\1\24\7\46\2\0\2\46\2\0\3\46\1\24"+
    "\10\0\1\46\4\0\2\24\1\0\3\24\2\46\2\0\12\47\2\24"+
    "\17\0\3\46\1\0\6\24\4\0\2\24\2\0\26\24\1\0\7\24"+
    "\1\0\2\24\1\0\2\24\1\0\2\24\2\0\1\46\1\0\5\46"+
    "\4\0\2\46\2\0\3\46\3\0\1\46\7\0\4\24\1\0\1\24"+
    "\7\0\12\47\2\46\3\24\1\46\13\0\3\46\1\0\11\24\1\0"+
    "\3\24\1\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24\2\0"+
    "\1\46\1\24\10\46\1\0\3\46\1\0\3\46\2\0\1\24\17\0"+
    "\2\24\2\46\2\0\12\47\21\0\3\46\1\0\10\24\2\0\2\24"+
    "\2\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24\2\0\1\46"+
    "\1\24\7\46\2\0\2\46\2\0\3\46\10\0\2\46\4\0\2\24"+
    "\1\0\3\24\2\46\2\0\12\47\1\0\1\24\20\0\1\46\1\24"+
    "\1\0\6\24\3\0\3\24\1\0\4\24\3\0\2\24\1\0\1\24"+
    "\1\0\2\24\3\0\2\24\3\0\3\24\3\0\14\24\4\0\5\46"+
    "\3\0\3\46\1\0\4\46\2\0\1\24\6\0\1\46\16\0\12\47"+
    "\21\0\3\46\1\0\10\24\1\0\3\24\1\0\27\24\1\0\12\24"+
    "\1\0\5\24\3\0\1\24\7\46\1\0\3\46\1\0\4\46\7\0"+
    "\2\46\1\0\2\24\6\0\2\24\2\46\2\0\12\47\22\0\2\46"+
    "\1\0\10\24\1\0\3\24\1\0\27\24\1\0\12\24\1\0\5\24"+
    "\2\0\1\46\1\24\7\46\1\0\3\46\1\0\4\46\7\0\2\46"+
    "\7\0\1\24\1\0\2\24\2\46\2\0\12\47\1\0\2\24\17\0"+
    "\2\46\1\0\10\24\1\0\3\24\1\0\51\24\2\0\1\24\7\46"+
    "\1\0\3\46\1\0\4\46\1\24\10\0\1\46\10\0\2\24\2\46"+
    "\2\0\12\47\12\0\6\24\2\0\2\46\1\0\22\24\3\0\30\24"+
    "\1\0\11\24\1\0\1\24\2\0\7\24\3\0\1\46\4\0\6\46"+
    "\1\0\1\46\1\0\10\46\22\0\2\46\15\0\60\24\1\46\2\24"+
    "\7\46\5\0\7\24\10\46\1\0\12\47\47\0\2\24\1\0\1\24"+
    "\2\0\2\24\1\0\1\24\2\0\1\24\6\0\4\24\1\0\7\24"+
    "\1\0\3\24\1\0\1\24\1\0\1\24\2\0\2\24\1\0\4\24"+
    "\1\46\2\24\6\46\1\0\2\46\1\24\2\0\5\24\1\0\1\24"+
    "\1\0\6\46\2\0\12\47\2\0\4\24\40\0\1\24\12\0\2\46"+
    "\13\0\2\46\6\0\12\47\13\0\1\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\10\24\1\0\44\24\4\0\24\46\1\0\2\46\5\24"+
    "\13\46\1\0\44\46\11\0\1\46\71\0\53\24\24\46\1\24\12\47"+
    "\6\0\6\24\4\46\4\24\3\46\1\24\3\46\2\24\7\46\3\24"+
    "\4\46\15\24\14\46\1\24\1\46\12\47\4\46\2\0\46\24\1\0"+
    "\1\24\5\0\1\24\2\0\53\24\1\0\u014d\24\1\0\4\24\2\0"+
    "\7\24\1\0\1\24\1\0\4\24\2\0\51\24\1\0\4\24\2\0"+
    "\41\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0\4\24\2\0"+
    "\17\24\1\0\71\24\1\0\4\24\2\0\103\24\2\0\3\46\40\0"+
    "\20\24\20\0\125\24\14\0\u026c\24\2\0\21\24\1\61\32\24\5\0"+
    "\113\24\25\0\15\24\1\0\4\24\3\46\13\0\22\24\3\46\13\0"+
    "\22\24\2\46\14\0\15\24\1\0\3\24\1\0\2\46\14\0\64\24"+
    "\40\46\3\0\1\24\4\0\1\24\1\46\2\0\12\47\41\0\3\46"+
    "\2\0\12\47\6\0\130\24\10\0\51\24\1\46\1\24\5\0\106\24"+
    "\12\0\35\24\3\0\14\46\4\0\14\46\12\0\12\47\36\24\2\0"+
    "\5\24\13\0\54\24\4\0\21\46\7\24\2\46\6\0\12\47\46\0"+
    "\27\24\5\46\4\0\65\24\12\46\1\0\35\46\2\0\1\46\12\47"+
    "\6\0\12\47\15\0\1\24\130\0\5\46\57\24\21\46\7\24\4\0"+
    "\12\47\21\0\11\46\14\0\3\46\36\24\15\46\2\24\12\47\54\24"+
    "\16\46\14\0\44\24\24\46\10\0\12\47\3\0\3\24\12\47\44\24"+
    "\122\0\3\46\1\0\25\46\4\24\1\46\4\24\3\46\2\24\11\0"+
    "\300\24\47\46\25\0\4\46\u0116\24\2\0\6\24\2\0\46\24\2\0"+
    "\6\24\2\0\10\24\1\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\37\24\2\0\65\24\1\0\7\24\1\0\1\24\3\0\3\24\1\0"+
    "\7\24\3\0\4\24\2\0\6\24\4\0\15\24\5\0\3\24\1\0"+
    "\7\24\3\0\13\61\1\0\2\46\13\0\1\25\2\0\2\53\12\0"+
    "\1\72\1\72\5\0\1\61\57\0\1\61\21\0\1\24\15\0\1\24"+
    "\20\0\15\24\63\0\41\46\21\0\1\24\4\0\1\24\2\0\12\24"+
    "\1\0\1\24\3\0\5\24\6\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\0\4\24\1\0\13\24\2\0\4\24\5\0\5\24\4\0\1\24"+
    "\64\0\2\24\u04b5\0\1\42\52\0\1\31\246\0\1\42\127\0\1\31"+
    "\u049b\0\57\24\1\0\57\24\1\0\205\24\6\0\4\24\3\46\2\24"+
    "\14\0\46\24\1\0\1\24\5\0\1\24\2\0\70\24\7\0\1\24"+
    "\17\0\1\46\27\24\11\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\40\46\57\0\1\24\u01d0\0\1\61\2\0\1\46\1\0\2\24\25\0"+
    "\1\46\15\0\6\46\1\0\5\24\5\0\2\24\4\0\126\24\2\0"+
    "\2\46\2\46\3\24\1\46\132\24\1\46\4\24\5\0\51\24\3\0"+
    "\136\24\21\0\33\24\65\0\20\24\u0200\0\u19b6\24\112\0\u51cd\24\63\0"+
    "\u048d\24\103\0\56\24\2\0\u010d\24\3\0\20\24\12\47\2\24\24\0"+
    "\57\24\4\46\1\0\12\46\1\46\31\24\7\0\1\46\106\24\12\0"+
    "\2\46\45\0\11\24\2\0\147\24\2\0\4\24\1\0\4\24\14\0"+
    "\13\24\115\0\12\24\1\46\3\24\1\46\4\24\1\46\27\24\5\46"+
    "\30\0\64\24\14\0\2\46\62\24\21\46\13\0\12\47\6\0\22\46"+
    "\6\24\3\0\1\24\4\0\12\47\34\24\10\46\2\0\27\24\15\46"+
    "\14\0\35\24\3\0\4\46\57\24\16\46\16\0\1\24\12\47\46\0"+
    "\51\24\16\46\11\0\3\24\1\46\10\24\2\46\2\0\12\47\6\0"+
    "\27\24\3\0\1\24\1\46\4\0\60\24\1\46\1\24\3\46\2\24"+
    "\2\46\5\24\2\46\1\24\1\46\1\24\30\0\3\24\2\0\13\24"+
    "\5\46\2\0\3\24\2\46\12\0\6\24\2\0\6\24\2\0\6\24"+
    "\11\0\7\24\1\0\7\24\221\0\43\24\10\46\1\0\2\46\2\0"+
    "\12\47\6\0\u2ba4\24\14\0\27\24\4\0\61\24\u2104\0\u016e\24\2\0"+
    "\152\24\46\0\7\24\14\0\5\24\5\0\1\24\1\46\12\24\1\0"+
    "\15\24\1\0\5\24\1\0\1\24\1\0\2\24\1\0\2\24\1\0"+
    "\154\24\41\0\u016b\24\22\0\100\24\2\0\66\24\50\0\14\24\4\0"+
    "\20\46\20\0\7\46\111\0\5\24\1\0\207\24\6\0\1\51\14\0"+
    "\12\47\7\0\32\24\6\0\32\24\3\0\1\46\7\0\131\24\3\0"+
    "\6\24\2\0\6\24\2\0\6\24\2\0\3\24\43\0\14\24\1\0"+
    "\32\24\1\0\23\24\1\0\2\24\1\0\17\24\2\0\16\24\42\0"+
    "\173\24\u0102\0\1\46\202\0\35\24\3\0\61\24\57\0\37\24\21\0"+
    "\21\24\1\0\10\24\66\0\36\24\2\0\44\24\4\0\10\24\60\0"+
    "\236\24\2\0\12\47\u0356\0\6\24\2\0\1\24\1\0\54\24\1\0"+
    "\2\24\3\0\1\24\2\0\27\24\252\0\26\24\12\0\32\24\106\0"+
    "\70\24\6\0\2\24\100\0\1\24\3\46\1\0\2\46\5\0\4\46"+
    "\4\24\1\0\3\24\1\0\33\24\4\0\3\46\4\0\1\46\40\0"+
    "\35\24\203\0\66\24\12\0\26\24\12\0\23\24\215\0\111\24\u03b7\0"+
    "\3\46\65\24\17\46\37\0\12\47\20\0\3\46\55\24\13\46\25\0"+
    "\31\24\7\0\12\47\6\0\3\46\44\24\16\46\1\0\12\47\100\0"+
    "\3\46\60\24\16\46\4\24\13\0\12\47\u04a6\0\53\24\15\46\10\0"+
    "\12\47\u0936\0\u036f\24\u0c91\0\u042f\24\u33d1\0\u0239\24\u04c7\0\105\24\13\0"+
    "\1\24\56\46\20\0\4\46\15\24\u4060\0\2\24\u2163\0\5\46\3\0"+
    "\6\46\10\0\10\46\2\0\7\46\36\0\4\46\224\0\3\46\u01bb\0"+
    "\125\24\1\0\107\24\1\0\2\24\2\0\1\24\2\0\2\24\2\0"+
    "\4\24\1\0\14\24\1\0\1\24\1\0\7\24\1\0\101\24\1\0"+
    "\4\24\2\0\10\24\1\0\7\24\1\0\34\24\1\0\4\24\1\0"+
    "\5\24\1\0\1\24\3\0\7\24\1\0\u0154\24\2\0\31\24\1\0"+
    "\31\24\1\0\37\24\1\0\31\24\1\0\37\24\1\0\31\24\1\0"+
    "\37\24\1\0\31\24\1\0\37\24\1\0\31\24\1\0\10\24\2\0"+
    "\62\47\u1600\0\4\24\1\0\33\24\1\0\2\24\1\0\1\24\2\0"+
    "\1\24\1\0\12\24\1\0\4\24\1\0\1\24\1\0\1\24\6\0"+
    "\1\24\4\0\1\24\1\0\1\24\1\0\1\24\1\0\3\24\1\0"+
    "\2\24\1\0\1\24\2\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\1\24\2\0\4\24\1\0"+
    "\7\24\1\0\4\24\1\0\4\24\1\0\1\24\1\0\12\24\1\0"+
    "\21\24\5\0\3\24\1\0\5\24\1\0\21\24\u047d\0\1\42\116\0"+
    "\1\42\303\0\2\42\1\0\1\42\73\0\1\42\1\31\2\0\5\31"+
    "\1\43\13\31\2\0\1\43\u015e\0\4\42\1\0\1\42\2\0\5\42"+
    "\1\0\1\42\2\0\1\43\5\0\1\42\3\0\2\42\1\43\1\0"+
    "\2\43\7\0\1\43\1\0\1\43\1\0\1\43\5\0\1\42\33\0"+
    "\1\42\u09b0\0\ua6d7\24\51\0\u1035\24\13\0\336\24\u3fe2\0\u021e\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\46\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\13\2\1\3\1\1\1\2\1\4\2\1"+
    "\2\3\1\2\1\5\1\6\1\7\1\10\1\2\1\1"+
    "\3\3\1\1\3\2\1\3\2\2\1\0\2\2\1\11"+
    "\20\2\1\4\1\0\1\5\1\0\2\6\1\0\1\3"+
    "\1\6\1\5\1\0\1\3\1\0\1\5\1\2\1\0"+
    "\2\5\1\2\1\12\1\0\1\3\1\5\1\6\1\12"+
    "\3\2\2\13\1\2\2\0\1\11\1\14\1\11\3\2"+
    "\1\15\7\2\1\16\7\2\1\17\5\2\2\20\2\2"+
    "\1\21\2\2\1\22\2\2\2\23\5\2\2\0\1\2"+
    "\2\0\2\2\1\24\1\25\1\26\1\2\1\17\3\0"+
    "\1\27\1\26\2\0\1\30\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\76\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\76\0\76"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u041e\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u05d0\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u07c0"+
    "\0\u13dc\0\u141a\0\u1458\0\u08b8\0\u1496\0\u14d4\0\u1512\0\u14d4"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u0ba0\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u16c4\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1838\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1ae2\0\u1f3e\0\u1f7c\0\u1c18"+
    "\0\u1c94\0\u1fba\0\u1ff8\0\u1dca\0\u2036\0\u2074\0\u20b2\0\u1f7c"+
    "\0\u1ff8\0\u20f0\0\u212e\0\u216c\0\u21aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\12\1\13\2\4\1\14\2\4\1\15\4\4"+
    "\1\16\1\4\1\17\1\20\1\21\1\22\1\23\1\2"+
    "\1\7\1\16\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\20\1\33\1\34\1\35\1\16\1\36"+
    "\1\16\1\37\1\40\2\2\1\41\2\4\1\42\1\36"+
    "\1\16\1\43\3\2\1\16\1\44\77\0\1\4\1\45"+
    "\7\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\4\6\0\11\4\1\46\12\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\4\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\4\4\2\0"+
    "\1\4\6\0\2\4\1\5\1\50\5\4\1\46\10\4"+
    "\1\51\1\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\1\50\3\4\2\0\1\4\6\0\2\4\1\52\1\53"+
    "\5\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\1\53\3\4\2\0\1\4\6\0\1\54\3\4"+
    "\1\55\4\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\55\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\1\4\1\56"+
    "\3\4\1\57\3\4\1\46\12\4\1\47\1\4\1\0"+
    "\1\20\4\0\1\4\1\47\2\0\1\4\5\0\2\20"+
    "\1\0\1\20\7\0\3\4\1\57\2\0\1\4\6\0"+
    "\4\4\1\60\2\4\1\61\1\4\1\46\12\4\1\47"+
    "\1\4\1\0\1\20\4\0\1\60\1\47\2\0\1\4"+
    "\5\0\2\20\1\0\1\20\7\0\4\4\2\0\1\61"+
    "\6\0\2\4\1\62\5\4\1\63\1\46\12\4\1\47"+
    "\1\4\1\0\1\20\4\0\1\4\1\47\2\0\1\4"+
    "\5\0\2\20\1\0\1\20\7\0\4\4\2\0\1\4"+
    "\6\0\4\4\1\64\4\4\1\65\12\4\1\47\1\4"+
    "\1\0\1\20\4\0\1\64\1\47\2\0\1\4\5\0"+
    "\2\20\1\0\1\20\7\0\4\4\2\0\1\4\6\0"+
    "\1\66\3\4\1\67\4\4\1\46\2\4\1\70\7\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\67\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\4\4\2\0"+
    "\1\4\6\0\11\4\1\46\5\4\1\71\1\4\1\72"+
    "\2\4\1\47\1\4\1\0\1\20\4\0\1\4\1\47"+
    "\2\0\1\4\5\0\2\20\1\0\1\20\7\0\4\4"+
    "\2\0\1\4\32\0\1\16\10\0\3\16\11\0\5\16"+
    "\7\0\2\16\4\0\2\16\30\0\1\73\2\0\1\74"+
    "\14\0\1\74\3\0\1\74\11\0\1\74\10\0\24\20"+
    "\1\0\1\20\1\0\1\20\4\0\1\20\3\0\1\20"+
    "\5\0\2\20\1\0\1\20\7\0\4\20\2\0\1\20"+
    "\40\0\1\74\14\0\1\74\3\0\1\74\11\0\1\74"+
    "\20\0\1\75\1\0\1\75\20\0\3\76\1\75\1\77"+
    "\1\75\13\0\1\76\45\0\1\16\5\0\1\100\2\101"+
    "\1\102\1\24\1\16\7\0\1\100\1\0\2\16\1\103"+
    "\1\102\1\16\7\0\1\103\1\16\4\0\2\16\25\0"+
    "\1\16\5\0\1\104\2\105\1\106\1\16\1\25\1\107"+
    "\6\0\1\104\1\0\2\16\1\110\1\106\1\16\7\0"+
    "\1\110\1\16\4\0\2\16\1\0\11\4\1\46\12\4"+
    "\1\47\1\4\1\0\1\20\2\0\1\104\1\105\1\111"+
    "\1\112\1\0\1\107\1\26\5\0\1\20\1\113\1\0"+
    "\1\20\1\0\1\104\1\105\4\0\4\4\1\104\1\0"+
    "\1\4\51\0\1\31\76\0\1\32\31\0\10\20\1\114"+
    "\1\20\1\114\11\20\1\0\1\20\1\0\1\20\3\0"+
    "\1\76\1\115\1\76\1\75\1\77\1\114\5\0\2\20"+
    "\1\0\1\20\2\0\1\76\4\0\4\20\2\0\1\20"+
    "\6\0\24\116\1\0\1\116\1\0\1\117\4\0\1\116"+
    "\3\0\1\116\4\0\1\116\2\117\1\0\1\116\7\0"+
    "\4\116\2\0\1\116\6\0\24\20\1\16\1\20\1\0"+
    "\1\20\4\0\1\20\3\16\1\20\5\0\2\20\1\0"+
    "\1\35\4\16\3\0\4\20\2\16\1\20\3\0\2\16"+
    "\11\0\1\75\1\0\1\75\11\0\1\16\6\0\2\76"+
    "\1\120\1\121\1\122\1\75\10\0\3\16\1\120\1\16"+
    "\7\0\2\16\4\0\2\16\1\0\24\116\1\16\1\116"+
    "\1\0\1\117\4\0\1\116\3\16\1\116\4\0\1\116"+
    "\2\117\1\0\1\123\4\16\3\0\4\116\2\16\1\116"+
    "\3\0\2\16\60\0\1\2\16\0\2\4\1\52\1\53"+
    "\5\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\1\53\1\124\2\4\2\0\1\4\6\0\1\4"+
    "\1\56\3\4\1\57\3\4\1\46\12\4\1\47\1\4"+
    "\1\0\1\20\4\0\1\4\1\47\2\0\1\4\5\0"+
    "\2\20\1\0\1\20\7\0\1\4\1\125\1\4\1\57"+
    "\2\0\1\4\6\0\4\4\1\60\2\4\1\61\1\4"+
    "\1\46\12\4\1\47\1\4\1\0\1\20\4\0\1\60"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\126\6\0\24\127\1\16\1\127\1\0"+
    "\1\127\4\0\1\127\3\16\1\127\5\0\2\127\1\0"+
    "\1\130\4\16\3\0\4\127\2\16\1\127\3\0\2\16"+
    "\1\0\2\4\1\131\6\4\1\46\12\4\1\47\1\4"+
    "\1\0\1\20\4\0\1\4\1\47\2\0\1\4\5\0"+
    "\2\20\1\0\1\20\7\0\4\4\2\0\1\4\6\0"+
    "\11\4\1\46\12\4\1\132\1\4\1\0\1\20\4\0"+
    "\1\4\1\132\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\4\17\0\1\133\64\0\2\4"+
    "\2\134\5\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\1\134\3\4\2\0\1\4\6\0\3\4"+
    "\1\135\2\4\1\135\2\4\1\46\10\4\1\51\1\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\4\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\1\135\3\4"+
    "\2\0\1\4\6\0\2\4\1\136\1\134\5\4\1\46"+
    "\1\137\11\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\137\5\0\2\20\1\0\1\20\7\0"+
    "\1\134\3\4\2\0\1\4\6\0\2\4\1\140\1\53"+
    "\5\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\1\53\3\4\2\0\1\4\6\0\1\54\4\4"+
    "\1\141\1\142\2\4\1\46\12\4\1\47\1\4\1\0"+
    "\1\20\4\0\1\4\1\47\2\0\1\4\5\0\2\20"+
    "\1\0\1\20\7\0\3\4\1\141\2\0\1\4\6\0"+
    "\1\54\3\4\1\55\4\4\1\46\1\143\11\4\1\47"+
    "\1\4\1\0\1\20\4\0\1\55\1\47\2\0\1\143"+
    "\5\0\2\20\1\0\1\20\7\0\4\4\2\0\1\4"+
    "\6\0\1\4\1\144\7\4\1\46\3\4\1\145\6\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\4\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\4\4\2\0"+
    "\1\4\6\0\1\4\1\144\3\4\1\57\3\4\1\46"+
    "\12\4\1\47\1\4\1\0\1\20\4\0\1\4\1\47"+
    "\2\0\1\4\5\0\2\20\1\0\1\20\7\0\3\4"+
    "\1\57\2\0\1\4\6\0\4\4\1\146\2\4\1\147"+
    "\1\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\146\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\147\6\0\4\4\1\146\2\4"+
    "\1\61\1\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\146\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\61\6\0\1\150\1\4"+
    "\1\151\6\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\2\4\1\151"+
    "\5\4\1\63\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\4\4\1\152"+
    "\4\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\152\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\4\6\0\4\4\1\152\4\4"+
    "\1\65\12\4\1\132\1\4\1\0\1\20\4\0\1\152"+
    "\1\132\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\1\66\1\4\1\153\2\4"+
    "\1\154\3\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\3\4\1\154\2\0\1\4\6\0\4\4"+
    "\1\155\4\4\1\46\2\4\1\156\3\4\1\157\3\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\155\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\4\4\2\0"+
    "\1\4\6\0\1\66\3\4\1\155\4\4\1\46\2\4"+
    "\1\70\7\4\1\47\1\4\1\0\1\20\4\0\1\155"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\46\5\4\1\71"+
    "\1\4\1\160\2\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\4\6\0\2\4\1\161\6\4"+
    "\1\46\1\4\1\162\5\4\1\160\2\4\1\47\1\4"+
    "\1\0\1\20\4\0\1\4\1\47\2\0\1\4\5\0"+
    "\2\20\1\0\1\20\7\0\2\4\1\162\1\4\2\0"+
    "\1\4\35\0\1\73\56\0\1\75\1\0\1\75\23\0"+
    "\1\75\1\0\1\75\45\0\1\75\1\0\1\75\23\0"+
    "\1\75\1\77\1\75\74\0\1\77\64\0\1\30\2\0"+
    "\1\30\76\0\1\100\14\0\1\100\3\0\1\100\11\0"+
    "\1\100\34\0\1\16\5\0\1\100\2\0\3\16\7\0"+
    "\1\100\1\0\2\16\1\103\2\16\7\0\1\103\1\16"+
    "\4\0\2\16\25\0\1\16\1\0\1\30\2\0\1\30"+
    "\3\0\3\16\11\0\5\16\7\0\2\16\4\0\2\16"+
    "\27\0\1\27\2\0\1\27\76\0\1\104\14\0\1\104"+
    "\3\0\1\104\11\0\1\104\34\0\1\16\5\0\1\104"+
    "\2\0\3\16\7\0\1\104\1\0\2\16\1\110\2\16"+
    "\7\0\1\110\1\16\4\0\2\16\33\0\1\104\3\105"+
    "\1\0\2\107\6\0\1\104\3\0\1\104\1\105\10\0"+
    "\1\104\34\0\1\16\1\0\1\27\2\0\1\27\3\0"+
    "\3\16\11\0\5\16\7\0\2\16\4\0\2\16\1\0"+
    "\11\4\1\46\12\4\1\47\1\4\1\0\1\20\2\0"+
    "\1\104\1\0\1\4\1\47\2\0\1\4\5\0\1\20"+
    "\1\113\1\0\1\20\1\0\1\104\5\0\4\4\1\104"+
    "\1\0\1\4\17\0\1\133\20\0\1\104\14\0\1\104"+
    "\3\0\1\104\11\0\1\104\10\0\24\20\1\0\1\20"+
    "\1\27\1\20\1\0\1\27\2\0\1\20\3\0\1\20"+
    "\5\0\2\20\1\0\1\20\7\0\4\20\2\0\1\20"+
    "\6\0\10\20\1\114\1\20\1\114\11\20\1\0\1\20"+
    "\1\0\1\20\4\0\1\20\1\0\1\75\1\0\1\114"+
    "\5\0\2\20\1\0\1\20\7\0\4\20\2\0\1\20"+
    "\6\0\10\20\1\114\1\20\1\114\11\20\1\0\1\20"+
    "\1\0\1\20\4\0\1\20\1\0\1\75\1\77\1\114"+
    "\5\0\2\20\1\0\1\20\7\0\4\20\2\0\1\20"+
    "\6\0\24\116\1\0\1\116\1\0\1\116\4\0\1\116"+
    "\3\0\1\116\4\0\3\116\1\0\1\116\7\0\4\116"+
    "\2\0\1\116\16\0\1\75\1\0\1\75\11\0\1\16"+
    "\10\0\1\16\1\121\1\122\1\75\10\0\5\16\7\0"+
    "\2\16\4\0\2\16\11\0\1\75\1\0\1\75\11\0"+
    "\1\16\10\0\1\16\1\121\1\16\1\75\10\0\5\16"+
    "\7\0\2\16\4\0\2\16\25\0\1\16\10\0\2\16"+
    "\1\122\11\0\5\16\7\0\2\16\4\0\2\16\1\0"+
    "\24\116\1\16\1\116\1\0\1\116\4\0\1\116\3\16"+
    "\1\116\4\0\3\116\1\0\1\123\4\16\3\0\4\116"+
    "\2\16\1\116\3\0\2\16\1\0\11\4\1\46\12\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\4\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\1\4\1\163"+
    "\2\4\2\0\1\4\6\0\11\4\1\46\1\164\11\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\4\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\4\4\2\0"+
    "\1\4\6\0\4\4\1\146\2\4\1\61\1\4\1\46"+
    "\12\4\1\47\1\4\1\0\1\20\4\0\1\146\1\47"+
    "\2\0\1\4\5\0\2\20\1\0\1\20\7\0\4\4"+
    "\2\0\1\165\6\0\24\127\1\0\1\127\1\0\1\127"+
    "\4\0\1\127\3\0\1\127\5\0\2\127\1\0\1\127"+
    "\7\0\4\127\2\0\1\127\6\0\2\4\1\166\1\167"+
    "\5\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\1\167\3\4\2\0\1\4\17\0\1\133\13\0"+
    "\1\170\34\0\1\170\24\0\1\133\13\0\1\171\34\0"+
    "\1\171\13\0\3\4\1\135\2\4\1\135\2\4\1\46"+
    "\12\4\1\47\1\4\1\0\1\20\4\0\1\4\1\47"+
    "\2\0\1\4\5\0\2\20\1\0\1\20\7\0\1\135"+
    "\3\4\2\0\1\4\6\0\2\4\1\136\1\134\5\4"+
    "\1\46\1\172\11\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\172\5\0\2\20\1\0\1\20"+
    "\7\0\1\134\3\4\2\0\1\4\6\0\11\4\1\46"+
    "\1\173\11\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\173\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\5\4\1\141\1\142\2\4"+
    "\1\46\12\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\3\4\1\141\2\0\1\4\6\0\6\4\1\142\2\4"+
    "\1\46\12\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\46\1\143\1\174"+
    "\10\4\1\47\1\4\1\0\1\20\4\0\1\4\1\47"+
    "\2\0\1\143\5\0\2\20\1\0\1\20\7\0\2\4"+
    "\1\174\1\4\2\0\1\4\6\0\1\4\1\144\7\4"+
    "\1\46\3\4\1\175\6\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\11\4\1\46"+
    "\3\4\1\175\1\176\5\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\4\4\1\146"+
    "\2\4\1\177\1\4\1\46\12\4\1\47\1\4\1\0"+
    "\1\20\4\0\1\146\1\47\2\0\1\4\5\0\2\20"+
    "\1\0\1\20\7\0\4\4\2\0\1\177\6\0\7\4"+
    "\1\177\1\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\177\6\0\1\200\10\4"+
    "\1\201\12\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\1\200\1\4\1\151\6\4"+
    "\1\46\12\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\2\4\1\153\1\4\1\202"+
    "\4\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\202\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\4\6\0\2\4\1\153\2\4"+
    "\1\154\3\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\3\4\1\154\2\0\1\4\6\0\4\4"+
    "\1\155\4\4\1\46\2\4\1\203\3\4\1\204\3\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\155\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\4\4\2\0"+
    "\1\4\6\0\11\4\1\46\2\4\1\203\7\4\1\47"+
    "\1\4\1\0\1\20\4\0\1\4\1\47\2\0\1\4"+
    "\5\0\2\20\1\0\1\20\7\0\4\4\2\0\1\4"+
    "\6\0\11\4\1\46\6\4\1\204\1\205\2\4\1\47"+
    "\1\4\1\0\1\20\4\0\1\4\1\47\2\0\1\4"+
    "\5\0\2\20\1\0\1\20\7\0\4\4\2\0\1\4"+
    "\6\0\2\4\1\206\6\4\1\46\1\4\1\162\5\4"+
    "\1\160\2\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\2\4\1\162\1\4\2\0\1\4\6\0\2\4\1\206"+
    "\1\207\5\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\1\207\3\4\2\0\1\4\6\0\11\4"+
    "\1\46\1\4\1\162\10\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\2\4\1\162\1\4\2\0\1\4\6\0"+
    "\11\4\1\46\1\210\11\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\11\4\1\46"+
    "\12\4\1\47\1\4\1\0\1\20\4\0\1\4\1\47"+
    "\2\0\1\4\5\0\2\20\1\0\1\20\7\0\4\4"+
    "\1\211\1\0\1\4\6\0\4\4\1\146\2\4\1\61"+
    "\1\4\1\46\12\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\146\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\61\1\212\5\0\2\4\1\166"+
    "\1\50\5\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\1\50\3\4\2\0\1\4\6\0\2\4"+
    "\1\134\1\213\5\4\1\46\12\4\1\47\1\4\1\0"+
    "\1\20\4\0\1\4\1\47\2\0\1\4\5\0\2\20"+
    "\1\0\1\20\7\0\1\213\3\4\2\0\1\4\32\0"+
    "\1\214\1\170\7\0\1\214\24\0\1\170\37\0\1\214"+
    "\1\215\7\0\1\214\24\0\1\215\13\0\11\4\1\46"+
    "\1\216\11\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\216\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\46\1\216\4\4"+
    "\1\217\4\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\216\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\46\1\4\1\174"+
    "\10\4\1\47\1\4\1\0\1\20\4\0\1\4\1\47"+
    "\2\0\1\4\5\0\2\20\1\0\1\20\7\0\2\4"+
    "\1\174\1\4\2\0\1\4\6\0\11\4\1\46\3\4"+
    "\1\175\1\220\5\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\4\6\0\11\4\1\46\4\4"+
    "\1\220\5\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\1\200\10\4\1\221\12\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\4\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\4\4\2\0"+
    "\1\4\6\0\11\4\1\221\12\4\1\132\1\4\1\0"+
    "\1\20\4\0\1\4\1\132\2\0\1\4\5\0\2\20"+
    "\1\0\1\20\7\0\4\4\2\0\1\4\6\0\4\4"+
    "\1\202\4\4\1\46\12\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\202\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\11\4\1\46"+
    "\6\4\1\204\1\222\2\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\4\4\2\0\1\4\6\0\11\4\1\46"+
    "\1\4\1\223\5\4\1\222\2\4\1\47\1\4\1\0"+
    "\1\20\4\0\1\4\1\47\2\0\1\4\5\0\2\20"+
    "\1\0\1\20\7\0\2\4\1\223\1\4\2\0\1\4"+
    "\6\0\2\4\1\206\1\224\5\4\1\46\12\4\1\47"+
    "\1\4\1\0\1\20\4\0\1\4\1\47\2\0\1\4"+
    "\5\0\2\20\1\0\1\20\7\0\1\224\3\4\2\0"+
    "\1\4\6\0\3\4\1\224\5\4\1\46\12\4\1\47"+
    "\1\4\1\0\1\20\4\0\1\4\1\47\2\0\1\4"+
    "\5\0\2\20\1\0\1\20\7\0\1\224\3\4\2\0"+
    "\1\4\6\0\11\4\1\46\12\4\1\47\1\4\1\0"+
    "\1\20\4\0\1\4\1\47\2\0\1\4\5\0\2\20"+
    "\1\0\1\20\7\0\2\4\1\164\1\4\1\211\1\0"+
    "\1\4\74\0\1\225\6\0\57\226\2\0\11\226\1\0"+
    "\3\226\1\0\2\4\1\50\1\213\5\4\1\46\12\4"+
    "\1\47\1\4\1\0\1\20\4\0\1\4\1\47\2\0"+
    "\1\4\5\0\2\20\1\0\1\20\7\0\1\213\3\4"+
    "\2\0\1\4\26\0\1\227\55\0\11\4\1\46\1\216"+
    "\4\4\1\230\4\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\216\5\0\2\20\1\0\1\20"+
    "\7\0\4\4\2\0\1\4\6\0\11\4\1\46\5\4"+
    "\1\230\4\4\1\47\1\4\1\0\1\20\4\0\1\4"+
    "\1\47\2\0\1\4\5\0\2\20\1\0\1\20\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\46\1\4\1\231"+
    "\5\4\1\222\2\4\1\47\1\4\1\0\1\20\4\0"+
    "\1\4\1\47\2\0\1\4\5\0\2\20\1\0\1\20"+
    "\7\0\2\4\1\231\1\4\2\0\1\4\6\0\11\4"+
    "\1\46\1\4\1\231\10\4\1\47\1\4\1\0\1\20"+
    "\4\0\1\4\1\47\2\0\1\4\5\0\2\20\1\0"+
    "\1\20\7\0\2\4\1\231\1\4\2\0\1\4\5\0"+
    "\45\232\1\0\10\232\4\0\5\232\1\233\2\232\3\0"+
    "\46\232\1\0\10\232\4\0\5\232\1\0\2\232\3\0"+
    "\1\232\21\0\1\227\1\234\53\0\57\235\2\0\11\235"+
    "\1\0\3\235\45\232\1\0\10\232\4\0\5\232\1\226"+
    "\2\232\3\0\1\232\22\0\1\234\53\0\57\235\3\0"+
    "\10\235\1\0\3\235";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\5\1\2\11\16\1\1\0"+
    "\24\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\4\1\1\0\12\1\2\0"+
    "\55\1\2\0\1\1\2\0\7\1\3\0\2\1\2\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzEnglishLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2950) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 26: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 27: break;
          case 3: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 28: break;
          case 4: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 29: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 30: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 31: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 32: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 33: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 34: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 35: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 36: break;
          case 12: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 37: break;
          case 13: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 38: break;
          case 14: 
            { return JflexBuzzTokenizer.NO;
            }
          case 39: break;
          case 15: 
            { return JflexBuzzTokenizer.YES;
            }
          case 40: break;
          case 16: 
            { return JflexBuzzTokenizer.APOSTROPHE_NT;
            }
          case 41: break;
          case 17: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 42: break;
          case 18: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 43: break;
          case 19: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 44: break;
          case 20: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 45: break;
          case 21: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 46: break;
          case 22: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 47: break;
          case 23: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 48: break;
          case 24: 
            { return JflexBuzzTokenizer.APOSTROPHE_NTVE;
            }
          case 49: break;
          case 25: 
            { return JflexBuzzTokenizer.URL;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

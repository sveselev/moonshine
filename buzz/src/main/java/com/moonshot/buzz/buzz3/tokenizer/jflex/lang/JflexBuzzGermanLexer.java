/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.buzz3.tokenizer.jflex.lang;

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


public final class JflexBuzzGermanLexer implements JflexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\62\1\74\1\74\1\61\22\0\1\63\1\46\1\55"+
    "\1\60\1\75\2\55\1\40\1\42\1\41\1\36\2\55\1\57\1\76"+
    "\1\71\3\51\1\32\4\51\1\52\1\51\1\70\1\35\1\31\1\56"+
    "\1\34\1\47\1\77\1\3\1\26\1\20\1\11\1\15\1\6\1\7"+
    "\1\4\1\16\1\24\1\21\1\17\1\1\1\12\1\5\1\43\1\26"+
    "\1\25\1\14\1\30\1\2\1\23\1\10\1\26\1\22\1\26\1\42"+
    "\1\73\1\41\1\55\1\54\1\0\1\3\1\26\1\20\1\11\1\15"+
    "\1\67\1\7\1\64\1\16\1\24\1\21\1\17\1\1\1\12\1\37"+
    "\1\13\1\26\1\25\1\66\1\65\1\2\1\23\1\72\1\26\1\22"+
    "\1\26\1\0\1\55\1\0\1\55\6\0\1\74\32\0\1\63\11\0"+
    "\1\26\11\0\1\27\1\26\1\0\1\50\2\0\1\26\5\0\27\26"+
    "\1\0\37\26\1\0\u01ca\26\4\0\14\26\16\0\5\26\7\0\1\26"+
    "\1\0\1\26\21\0\160\50\5\26\1\0\2\26\2\0\4\26\10\0"+
    "\1\26\1\0\3\26\1\0\1\26\1\0\24\26\1\0\123\26\1\0"+
    "\213\26\1\0\7\50\236\26\11\0\46\26\2\0\1\26\7\0\47\26"+
    "\11\0\55\50\1\50\1\50\1\0\2\50\1\0\2\50\1\0\1\50"+
    "\10\0\33\26\5\0\3\26\2\50\33\0\13\50\5\0\53\26\25\50"+
    "\12\51\4\0\2\26\1\50\143\26\1\0\1\26\7\50\2\0\6\50"+
    "\2\26\2\50\1\0\4\50\2\26\12\51\3\26\2\0\1\26\20\0"+
    "\1\26\1\50\36\26\33\50\2\0\131\26\13\50\1\26\16\0\12\51"+
    "\41\26\11\50\2\26\4\0\1\26\5\0\26\26\4\50\1\26\11\50"+
    "\1\26\3\50\1\26\5\50\22\0\31\26\3\50\104\0\1\26\1\0"+
    "\13\26\67\0\33\50\1\0\4\50\66\26\3\50\1\26\22\50\1\26"+
    "\7\50\12\26\2\50\2\0\12\51\1\0\7\26\1\0\7\26\1\0"+
    "\3\50\1\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26\1\0"+
    "\1\26\3\0\4\26\2\0\1\50\1\26\7\50\2\0\2\50\2\0"+
    "\3\50\1\26\10\0\1\50\4\0\2\26\1\0\3\26\2\50\2\0"+
    "\12\51\2\26\17\0\3\50\1\0\6\26\4\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\50"+
    "\1\0\5\50\4\0\2\50\2\0\3\50\3\0\1\50\7\0\4\26"+
    "\1\0\1\26\7\0\12\51\2\50\3\26\1\50\13\0\3\50\1\0"+
    "\11\26\1\0\3\26\1\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\5\26\2\0\1\50\1\26\10\50\1\0\3\50\1\0\3\50\2\0"+
    "\1\26\17\0\2\26\2\50\2\0\12\51\21\0\3\50\1\0\10\26"+
    "\2\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26"+
    "\2\0\1\50\1\26\7\50\2\0\2\50\2\0\3\50\10\0\2\50"+
    "\4\0\2\26\1\0\3\26\2\50\2\0\12\51\1\0\1\26\20\0"+
    "\1\50\1\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0\2\26"+
    "\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0\14\26"+
    "\4\0\5\50\3\0\3\50\1\0\4\50\2\0\1\26\6\0\1\50"+
    "\16\0\12\51\21\0\3\50\1\0\10\26\1\0\3\26\1\0\27\26"+
    "\1\0\12\26\1\0\5\26\3\0\1\26\7\50\1\0\3\50\1\0"+
    "\4\50\7\0\2\50\1\0\2\26\6\0\2\26\2\50\2\0\12\51"+
    "\22\0\2\50\1\0\10\26\1\0\3\26\1\0\27\26\1\0\12\26"+
    "\1\0\5\26\2\0\1\50\1\26\7\50\1\0\3\50\1\0\4\50"+
    "\7\0\2\50\7\0\1\26\1\0\2\26\2\50\2\0\12\51\1\0"+
    "\2\26\17\0\2\50\1\0\10\26\1\0\3\26\1\0\51\26\2\0"+
    "\1\26\7\50\1\0\3\50\1\0\4\50\1\26\10\0\1\50\10\0"+
    "\2\26\2\50\2\0\12\51\12\0\6\26\2\0\2\50\1\0\22\26"+
    "\3\0\30\26\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\50"+
    "\4\0\6\50\1\0\1\50\1\0\10\50\22\0\2\50\15\0\60\26"+
    "\1\50\2\26\7\50\5\0\7\26\10\50\1\0\12\51\47\0\2\26"+
    "\1\0\1\26\2\0\2\26\1\0\1\26\2\0\1\26\6\0\4\26"+
    "\1\0\7\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0\2\26"+
    "\1\0\4\26\1\50\2\26\6\50\1\0\2\50\1\26\2\0\5\26"+
    "\1\0\1\26\1\0\6\50\2\0\12\51\2\0\4\26\40\0\1\26"+
    "\12\0\2\50\13\0\2\50\6\0\12\51\13\0\1\50\1\0\1\50"+
    "\1\0\1\50\4\0\2\50\10\26\1\0\44\26\4\0\24\50\1\0"+
    "\2\50\5\26\13\50\1\0\44\50\11\0\1\50\71\0\53\26\24\50"+
    "\1\26\12\51\6\0\6\26\4\50\4\26\3\50\1\26\3\50\2\26"+
    "\7\50\3\26\4\50\15\26\14\50\1\26\1\50\12\51\4\50\2\0"+
    "\46\26\1\0\1\26\5\0\1\26\2\0\53\26\1\0\u014d\26\1\0"+
    "\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0\51\26\1\0"+
    "\4\26\2\0\41\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0"+
    "\4\26\2\0\17\26\1\0\71\26\1\0\4\26\2\0\103\26\2\0"+
    "\3\50\40\0\20\26\20\0\125\26\14\0\u026c\26\2\0\21\26\1\63"+
    "\32\26\5\0\113\26\25\0\15\26\1\0\4\26\3\50\13\0\22\26"+
    "\3\50\13\0\22\26\2\50\14\0\15\26\1\0\3\26\1\0\2\50"+
    "\14\0\64\26\40\50\3\0\1\26\4\0\1\26\1\50\2\0\12\51"+
    "\41\0\3\50\2\0\12\51\6\0\130\26\10\0\51\26\1\50\1\26"+
    "\5\0\106\26\12\0\35\26\3\0\14\50\4\0\14\50\12\0\12\51"+
    "\36\26\2\0\5\26\13\0\54\26\4\0\21\50\7\26\2\50\6\0"+
    "\12\51\46\0\27\26\5\50\4\0\65\26\12\50\1\0\35\50\2\0"+
    "\1\50\12\51\6\0\12\51\15\0\1\26\130\0\5\50\57\26\21\50"+
    "\7\26\4\0\12\51\21\0\11\50\14\0\3\50\36\26\15\50\2\26"+
    "\12\51\54\26\16\50\14\0\44\26\24\50\10\0\12\51\3\0\3\26"+
    "\12\51\44\26\122\0\3\50\1\0\25\50\4\26\1\50\4\26\3\50"+
    "\2\26\11\0\300\26\47\50\25\0\4\50\u0116\26\2\0\6\26\2\0"+
    "\46\26\2\0\6\26\2\0\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\37\26\2\0\65\26\1\0\7\26\1\0\1\26\3\0"+
    "\3\26\1\0\7\26\3\0\4\26\2\0\6\26\4\0\15\26\5\0"+
    "\3\26\1\0\7\26\3\0\13\63\1\0\2\50\13\0\1\27\2\0"+
    "\2\55\12\0\1\74\1\74\5\0\1\63\57\0\1\63\21\0\1\26"+
    "\15\0\1\26\20\0\15\26\63\0\41\50\21\0\1\26\4\0\1\26"+
    "\2\0\12\26\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\1\0\13\26\2\0\4\26\5\0\5\26"+
    "\4\0\1\26\64\0\2\26\u04b5\0\1\44\52\0\1\33\246\0\1\44"+
    "\127\0\1\33\u049b\0\57\26\1\0\57\26\1\0\205\26\6\0\4\26"+
    "\3\50\2\26\14\0\46\26\1\0\1\26\5\0\1\26\2\0\70\26"+
    "\7\0\1\26\17\0\1\50\27\26\11\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\40\50\57\0\1\26\u01d0\0\1\63\2\0\1\50\1\0"+
    "\2\26\25\0\1\50\15\0\6\50\1\0\5\26\5\0\2\26\4\0"+
    "\126\26\2\0\2\50\2\50\3\26\1\50\132\26\1\50\4\26\5\0"+
    "\51\26\3\0\136\26\21\0\33\26\65\0\20\26\u0200\0\u19b6\26\112\0"+
    "\u51cd\26\63\0\u048d\26\103\0\56\26\2\0\u010d\26\3\0\20\26\12\51"+
    "\2\26\24\0\57\26\4\50\1\0\12\50\1\50\31\26\7\0\1\50"+
    "\106\26\12\0\2\50\45\0\11\26\2\0\147\26\2\0\4\26\1\0"+
    "\4\26\14\0\13\26\115\0\12\26\1\50\3\26\1\50\4\26\1\50"+
    "\27\26\5\50\30\0\64\26\14\0\2\50\62\26\21\50\13\0\12\51"+
    "\6\0\22\50\6\26\3\0\1\26\4\0\12\51\34\26\10\50\2\0"+
    "\27\26\15\50\14\0\35\26\3\0\4\50\57\26\16\50\16\0\1\26"+
    "\12\51\46\0\51\26\16\50\11\0\3\26\1\50\10\26\2\50\2\0"+
    "\12\51\6\0\27\26\3\0\1\26\1\50\4\0\60\26\1\50\1\26"+
    "\3\50\2\26\2\50\5\26\2\50\1\26\1\50\1\26\30\0\3\26"+
    "\2\0\13\26\5\50\2\0\3\26\2\50\12\0\6\26\2\0\6\26"+
    "\2\0\6\26\11\0\7\26\1\0\7\26\221\0\43\26\10\50\1\0"+
    "\2\50\2\0\12\51\6\0\u2ba4\26\14\0\27\26\4\0\61\26\u2104\0"+
    "\u016e\26\2\0\152\26\46\0\7\26\14\0\5\26\5\0\1\26\1\50"+
    "\12\26\1\0\15\26\1\0\5\26\1\0\1\26\1\0\2\26\1\0"+
    "\2\26\1\0\154\26\41\0\u016b\26\22\0\100\26\2\0\66\26\50\0"+
    "\14\26\4\0\20\50\20\0\7\50\111\0\5\26\1\0\207\26\6\0"+
    "\1\53\14\0\12\51\7\0\32\26\6\0\32\26\3\0\1\50\7\0"+
    "\131\26\3\0\6\26\2\0\6\26\2\0\6\26\2\0\3\26\43\0"+
    "\14\26\1\0\32\26\1\0\23\26\1\0\2\26\1\0\17\26\2\0"+
    "\16\26\42\0\173\26\u0102\0\1\50\202\0\35\26\3\0\61\26\57\0"+
    "\37\26\21\0\21\26\1\0\10\26\66\0\36\26\2\0\44\26\4\0"+
    "\10\26\60\0\236\26\2\0\12\51\u0356\0\6\26\2\0\1\26\1\0"+
    "\54\26\1\0\2\26\3\0\1\26\2\0\27\26\252\0\26\26\12\0"+
    "\32\26\106\0\70\26\6\0\2\26\100\0\1\26\3\50\1\0\2\50"+
    "\5\0\4\50\4\26\1\0\3\26\1\0\33\26\4\0\3\50\4\0"+
    "\1\50\40\0\35\26\203\0\66\26\12\0\26\26\12\0\23\26\215\0"+
    "\111\26\u03b7\0\3\50\65\26\17\50\37\0\12\51\20\0\3\50\55\26"+
    "\13\50\25\0\31\26\7\0\12\51\6\0\3\50\44\26\16\50\1\0"+
    "\12\51\100\0\3\50\60\26\16\50\4\26\13\0\12\51\u04a6\0\53\26"+
    "\15\50\10\0\12\51\u0936\0\u036f\26\u0c91\0\u042f\26\u33d1\0\u0239\26\u04c7\0"+
    "\105\26\13\0\1\26\56\50\20\0\4\50\15\26\u4060\0\2\26\u2163\0"+
    "\5\50\3\0\6\50\10\0\10\50\2\0\7\50\36\0\4\50\224\0"+
    "\3\50\u01bb\0\125\26\1\0\107\26\1\0\2\26\2\0\1\26\2\0"+
    "\2\26\2\0\4\26\1\0\14\26\1\0\1\26\1\0\7\26\1\0"+
    "\101\26\1\0\4\26\2\0\10\26\1\0\7\26\1\0\34\26\1\0"+
    "\4\26\1\0\5\26\1\0\1\26\3\0\7\26\1\0\u0154\26\2\0"+
    "\31\26\1\0\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0"+
    "\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0\31\26\1\0"+
    "\10\26\2\0\62\51\u1600\0\4\26\1\0\33\26\1\0\2\26\1\0"+
    "\1\26\2\0\1\26\1\0\12\26\1\0\4\26\1\0\1\26\1\0"+
    "\1\26\6\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\1\0\2\26\1\0\1\26\2\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\2\26\1\0\1\26\2\0"+
    "\4\26\1\0\7\26\1\0\4\26\1\0\4\26\1\0\1\26\1\0"+
    "\12\26\1\0\21\26\5\0\3\26\1\0\5\26\1\0\21\26\u047d\0"+
    "\1\44\116\0\1\44\303\0\2\44\1\0\1\44\73\0\1\44\1\33"+
    "\2\0\5\33\1\45\13\33\2\0\1\45\u015e\0\4\44\1\0\1\44"+
    "\2\0\5\44\1\0\1\44\2\0\1\45\5\0\1\44\3\0\2\44"+
    "\1\45\1\0\2\45\7\0\1\45\1\0\1\45\1\0\1\45\5\0"+
    "\1\44\33\0\1\44\u09b0\0\ua6d7\26\51\0\u1035\26\13\0\336\26\u3fe2\0"+
    "\u021e\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\50\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\2\1\3\1\1\1\2\1\4\2\1"+
    "\2\3\1\2\1\5\1\6\1\7\1\10\1\2\1\1"+
    "\3\3\1\1\3\2\1\3\2\2\1\0\2\2\1\11"+
    "\22\2\1\4\1\0\1\5\1\0\2\6\1\0\1\3"+
    "\1\6\1\5\1\0\1\3\1\0\1\5\1\2\1\0"+
    "\2\5\1\2\1\12\1\0\1\3\1\5\1\6\1\12"+
    "\3\2\2\13\1\2\2\0\1\11\1\14\1\11\3\2"+
    "\1\15\20\2\1\16\5\2\2\17\2\2\1\20\2\2"+
    "\1\21\4\2\2\22\5\2\2\0\1\2\2\0\2\2"+
    "\1\23\1\24\1\25\1\26\1\2\1\16\3\0\1\27"+
    "\1\26\2\0\1\30\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\100\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\100"+
    "\0\100\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0480\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u0640\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u0840\0\u1540\0\u1580\0\u15c0\0\u0940\0\u1600"+
    "\0\u1640\0\u1680\0\u1640\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u0e00\0\u1b40\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80"+
    "\0\u1dc0\0\u1e00\0\u1840\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1a40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\u2180\0\u1cc0\0\u21c0\0\u2200\0\u1e00\0\u1e80\0\u1f00"+
    "\0\u2240\0\u2280\0\u2040\0\u22c0\0\u2300\0\u2340\0\u2200\0\u2280"+
    "\0\u2380\0\u23c0\0\u2400\0\u2440";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\12\1\13\4\4\1\14\2\4\1\15\1\4"+
    "\1\16\2\4\1\17\1\4\1\20\1\21\1\22\1\23"+
    "\1\24\1\2\1\7\1\17\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\2\1\21\1\34\1\35\1\36"+
    "\1\17\1\37\1\17\1\40\1\41\2\2\1\42\2\4"+
    "\1\43\1\37\1\17\1\44\3\2\1\17\1\45\101\0"+
    "\1\4\1\46\7\4\1\47\14\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\4\1\50\2\0\1\4\5\0\2\21"+
    "\1\0\1\21\7\0\4\4\2\0\1\4\6\0\11\4"+
    "\1\47\14\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\2\4\1\5\1\51\5\4"+
    "\1\47\12\4\1\52\1\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\1\51\3\4\2\0\1\4\6\0\2\4"+
    "\1\53\1\54\5\4\1\47\14\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\4\1\50\2\0\1\4\5\0\2\21"+
    "\1\0\1\21\7\0\1\54\3\4\2\0\1\4\6\0"+
    "\1\55\3\4\1\56\4\4\1\47\14\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\56\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\4\6\0"+
    "\5\4\1\57\3\4\1\47\3\4\1\60\10\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\3\4\1\57\2\0"+
    "\1\4\6\0\4\4\1\61\2\4\1\62\1\4\1\47"+
    "\14\4\1\50\1\4\1\0\1\21\4\0\1\61\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\4\4"+
    "\2\0\1\62\6\0\2\4\1\63\5\4\1\64\1\47"+
    "\14\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\4\4"+
    "\2\0\1\4\6\0\11\4\1\65\2\4\1\66\11\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\4\4\2\0"+
    "\1\4\6\0\1\67\3\4\1\70\4\4\1\47\4\4"+
    "\1\71\7\4\1\50\1\4\1\0\1\21\4\0\1\70"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\47\2\4\1\72"+
    "\4\4\1\73\4\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\4\1\50\2\0\1\4\5\0\2\21\1\0\1\21"+
    "\7\0\4\4\2\0\1\4\6\0\2\4\1\74\6\4"+
    "\1\47\11\4\1\75\2\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\2\0\1\4\34\0\1\17\10\0"+
    "\3\17\11\0\5\17\7\0\2\17\4\0\2\17\32\0"+
    "\1\76\2\0\1\77\14\0\1\77\3\0\1\77\11\0"+
    "\1\77\10\0\26\21\1\0\1\21\1\0\1\21\4\0"+
    "\1\21\3\0\1\21\5\0\2\21\1\0\1\21\7\0"+
    "\4\21\2\0\1\21\42\0\1\77\14\0\1\77\3\0"+
    "\1\77\11\0\1\77\20\0\1\100\1\0\1\100\22\0"+
    "\3\101\1\100\1\102\1\100\13\0\1\101\47\0\1\17"+
    "\5\0\1\103\2\104\1\105\1\25\1\17\7\0\1\103"+
    "\1\0\2\17\1\106\1\105\1\17\7\0\1\106\1\17"+
    "\4\0\2\17\27\0\1\17\5\0\1\107\2\110\1\111"+
    "\1\17\1\26\1\112\6\0\1\107\1\0\2\17\1\113"+
    "\1\111\1\17\7\0\1\113\1\17\4\0\2\17\1\0"+
    "\11\4\1\47\14\4\1\50\1\4\1\0\1\21\2\0"+
    "\1\107\1\110\1\114\1\115\1\0\1\112\1\27\5\0"+
    "\1\21\1\116\1\0\1\21\1\0\1\107\1\110\4\0"+
    "\4\4\1\107\1\0\1\4\53\0\1\32\100\0\1\33"+
    "\31\0\10\21\1\117\1\21\1\117\13\21\1\0\1\21"+
    "\1\0\1\21\3\0\1\101\1\120\1\101\1\100\1\102"+
    "\1\117\5\0\2\21\1\0\1\21\2\0\1\101\4\0"+
    "\4\21\2\0\1\21\6\0\26\121\1\0\1\121\1\0"+
    "\1\122\4\0\1\121\3\0\1\121\4\0\1\121\2\122"+
    "\1\0\1\121\7\0\4\121\2\0\1\121\6\0\26\21"+
    "\1\17\1\21\1\0\1\21\4\0\1\21\3\17\1\21"+
    "\5\0\2\21\1\0\1\36\4\17\3\0\4\21\2\17"+
    "\1\21\3\0\2\17\11\0\1\100\1\0\1\100\13\0"+
    "\1\17\6\0\2\101\1\123\1\124\1\125\1\100\10\0"+
    "\3\17\1\123\1\17\7\0\2\17\4\0\2\17\1\0"+
    "\26\121\1\17\1\121\1\0\1\122\4\0\1\121\3\17"+
    "\1\121\4\0\1\121\2\122\1\0\1\126\4\17\3\0"+
    "\4\121\2\17\1\121\3\0\2\17\62\0\1\2\16\0"+
    "\2\4\1\53\1\54\5\4\1\47\14\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\4\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\1\54\1\127\2\4\2\0"+
    "\1\4\6\0\5\4\1\57\3\4\1\47\3\4\1\60"+
    "\10\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\1\4"+
    "\1\130\1\4\1\57\2\0\1\4\6\0\4\4\1\61"+
    "\2\4\1\62\1\4\1\47\14\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\61\1\50\2\0\1\4\5\0\2\21"+
    "\1\0\1\21\7\0\4\4\2\0\1\131\6\0\26\132"+
    "\1\17\1\132\1\0\1\132\4\0\1\132\3\17\1\132"+
    "\5\0\2\132\1\0\1\133\4\17\3\0\4\132\2\17"+
    "\1\132\3\0\2\17\1\0\2\4\1\134\6\4\1\47"+
    "\14\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\4\4"+
    "\2\0\1\4\6\0\11\4\1\47\14\4\1\135\1\4"+
    "\1\0\1\21\4\0\1\4\1\135\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\4\17\0"+
    "\1\136\66\0\2\4\2\137\5\4\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\1\137\3\4\2\0"+
    "\1\4\6\0\3\4\1\140\2\4\1\140\2\4\1\47"+
    "\12\4\1\52\1\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\4\1\50\2\0\1\4\5\0\2\21\1\0\1\21"+
    "\7\0\1\140\3\4\2\0\1\4\6\0\2\4\1\141"+
    "\1\137\5\4\1\47\1\142\13\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\4\1\50\2\0\1\142\5\0\2\21"+
    "\1\0\1\21\7\0\1\137\3\4\2\0\1\4\6\0"+
    "\2\4\1\143\1\54\5\4\1\47\14\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\4\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\1\54\3\4\2\0\1\4"+
    "\6\0\1\55\4\4\1\144\1\145\2\4\1\47\14\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\3\4\1\144"+
    "\2\0\1\4\6\0\1\55\3\4\1\56\4\4\1\47"+
    "\1\146\13\4\1\50\1\4\1\0\1\21\4\0\1\56"+
    "\1\50\2\0\1\146\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\5\4\1\57\3\4\1\47"+
    "\3\4\1\147\10\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\4\1\50\2\0\1\4\5\0\2\21\1\0\1\21"+
    "\7\0\3\4\1\57\2\0\1\4\6\0\11\4\1\47"+
    "\3\4\1\147\1\4\1\150\6\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\4\1\50\2\0\1\4\5\0\2\21"+
    "\1\0\1\21\7\0\4\4\2\0\1\4\6\0\4\4"+
    "\1\151\2\4\1\152\1\4\1\47\14\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\151\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\152\6\0"+
    "\4\4\1\151\2\4\1\62\1\4\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\151\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\62"+
    "\6\0\1\153\1\4\1\154\6\4\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\2\4\1\154\5\4\1\64\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\11\4\1\65\2\4\1\155\11\4\1\135\1\4"+
    "\1\0\1\21\4\0\1\4\1\135\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\4\6\0"+
    "\11\4\1\47\2\4\1\155\1\156\10\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\4\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\4\6\0"+
    "\1\67\1\4\1\157\2\4\1\160\3\4\1\47\14\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\3\4\1\160"+
    "\2\0\1\4\6\0\4\4\1\161\4\4\1\47\4\4"+
    "\1\162\3\4\1\163\3\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\161\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\2\0\1\4\6\0\1\67\3\4"+
    "\1\161\4\4\1\47\4\4\1\71\7\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\161\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\4\6\0"+
    "\2\4\1\164\6\4\1\47\2\4\1\165\11\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\11\4\1\47\2\4\1\165\4\4\1\73\4\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\4\4\2\0"+
    "\1\4\6\0\2\4\1\166\6\4\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\2\4\1\166\6\4\1\47\11\4\1\75\2\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\4\4\2\0"+
    "\1\4\37\0\1\76\56\0\1\100\1\0\1\100\25\0"+
    "\1\100\1\0\1\100\45\0\1\100\1\0\1\100\25\0"+
    "\1\100\1\102\1\100\76\0\1\102\66\0\1\31\2\0"+
    "\1\31\100\0\1\103\14\0\1\103\3\0\1\103\11\0"+
    "\1\103\36\0\1\17\5\0\1\103\2\0\3\17\7\0"+
    "\1\103\1\0\2\17\1\106\2\17\7\0\1\106\1\17"+
    "\4\0\2\17\27\0\1\17\1\0\1\31\2\0\1\31"+
    "\3\0\3\17\11\0\5\17\7\0\2\17\4\0\2\17"+
    "\31\0\1\30\2\0\1\30\100\0\1\107\14\0\1\107"+
    "\3\0\1\107\11\0\1\107\36\0\1\17\5\0\1\107"+
    "\2\0\3\17\7\0\1\107\1\0\2\17\1\113\2\17"+
    "\7\0\1\113\1\17\4\0\2\17\35\0\1\107\3\110"+
    "\1\0\2\112\6\0\1\107\3\0\1\107\1\110\10\0"+
    "\1\107\36\0\1\17\1\0\1\30\2\0\1\30\3\0"+
    "\3\17\11\0\5\17\7\0\2\17\4\0\2\17\1\0"+
    "\11\4\1\47\14\4\1\50\1\4\1\0\1\21\2\0"+
    "\1\107\1\0\1\4\1\50\2\0\1\4\5\0\1\21"+
    "\1\116\1\0\1\21\1\0\1\107\5\0\4\4\1\107"+
    "\1\0\1\4\17\0\1\136\22\0\1\107\14\0\1\107"+
    "\3\0\1\107\11\0\1\107\10\0\26\21\1\0\1\21"+
    "\1\30\1\21\1\0\1\30\2\0\1\21\3\0\1\21"+
    "\5\0\2\21\1\0\1\21\7\0\4\21\2\0\1\21"+
    "\6\0\10\21\1\117\1\21\1\117\13\21\1\0\1\21"+
    "\1\0\1\21\4\0\1\21\1\0\1\100\1\0\1\117"+
    "\5\0\2\21\1\0\1\21\7\0\4\21\2\0\1\21"+
    "\6\0\10\21\1\117\1\21\1\117\13\21\1\0\1\21"+
    "\1\0\1\21\4\0\1\21\1\0\1\100\1\102\1\117"+
    "\5\0\2\21\1\0\1\21\7\0\4\21\2\0\1\21"+
    "\6\0\26\121\1\0\1\121\1\0\1\121\4\0\1\121"+
    "\3\0\1\121\4\0\3\121\1\0\1\121\7\0\4\121"+
    "\2\0\1\121\16\0\1\100\1\0\1\100\13\0\1\17"+
    "\10\0\1\17\1\124\1\125\1\100\10\0\5\17\7\0"+
    "\2\17\4\0\2\17\11\0\1\100\1\0\1\100\13\0"+
    "\1\17\10\0\1\17\1\124\1\17\1\100\10\0\5\17"+
    "\7\0\2\17\4\0\2\17\27\0\1\17\10\0\2\17"+
    "\1\125\11\0\5\17\7\0\2\17\4\0\2\17\1\0"+
    "\26\121\1\17\1\121\1\0\1\121\4\0\1\121\3\17"+
    "\1\121\4\0\3\121\1\0\1\126\4\17\3\0\4\121"+
    "\2\17\1\121\3\0\2\17\1\0\11\4\1\47\14\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\1\4\1\167"+
    "\2\4\2\0\1\4\6\0\11\4\1\47\1\170\13\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\4\4\2\0"+
    "\1\4\6\0\4\4\1\151\2\4\1\62\1\4\1\47"+
    "\14\4\1\50\1\4\1\0\1\21\4\0\1\151\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\4\4"+
    "\2\0\1\171\6\0\26\132\1\0\1\132\1\0\1\132"+
    "\4\0\1\132\3\0\1\132\5\0\2\132\1\0\1\132"+
    "\7\0\4\132\2\0\1\132\6\0\2\4\1\172\1\173"+
    "\5\4\1\47\14\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\4\1\50\2\0\1\4\5\0\2\21\1\0\1\21"+
    "\7\0\1\173\3\4\2\0\1\4\17\0\1\136\15\0"+
    "\1\174\34\0\1\174\24\0\1\136\15\0\1\175\34\0"+
    "\1\175\13\0\3\4\1\140\2\4\1\140\2\4\1\47"+
    "\14\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\1\140"+
    "\3\4\2\0\1\4\6\0\2\4\1\141\1\137\5\4"+
    "\1\47\1\176\13\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\4\1\50\2\0\1\176\5\0\2\21\1\0\1\21"+
    "\7\0\1\137\3\4\2\0\1\4\6\0\11\4\1\47"+
    "\1\177\13\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\177\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\5\4\1\144\1\145\2\4"+
    "\1\47\14\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\3\4\1\144\2\0\1\4\6\0\6\4\1\145\2\4"+
    "\1\47\14\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\47\1\146\1\200"+
    "\12\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\146\5\0\2\21\1\0\1\21\7\0\2\4"+
    "\1\200\1\4\2\0\1\4\6\0\11\4\1\47\3\4"+
    "\1\147\1\4\1\201\6\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\2\0\1\4\6\0\11\4\1\47"+
    "\5\4\1\201\1\202\5\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\2\0\1\4\6\0\4\4\1\151"+
    "\2\4\1\203\1\4\1\47\14\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\151\1\50\2\0\1\4\5\0\2\21"+
    "\1\0\1\21\7\0\4\4\2\0\1\203\6\0\7\4"+
    "\1\203\1\4\1\47\14\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\2\0\1\203\6\0\1\204\10\4"+
    "\1\205\14\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\1\204\1\4\1\154\6\4"+
    "\1\47\14\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\47\2\4\1\155"+
    "\1\206\10\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\207\3\4\1\206"+
    "\10\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\4\4"+
    "\2\0\1\4\6\0\2\4\1\157\1\4\1\210\4\4"+
    "\1\47\14\4\1\50\1\4\1\0\1\21\4\0\1\210"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\2\4\1\157\2\4\1\160"+
    "\3\4\1\47\14\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\4\1\50\2\0\1\4\5\0\2\21\1\0\1\21"+
    "\7\0\3\4\1\160\2\0\1\4\6\0\4\4\1\161"+
    "\4\4\1\47\4\4\1\211\3\4\1\212\3\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\161\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\11\4\1\47\4\4\1\211\7\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\4\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\4\6\0"+
    "\11\4\1\47\2\4\1\213\5\4\1\212\3\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\2\4\1\214\1\215\5\4\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\1\215\3\4\2\0"+
    "\1\4\6\0\2\4\1\214\6\4\1\47\2\4\1\165"+
    "\11\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\4\4"+
    "\2\0\1\4\6\0\11\4\1\47\1\216\13\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\11\4\1\47\14\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\1\217\1\0\1\4\6\0\4\4"+
    "\1\151\2\4\1\62\1\4\1\47\14\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\151\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\62\1\220"+
    "\5\0\2\4\1\172\1\51\5\4\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\1\51\3\4\2\0"+
    "\1\4\6\0\2\4\1\137\1\221\5\4\1\47\14\4"+
    "\1\50\1\4\1\0\1\21\4\0\1\4\1\50\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\1\221\3\4"+
    "\2\0\1\4\34\0\1\222\1\174\7\0\1\222\24\0"+
    "\1\174\41\0\1\222\1\223\7\0\1\222\24\0\1\223"+
    "\13\0\11\4\1\47\1\224\13\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\4\1\50\2\0\1\224\5\0\2\21"+
    "\1\0\1\21\7\0\4\4\2\0\1\4\6\0\11\4"+
    "\1\47\1\224\6\4\1\225\4\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\4\1\50\2\0\1\224\5\0\2\21"+
    "\1\0\1\21\7\0\4\4\2\0\1\4\6\0\11\4"+
    "\1\47\1\4\1\200\12\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\2\4\1\200\1\4\2\0\1\4\6\0"+
    "\11\4\1\47\5\4\1\201\1\226\5\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\4\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\4\4\2\0\1\4\6\0"+
    "\11\4\1\47\6\4\1\226\5\4\1\50\1\4\1\0"+
    "\1\21\4\0\1\4\1\50\2\0\1\4\5\0\2\21"+
    "\1\0\1\21\7\0\4\4\2\0\1\4\6\0\1\204"+
    "\10\4\1\227\14\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\4\1\50\2\0\1\4\5\0\2\21\1\0\1\21"+
    "\7\0\4\4\2\0\1\4\6\0\11\4\1\227\14\4"+
    "\1\135\1\4\1\0\1\21\4\0\1\4\1\135\2\0"+
    "\1\4\5\0\2\21\1\0\1\21\7\0\4\4\2\0"+
    "\1\4\6\0\11\4\1\230\3\4\1\206\10\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\4\4\2\0\1\4"+
    "\6\0\11\4\1\230\14\4\1\135\1\4\1\0\1\21"+
    "\4\0\1\4\1\135\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\2\0\1\4\6\0\4\4\1\210"+
    "\4\4\1\47\14\4\1\50\1\4\1\0\1\21\4\0"+
    "\1\210\1\50\2\0\1\4\5\0\2\21\1\0\1\21"+
    "\7\0\4\4\2\0\1\4\6\0\11\4\1\47\2\4"+
    "\1\231\5\4\1\212\3\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\4\4\2\0\1\4\6\0\11\4\1\47"+
    "\1\4\1\232\1\231\11\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\2\4\1\232\1\4\2\0\1\4\6\0"+
    "\2\4\1\214\1\233\5\4\1\47\14\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\4\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\1\233\3\4\2\0\1\4"+
    "\6\0\3\4\1\233\5\4\1\47\14\4\1\50\1\4"+
    "\1\0\1\21\4\0\1\4\1\50\2\0\1\4\5\0"+
    "\2\21\1\0\1\21\7\0\1\233\3\4\2\0\1\4"+
    "\6\0\11\4\1\47\14\4\1\50\1\4\1\0\1\21"+
    "\4\0\1\4\1\50\2\0\1\4\5\0\2\21\1\0"+
    "\1\21\7\0\2\4\1\170\1\4\1\217\1\0\1\4"+
    "\76\0\1\234\6\0\61\235\2\0\11\235\1\0\3\235"+
    "\1\0\2\4\1\51\1\221\5\4\1\47\14\4\1\50"+
    "\1\4\1\0\1\21\4\0\1\4\1\50\2\0\1\4"+
    "\5\0\2\21\1\0\1\21\7\0\1\221\3\4\2\0"+
    "\1\4\30\0\1\236\55\0\11\4\1\47\1\224\6\4"+
    "\1\237\4\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\224\5\0\2\21\1\0\1\21\7\0"+
    "\4\4\2\0\1\4\6\0\11\4\1\47\7\4\1\237"+
    "\4\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\4\4"+
    "\2\0\1\4\6\0\11\4\1\47\1\4\1\240\1\231"+
    "\11\4\1\50\1\4\1\0\1\21\4\0\1\4\1\50"+
    "\2\0\1\4\5\0\2\21\1\0\1\21\7\0\2\4"+
    "\1\240\1\4\2\0\1\4\6\0\11\4\1\47\1\4"+
    "\1\240\12\4\1\50\1\4\1\0\1\21\4\0\1\4"+
    "\1\50\2\0\1\4\5\0\2\21\1\0\1\21\7\0"+
    "\2\4\1\240\1\4\2\0\1\4\5\0\47\241\1\0"+
    "\10\241\4\0\5\241\1\242\2\241\3\0\50\241\1\0"+
    "\10\241\4\0\5\241\1\0\2\241\3\0\1\241\15\0"+
    "\1\243\5\0\1\236\54\0\61\244\2\0\11\244\1\0"+
    "\3\244\47\241\1\0\10\241\4\0\5\241\1\235\2\241"+
    "\3\0\1\241\15\0\1\243\62\0\61\244\3\0\10\244"+
    "\1\0\3\244";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\1\11\5\1\2\11\16\1\1\0"+
    "\26\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\4\1\1\0\12\1\2\0"+
    "\60\1\2\0\1\1\2\0\10\1\3\0\2\1\2\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public final int yychar() {
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public final void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexBuzzGermanLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2954) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 26: break;
          case 2: 
            { return JflexBuzzTokenizer.ALPHANUM;
            }
          case 27: break;
          case 3: 
            { return JflexBuzzTokenizer.PUNCTUATION;
            }
          case 28: break;
          case 4: 
            { return JflexBuzzTokenizer.HEARTS;
            }
          case 29: break;
          case 5: 
            { return JflexBuzzTokenizer.POSITIVE;
            }
          case 30: break;
          case 6: 
            { return JflexBuzzTokenizer.NEGATIVE;
            }
          case 31: break;
          case 7: 
            { return JflexBuzzTokenizer.EXCLAMATION;
            }
          case 32: break;
          case 8: 
            { return JflexBuzzTokenizer.QUESTION;
            }
          case 33: break;
          case 9: 
            { return JflexBuzzTokenizer.HAHA;
            }
          case 34: break;
          case 10: 
            { return JflexBuzzTokenizer.HASHTAG;
            }
          case 35: break;
          case 11: 
            { return JflexBuzzTokenizer.USER;
            }
          case 36: break;
          case 12: 
            { return JflexBuzzTokenizer.ARGH;
            }
          case 37: break;
          case 13: 
            { return JflexBuzzTokenizer.OMG;
            }
          case 38: break;
          case 14: 
            { return JflexBuzzTokenizer.YES;
            }
          case 39: break;
          case 15: 
            { return JflexBuzzTokenizer.APOSTROPHE_NT;
            }
          case 40: break;
          case 16: 
            { return JflexBuzzTokenizer.OOPS;
            }
          case 41: break;
          case 17: 
            { return JflexBuzzTokenizer.WOW;
            }
          case 42: break;
          case 18: 
            { return JflexBuzzTokenizer.LOL;
            }
          case 43: break;
          case 19: 
            { return JflexBuzzTokenizer.FUCK;
            }
          case 44: break;
          case 20: 
            { return JflexBuzzTokenizer.DAMN;
            }
          case 45: break;
          case 21: 
            { return JflexBuzzTokenizer.NO;
            }
          case 46: break;
          case 22: 
            { return JflexBuzzTokenizer.LOVE;
            }
          case 47: break;
          case 23: 
            { return JflexBuzzTokenizer.HAPPY;
            }
          case 48: break;
          case 24: 
            { return JflexBuzzTokenizer.APOSTROPHE_NTVE;
            }
          case 49: break;
          case 25: 
            { return JflexBuzzTokenizer.URL;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

/* The following code was generated by JFlex 1.6.1 */

package com.moonshot.buzz.emotion;


import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



@SuppressWarnings("unused")


final class EmotionTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static int ZZ_BUFFERSIZE = 255;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\62\1\74\1\74\1\61\22\0\1\63\2\0\1\76"+
    "\1\75\2\0\1\56\1\36\1\35\1\33\2\0\1\52\1\75\1\71"+
    "\3\55\1\27\4\55\1\47\1\55\1\70\1\32\1\26\1\32\1\31"+
    "\1\75\1\51\1\5\1\54\1\21\1\16\1\12\1\7\1\2\1\3"+
    "\1\23\1\54\1\22\1\13\1\4\1\17\1\6\1\37\1\54\1\11"+
    "\1\15\1\24\1\1\1\25\1\10\1\54\1\14\1\54\1\36\1\73"+
    "\1\35\1\0\1\53\1\0\1\5\1\54\1\21\1\16\1\12\1\67"+
    "\1\2\1\64\1\23\1\54\1\22\1\13\1\4\1\17\1\34\1\20"+
    "\1\54\1\11\1\66\1\65\1\1\1\25\1\72\1\54\1\14\1\54"+
    "\12\0\1\74\32\0\1\63\11\0\1\60\11\0\1\57\1\60\1\0"+
    "\1\45\2\0\1\60\5\0\27\60\1\0\37\60\1\0\u01ca\60\4\0"+
    "\14\60\16\0\5\60\7\0\1\60\1\0\1\60\21\0\160\45\5\60"+
    "\1\0\2\60\2\0\4\60\10\0\1\60\1\0\3\60\1\0\1\60"+
    "\1\0\24\60\1\0\123\60\1\0\213\60\1\0\7\45\236\60\11\0"+
    "\46\60\2\0\1\60\7\0\47\60\11\0\55\45\1\45\1\45\1\0"+
    "\2\45\1\0\2\45\1\0\1\45\10\0\33\60\5\0\3\60\2\45"+
    "\33\0\13\45\5\0\53\60\25\45\12\46\4\0\2\60\1\45\143\60"+
    "\1\0\1\60\7\45\2\0\6\45\2\60\2\45\1\0\4\45\2\60"+
    "\12\46\3\60\2\0\1\60\20\0\1\60\1\45\36\60\33\45\2\0"+
    "\131\60\13\45\1\60\16\0\12\46\41\60\11\45\2\60\4\0\1\60"+
    "\5\0\26\60\4\45\1\60\11\45\1\60\3\45\1\60\5\45\22\0"+
    "\31\60\3\45\104\0\1\60\1\0\13\60\67\0\33\45\1\0\4\45"+
    "\66\60\3\45\1\60\22\45\1\60\7\45\12\60\2\45\2\0\12\46"+
    "\1\0\7\60\1\0\7\60\1\0\3\45\1\0\10\60\2\0\2\60"+
    "\2\0\26\60\1\0\7\60\1\0\1\60\3\0\4\60\2\0\1\45"+
    "\1\60\7\45\2\0\2\45\2\0\3\45\1\60\10\0\1\45\4\0"+
    "\2\60\1\0\3\60\2\45\2\0\12\46\2\60\17\0\3\45\1\0"+
    "\6\60\4\0\2\60\2\0\26\60\1\0\7\60\1\0\2\60\1\0"+
    "\2\60\1\0\2\60\2\0\1\45\1\0\5\45\4\0\2\45\2\0"+
    "\3\45\3\0\1\45\7\0\4\60\1\0\1\60\7\0\12\46\2\45"+
    "\3\60\1\45\13\0\3\45\1\0\11\60\1\0\3\60\1\0\26\60"+
    "\1\0\7\60\1\0\2\60\1\0\5\60\2\0\1\45\1\60\10\45"+
    "\1\0\3\45\1\0\3\45\2\0\1\60\17\0\2\60\2\45\2\0"+
    "\12\46\21\0\3\45\1\0\10\60\2\0\2\60\2\0\26\60\1\0"+
    "\7\60\1\0\2\60\1\0\5\60\2\0\1\45\1\60\7\45\2\0"+
    "\2\45\2\0\3\45\10\0\2\45\4\0\2\60\1\0\3\60\2\45"+
    "\2\0\12\46\1\0\1\60\20\0\1\45\1\60\1\0\6\60\3\0"+
    "\3\60\1\0\4\60\3\0\2\60\1\0\1\60\1\0\2\60\3\0"+
    "\2\60\3\0\3\60\3\0\14\60\4\0\5\45\3\0\3\45\1\0"+
    "\4\45\2\0\1\60\6\0\1\45\16\0\12\46\21\0\3\45\1\0"+
    "\10\60\1\0\3\60\1\0\27\60\1\0\12\60\1\0\5\60\3\0"+
    "\1\60\7\45\1\0\3\45\1\0\4\45\7\0\2\45\1\0\2\60"+
    "\6\0\2\60\2\45\2\0\12\46\22\0\2\45\1\0\10\60\1\0"+
    "\3\60\1\0\27\60\1\0\12\60\1\0\5\60\2\0\1\45\1\60"+
    "\7\45\1\0\3\45\1\0\4\45\7\0\2\45\7\0\1\60\1\0"+
    "\2\60\2\45\2\0\12\46\1\0\2\60\17\0\2\45\1\0\10\60"+
    "\1\0\3\60\1\0\51\60\2\0\1\60\7\45\1\0\3\45\1\0"+
    "\4\45\1\60\10\0\1\45\10\0\2\60\2\45\2\0\12\46\12\0"+
    "\6\60\2\0\2\45\1\0\22\60\3\0\30\60\1\0\11\60\1\0"+
    "\1\60\2\0\7\60\3\0\1\45\4\0\6\45\1\0\1\45\1\0"+
    "\10\45\22\0\2\45\15\0\60\60\1\45\2\60\7\45\5\0\7\60"+
    "\10\45\1\0\12\46\47\0\2\60\1\0\1\60\2\0\2\60\1\0"+
    "\1\60\2\0\1\60\6\0\4\60\1\0\7\60\1\0\3\60\1\0"+
    "\1\60\1\0\1\60\2\0\2\60\1\0\4\60\1\45\2\60\6\45"+
    "\1\0\2\45\1\60\2\0\5\60\1\0\1\60\1\0\6\45\2\0"+
    "\12\46\2\0\4\60\40\0\1\60\12\0\2\45\13\0\2\45\6\0"+
    "\12\46\13\0\1\45\1\0\1\45\1\0\1\45\4\0\2\45\10\60"+
    "\1\0\44\60\4\0\24\45\1\0\2\45\5\60\13\45\1\0\44\45"+
    "\11\0\1\45\71\0\53\60\24\45\1\60\12\46\6\0\6\60\4\45"+
    "\4\60\3\45\1\60\3\45\2\60\7\45\3\60\4\45\15\60\14\45"+
    "\1\60\1\45\12\46\4\45\2\0\46\60\1\0\1\60\5\0\1\60"+
    "\2\0\53\60\1\0\u014d\60\1\0\4\60\2\0\7\60\1\0\1\60"+
    "\1\0\4\60\2\0\51\60\1\0\4\60\2\0\41\60\1\0\4\60"+
    "\2\0\7\60\1\0\1\60\1\0\4\60\2\0\17\60\1\0\71\60"+
    "\1\0\4\60\2\0\103\60\2\0\3\45\40\0\20\60\20\0\125\60"+
    "\14\0\u026c\60\2\0\21\60\1\63\32\60\5\0\113\60\25\0\15\60"+
    "\1\0\4\60\3\45\13\0\22\60\3\45\13\0\22\60\2\45\14\0"+
    "\15\60\1\0\3\60\1\0\2\45\14\0\64\60\40\45\3\0\1\60"+
    "\4\0\1\60\1\45\2\0\12\46\41\0\3\45\2\0\12\46\6\0"+
    "\130\60\10\0\51\60\1\45\1\60\5\0\106\60\12\0\35\60\3\0"+
    "\14\45\4\0\14\45\12\0\12\46\36\60\2\0\5\60\13\0\54\60"+
    "\4\0\21\45\7\60\2\45\6\0\12\46\46\0\27\60\5\45\4\0"+
    "\65\60\12\45\1\0\35\45\2\0\1\45\12\46\6\0\12\46\15\0"+
    "\1\60\130\0\5\45\57\60\21\45\7\60\4\0\12\46\21\0\11\45"+
    "\14\0\3\45\36\60\15\45\2\60\12\46\54\60\16\45\14\0\44\60"+
    "\24\45\10\0\12\46\3\0\3\60\12\46\44\60\122\0\3\45\1\0"+
    "\25\45\4\60\1\45\4\60\3\45\2\60\11\0\300\60\47\45\25\0"+
    "\4\45\u0116\60\2\0\6\60\2\0\46\60\2\0\6\60\2\0\10\60"+
    "\1\0\1\60\1\0\1\60\1\0\1\60\1\0\37\60\2\0\65\60"+
    "\1\0\7\60\1\0\1\60\3\0\3\60\1\0\7\60\3\0\4\60"+
    "\2\0\6\60\4\0\15\60\5\0\3\60\1\0\7\60\3\0\13\63"+
    "\1\0\2\45\13\0\1\57\16\0\1\74\1\74\5\0\1\63\57\0"+
    "\1\63\21\0\1\60\15\0\1\60\20\0\15\60\63\0\41\45\21\0"+
    "\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0\5\60\6\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\4\60\1\0\13\60\2\0"+
    "\4\60\5\0\5\60\4\0\1\60\64\0\2\60\u04b5\0\1\40\52\0"+
    "\1\30\246\0\1\40\127\0\1\30\u049b\0\57\60\1\0\57\60\1\0"+
    "\205\60\6\0\4\60\3\45\2\60\14\0\46\60\1\0\1\60\5\0"+
    "\1\60\2\0\70\60\7\0\1\60\17\0\1\45\27\60\11\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\40\45\57\0\1\60\u01d0\0\1\63"+
    "\2\0\1\45\1\0\2\60\25\0\1\45\15\0\6\45\1\0\5\60"+
    "\5\0\2\60\4\0\126\60\2\0\2\45\2\45\3\60\1\45\132\60"+
    "\1\45\4\60\5\0\51\60\3\0\136\60\21\0\33\60\65\0\20\60"+
    "\u0200\0\u19b6\60\112\0\u51cd\60\63\0\u048d\60\103\0\56\60\2\0\u010d\60"+
    "\3\0\20\60\12\46\2\60\24\0\57\60\4\45\1\0\12\45\1\45"+
    "\31\60\7\0\1\45\106\60\12\0\2\45\45\0\11\60\2\0\147\60"+
    "\2\0\4\60\1\0\4\60\14\0\13\60\115\0\12\60\1\45\3\60"+
    "\1\45\4\60\1\45\27\60\5\45\30\0\64\60\14\0\2\45\62\60"+
    "\21\45\13\0\12\46\6\0\22\45\6\60\3\0\1\60\4\0\12\46"+
    "\34\60\10\45\2\0\27\60\15\45\14\0\35\60\3\0\4\45\57\60"+
    "\16\45\16\0\1\60\12\46\46\0\51\60\16\45\11\0\3\60\1\45"+
    "\10\60\2\45\2\0\12\46\6\0\27\60\3\0\1\60\1\45\4\0"+
    "\60\60\1\45\1\60\3\45\2\60\2\45\5\60\2\45\1\60\1\45"+
    "\1\60\30\0\3\60\2\0\13\60\5\45\2\0\3\60\2\45\12\0"+
    "\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0\7\60\221\0"+
    "\43\60\10\45\1\0\2\45\2\0\12\46\6\0\u2ba4\60\14\0\27\60"+
    "\4\0\61\60\u2104\0\u016e\60\2\0\152\60\46\0\7\60\14\0\5\60"+
    "\5\0\1\60\1\45\12\60\1\0\15\60\1\0\5\60\1\0\1\60"+
    "\1\0\2\60\1\0\2\60\1\0\154\60\41\0\u016b\60\22\0\100\60"+
    "\2\0\66\60\50\0\14\60\4\0\20\45\20\0\7\45\111\0\5\60"+
    "\1\0\207\60\6\0\1\50\14\0\12\46\7\0\32\60\6\0\32\60"+
    "\3\0\1\45\7\0\131\60\3\0\6\60\2\0\6\60\2\0\6\60"+
    "\2\0\3\60\43\0\14\60\1\0\32\60\1\0\23\60\1\0\2\60"+
    "\1\0\17\60\2\0\16\60\42\0\173\60\u0102\0\1\45\202\0\35\60"+
    "\3\0\61\60\57\0\37\60\21\0\21\60\1\0\10\60\66\0\36\60"+
    "\2\0\44\60\4\0\10\60\60\0\236\60\2\0\12\46\u0356\0\6\60"+
    "\2\0\1\60\1\0\54\60\1\0\2\60\3\0\1\60\2\0\27\60"+
    "\252\0\26\60\12\0\32\60\106\0\70\60\6\0\2\60\100\0\1\60"+
    "\3\45\1\0\2\45\5\0\4\45\4\60\1\0\3\60\1\0\33\60"+
    "\4\0\3\45\4\0\1\45\40\0\35\60\203\0\66\60\12\0\26\60"+
    "\12\0\23\60\215\0\111\60\u03b7\0\3\45\65\60\17\45\37\0\12\46"+
    "\20\0\3\45\55\60\13\45\25\0\31\60\7\0\12\46\6\0\3\45"+
    "\44\60\16\45\1\0\12\46\100\0\3\45\60\60\16\45\4\60\13\0"+
    "\12\46\u04a6\0\53\60\15\45\10\0\12\46\u0936\0\u036f\60\u0c91\0\u042f\60"+
    "\u33d1\0\u0239\60\u04c7\0\105\60\13\0\1\60\56\45\20\0\4\45\15\60"+
    "\u4060\0\2\60\u2163\0\5\45\3\0\6\45\10\0\10\45\2\0\7\45"+
    "\36\0\4\45\224\0\3\45\u01bb\0\125\60\1\0\107\60\1\0\2\60"+
    "\2\0\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0\1\60"+
    "\1\0\7\60\1\0\101\60\1\0\4\60\2\0\10\60\1\0\7\60"+
    "\1\0\34\60\1\0\4\60\1\0\5\60\1\0\1\60\3\0\7\60"+
    "\1\0\u0154\60\2\0\31\60\1\0\31\60\1\0\37\60\1\0\31\60"+
    "\1\0\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0\37\60"+
    "\1\0\31\60\1\0\10\60\2\0\62\46\u1600\0\4\60\1\0\33\60"+
    "\1\0\2\60\1\0\1\60\2\0\1\60\1\0\12\60\1\0\4\60"+
    "\1\0\1\60\1\0\1\60\6\0\1\60\4\0\1\60\1\0\1\60"+
    "\1\0\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0\1\60"+
    "\1\0\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0\2\60"+
    "\1\0\1\60\2\0\4\60\1\0\7\60\1\0\4\60\1\0\4\60"+
    "\1\0\1\60\1\0\12\60\1\0\21\60\5\0\3\60\1\0\5\60"+
    "\1\0\21\60\u047d\0\1\40\116\0\2\40\302\0\2\40\1\42\1\40"+
    "\73\0\1\40\1\30\2\0\5\30\1\41\13\30\2\0\1\42\6\0"+
    "\1\42\u0156\0\5\40\1\0\1\40\2\0\7\40\2\0\1\42\1\0"+
    "\2\41\1\43\1\0\2\40\1\0\3\40\1\41\1\0\2\42\1\41"+
    "\1\0\1\42\3\0\1\43\1\41\1\0\1\41\1\0\1\41\2\0"+
    "\2\43\1\0\1\40\1\0\1\44\1\0\1\44\3\0\1\40\23\0"+
    "\1\40\u09b0\0\ua6d7\60\51\0\u1035\60\13\0\336\60\u3fe2\0\u021e\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\45\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\16\2\1\1\1\2\1\3\4\1\1\2"+
    "\1\4\1\5\1\6\1\7\1\10\1\2\3\1\4\2"+
    "\1\0\1\2\1\11\30\2\1\0\1\4\1\0\2\12"+
    "\2\0\1\4\2\0\1\2\1\4\1\0\1\4\1\2"+
    "\2\13\1\1\1\0\1\13\1\14\3\2\1\15\1\16"+
    "\1\2\2\11\2\2\1\17\1\20\10\2\1\21\6\2"+
    "\1\22\2\2\1\23\2\2\1\24\1\12\7\2\1\25"+
    "\2\2\1\26\2\2\2\21\1\27\1\30\7\2\2\0"+
    "\3\2\1\31\2\2\1\22\1\32\1\33\2\0\1\34"+
    "\1\35\2\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\77\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\77\0\77\0\77\0\77\0\77\0\u05a9\0\u05e8\0\u0627"+
    "\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u04ad\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u04ec\0\u0f81"+
    "\0\u0fc0\0\u052b\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u05e8\0\u1179\0\u11b8\0\u11f7\0\u0627\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u1332\0\u1371\0\u089d\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u0ccc\0\u191a\0\u1959\0\u0dc8\0\77"+
    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u1b90\0\u1bcf\0\u15e7\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u17a0\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u1bcf\0\u203d\0\u207c"+
    "\0\u1d49\0\u1e06\0\u1e84\0\u20bb\0\u20fa\0\u1fbf\0\u207c\0\u2139"+
    "\0\u2178\0\u21b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\6\4\1\21\1\22\1\23\1\24\1\25\1\2\1\10"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\2\1\22\1\36\1\37\1\40\1\2\1\22\1\4"+
    "\1\22\2\2\1\4\1\41\2\2\1\42\1\4\1\16"+
    "\1\43\1\25\1\2\1\44\3\2\1\37\100\0\1\3"+
    "\1\45\23\4\1\0\1\22\4\0\1\4\2\0\1\4"+
    "\6\0\2\22\3\0\1\22\1\4\1\22\2\46\1\4"+
    "\3\0\4\4\2\0\1\4\5\0\25\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\2\4\1\47\1\4\1\50\20\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\1\47\3\4\2\0"+
    "\1\4\5\0\1\51\24\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\4\4\2\0\1\4\5\0\2\4"+
    "\1\52\1\4\1\7\3\4\1\53\14\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\1\52\3\4\2\0"+
    "\1\4\5\0\3\4\1\54\1\4\1\55\17\4\1\0"+
    "\1\22\4\0\1\55\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\1\56\5\4\1\57\16\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\3\4\1\57\2\0"+
    "\1\4\5\0\5\4\1\60\1\4\1\61\15\4\1\0"+
    "\1\22\4\0\1\60\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\61\5\0\10\4\1\62\1\63\13\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\1\64\2\4\1\65\1\4\1\66\4\4\1\67"+
    "\12\4\1\0\1\22\4\0\1\66\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\4\4\2\0\1\4\5\0\11\4\1\70\1\4\1\71"+
    "\11\4\1\0\1\22\4\0\1\4\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\4\4\2\0\1\4\5\0\2\4\1\72\2\4\1\73"+
    "\6\4\1\74\10\4\1\0\1\22\4\0\1\73\2\0"+
    "\1\4\6\0\2\22\3\0\1\22\1\4\1\22\2\46"+
    "\1\4\3\0\1\72\1\4\1\74\1\4\2\0\1\4"+
    "\5\0\4\4\1\75\10\4\1\76\7\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\5\4\1\77\10\4\1\100\6\4\1\0\1\22"+
    "\4\0\1\77\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\33\0\1\23\2\0\1\101\14\0\1\101\20\0\1\101"+
    "\7\0\25\22\1\0\1\22\4\0\1\22\2\0\1\22"+
    "\6\0\2\22\3\0\3\22\2\0\1\22\3\0\4\22"+
    "\2\0\1\22\36\0\1\101\14\0\1\101\20\0\1\101"+
    "\24\0\1\102\1\0\1\102\12\0\2\103\1\102\1\104"+
    "\1\102\12\0\1\103\3\0\1\103\52\0\1\105\2\106"+
    "\1\107\11\0\1\105\2\0\1\106\3\0\1\106\11\0"+
    "\1\105\40\0\1\110\2\111\1\0\2\112\7\0\1\110"+
    "\2\0\1\111\3\0\1\111\11\0\1\110\7\0\25\4"+
    "\1\0\1\22\2\0\1\110\1\111\1\113\1\0\1\112"+
    "\1\30\6\0\1\22\1\114\2\0\1\111\1\22\1\4"+
    "\1\22\1\115\1\46\1\4\3\0\4\4\1\110\1\0"+
    "\1\4\5\0\15\22\1\116\1\22\1\116\5\22\1\0"+
    "\1\22\3\0\1\103\1\117\1\102\1\104\1\116\6\0"+
    "\2\22\2\0\1\103\3\22\1\103\1\0\1\22\3\0"+
    "\4\22\2\0\1\22\5\0\25\120\1\0\1\121\4\0"+
    "\1\120\2\0\1\120\5\0\1\122\1\123\1\121\1\0"+
    "\2\124\2\120\1\121\2\0\1\122\3\0\4\120\2\0"+
    "\1\120\5\0\25\125\1\0\1\125\4\0\1\125\2\0"+
    "\1\125\6\0\2\125\3\0\3\125\2\0\1\125\3\0"+
    "\4\125\2\0\1\125\66\0\1\2\15\0\2\4\1\47"+
    "\1\4\1\50\20\4\1\0\1\22\4\0\1\4\2\0"+
    "\1\4\6\0\2\22\3\0\1\22\1\4\1\22\2\46"+
    "\1\4\3\0\1\47\1\126\2\4\2\0\1\4\5\0"+
    "\1\56\5\4\1\57\16\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\1\4\1\127\1\4\1\57\2\0"+
    "\1\4\5\0\5\4\1\60\1\4\1\61\15\4\1\0"+
    "\1\22\4\0\1\60\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\130\5\0\1\4\1\45\1\131\22\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\1\131\3\4\2\0"+
    "\1\4\5\0\25\132\6\0\1\132\2\0\1\132\14\0"+
    "\1\132\3\0\1\132\3\0\4\132\2\0\1\132\5\0"+
    "\2\4\1\47\1\4\1\133\20\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\1\47\3\4\2\0\1\4"+
    "\5\0\2\4\1\134\1\4\1\135\12\4\1\136\5\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\136\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\1\134"+
    "\3\4\2\0\1\4\5\0\4\4\1\137\20\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\2\4\1\134\1\4\1\134\20\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\1\134\3\4"+
    "\2\0\1\4\5\0\1\4\2\140\5\4\1\53\14\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\1\140"+
    "\3\4\2\0\1\4\5\0\1\4\1\141\1\4\1\54"+
    "\2\4\1\142\16\4\1\0\1\22\4\0\1\4\2\0"+
    "\1\4\6\0\2\22\3\0\1\22\1\4\1\22\2\46"+
    "\1\4\3\0\3\4\1\142\2\0\1\4\5\0\3\4"+
    "\1\54\1\4\1\55\11\4\1\143\5\4\1\0\1\22"+
    "\4\0\1\55\2\0\1\143\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\1\144\17\4\1\145\4\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\2\0\1\4\5\0"+
    "\1\144\5\4\1\57\16\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\3\4\1\57\2\0\1\4\5\0"+
    "\5\4\1\146\1\4\1\147\15\4\1\0\1\22\4\0"+
    "\1\146\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\2\0\1\147\5\0"+
    "\5\4\1\146\1\4\1\61\15\4\1\0\1\22\4\0"+
    "\1\146\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\2\0\1\61\5\0"+
    "\10\4\1\62\1\150\13\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\4\4\2\0\1\4\5\0\4\4"+
    "\1\151\4\4\1\150\13\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\4\4\2\0\1\4\5\0\1\64"+
    "\4\4\1\64\16\4\1\152\1\0\1\22\4\0\1\64"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\4\4\2\0\1\4\5\0\3\4"+
    "\1\65\1\153\1\4\1\154\16\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\3\4\1\154\2\0\1\4"+
    "\5\0\1\64\4\4\1\155\4\4\1\156\11\4\1\152"+
    "\1\0\1\22\4\0\1\155\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\5\0\1\64\2\4\1\65\1\4\1\155"+
    "\4\4\1\67\12\4\1\0\1\22\4\0\1\155\2\0"+
    "\1\4\6\0\2\22\3\0\1\22\1\4\1\22\2\46"+
    "\1\4\3\0\4\4\2\0\1\4\5\0\4\4\1\157"+
    "\4\4\1\160\2\4\1\161\10\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\2\4\1\161\1\4\2\0"+
    "\1\4\5\0\11\4\1\160\1\4\1\71\11\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\2\4\1\162\17\4\1\163\2\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\1\162\3\4"+
    "\2\0\1\4\5\0\5\4\1\164\17\4\1\0\1\22"+
    "\4\0\1\164\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\2\4\1\162\2\4\1\164\6\4\1\74\10\4"+
    "\1\0\1\22\4\0\1\164\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\1\162"+
    "\1\4\1\74\1\4\2\0\1\4\5\0\3\4\1\165"+
    "\1\166\20\4\1\0\1\22\4\0\1\4\2\0\1\4"+
    "\6\0\2\22\3\0\1\22\1\4\1\22\2\46\1\4"+
    "\3\0\4\4\2\0\1\4\5\0\4\4\1\166\10\4"+
    "\1\76\7\4\1\0\1\22\4\0\1\4\2\0\1\4"+
    "\6\0\2\22\3\0\1\22\1\4\1\22\2\46\1\4"+
    "\3\0\4\4\2\0\1\4\5\0\5\4\1\167\17\4"+
    "\1\0\1\22\4\0\1\167\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\5\0\5\4\1\167\10\4\1\100\6\4"+
    "\1\0\1\22\4\0\1\167\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\22\0\1\102\1\0\1\102\14\0\1\102"+
    "\1\0\1\102\55\0\1\102\1\0\1\102\14\0\1\102"+
    "\1\104\1\102\75\0\1\104\66\0\1\170\2\0\1\170"+
    "\77\0\1\105\14\0\1\105\20\0\1\105\34\0\1\31"+
    "\2\0\1\31\77\0\1\110\14\0\1\110\20\0\1\110"+
    "\7\0\25\4\1\0\1\22\2\0\1\110\1\0\1\4"+
    "\2\0\1\4\6\0\1\22\1\114\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\1\110\1\0\1\4"+
    "\5\0\25\22\1\31\1\22\1\0\1\31\2\0\1\22"+
    "\2\0\1\22\6\0\2\22\3\0\3\22\2\0\1\22"+
    "\3\0\4\22\2\0\1\22\5\0\25\132\4\0\1\110"+
    "\1\0\1\132\2\0\1\132\7\0\1\110\4\0\1\132"+
    "\3\0\1\132\3\0\4\132\1\110\1\0\1\132\5\0"+
    "\15\22\1\116\1\22\1\116\5\22\1\0\1\22\4\0"+
    "\1\22\1\102\1\0\1\116\6\0\2\22\3\0\3\22"+
    "\2\0\1\22\3\0\4\22\2\0\1\22\5\0\15\22"+
    "\1\116\1\22\1\116\5\22\1\0\1\22\4\0\1\22"+
    "\1\102\1\104\1\116\6\0\2\22\3\0\3\22\2\0"+
    "\1\22\3\0\4\22\2\0\1\22\5\0\25\120\1\0"+
    "\1\120\4\0\1\120\2\0\1\120\5\0\2\122\1\120"+
    "\1\0\2\124\3\120\2\0\1\122\3\0\4\120\2\0"+
    "\1\120\5\0\25\122\1\0\1\122\4\0\1\122\2\0"+
    "\1\122\5\0\3\122\3\0\3\122\2\0\1\122\3\0"+
    "\4\122\2\0\1\122\5\0\25\122\1\0\1\123\4\0"+
    "\1\122\2\0\1\122\5\0\1\122\2\123\3\0\2\122"+
    "\1\123\2\0\1\122\3\0\4\122\2\0\1\122\5\0"+
    "\25\124\1\0\1\124\4\0\1\124\2\0\1\124\7\0"+
    "\1\124\1\0\5\124\6\0\4\124\2\0\1\124\5\0"+
    "\25\4\1\0\1\22\4\0\1\4\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\1\4\1\171\2\4\2\0\1\4\5\0\17\4\1\172"+
    "\5\4\1\0\1\22\4\0\1\4\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\4\4\2\0\1\4\5\0\5\4\1\146\1\4\1\61"+
    "\15\4\1\0\1\22\4\0\1\146\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\4\4\2\0\1\173\5\0\2\4\1\131\22\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\1\131\3\4"+
    "\2\0\1\4\5\0\25\132\6\0\1\132\2\0\1\132"+
    "\14\0\1\132\1\0\2\46\1\132\3\0\4\132\2\0"+
    "\1\132\5\0\2\4\1\134\1\4\1\135\12\4\1\174"+
    "\5\4\1\0\1\22\4\0\1\4\2\0\1\174\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\1\134\3\4\2\0\1\4\5\0\17\4\1\175\5\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\175\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\5\0\2\4\1\176\1\4\1\177\20\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\1\176"+
    "\3\4\2\0\1\4\5\0\1\4\2\140\22\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\1\140\3\4"+
    "\2\0\1\4\5\0\1\4\1\141\23\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\1\4\1\141\4\4\1\142\16\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\3\4\1\142\2\0"+
    "\1\4\5\0\14\4\1\200\2\4\1\143\5\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\143\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\2\4\1\200"+
    "\1\4\2\0\1\4\5\0\1\144\17\4\1\201\4\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\5\0\20\4\1\201\1\202\3\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\5\4\1\146\1\4\1\203\15\4\1\0"+
    "\1\22\4\0\1\146\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\203\5\0\7\4\1\203\15\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\2\0\1\203\5\0"+
    "\4\4\1\204\4\4\1\150\13\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\2\0\1\4\5\0"+
    "\4\4\1\204\5\4\1\205\12\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\2\0\1\4\5\0"+
    "\11\4\1\206\2\4\1\207\7\4\1\152\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\2\4\1\207\1\4"+
    "\2\0\1\4\5\0\4\4\1\153\1\210\17\4\1\0"+
    "\1\22\4\0\1\210\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\4\4\1\153\1\4\1\154\16\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\3\4\1\154"+
    "\2\0\1\4\5\0\1\64\4\4\1\155\4\4\1\211"+
    "\11\4\1\152\1\0\1\22\4\0\1\155\2\0\1\4"+
    "\6\0\2\22\3\0\1\22\1\4\1\22\2\46\1\4"+
    "\3\0\4\4\2\0\1\4\5\0\12\4\1\211\12\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\5\0\2\4\1\212\1\4\1\213\20\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\1\212"+
    "\3\4\2\0\1\4\5\0\4\4\1\213\4\4\1\160"+
    "\2\4\1\161\10\4\1\0\1\22\4\0\1\4\2\0"+
    "\1\4\6\0\2\22\3\0\1\22\1\4\1\22\2\46"+
    "\1\4\3\0\2\4\1\161\1\4\2\0\1\4\5\0"+
    "\14\4\1\161\10\4\1\0\1\22\4\0\1\4\2\0"+
    "\1\4\6\0\2\22\3\0\1\22\1\4\1\22\2\46"+
    "\1\4\3\0\2\4\1\161\1\4\2\0\1\4\5\0"+
    "\2\4\1\162\17\4\1\214\2\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\1\162\3\4\2\0\1\4"+
    "\5\0\22\4\1\214\1\215\1\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\1\4\1\215\2\4\2\0"+
    "\1\4\5\0\3\4\1\216\12\4\1\217\6\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\3\4\1\216\1\166\20\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\17\4\1\220\5\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\4\4\2\0\1\4\5\0\25\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\1\221\1\0\1\4\5\0\5\4\1\146\1\4\1\61"+
    "\15\4\1\0\1\22\4\0\1\146\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\4\4\2\0\1\61\1\222\4\0\17\4\1\223\5\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\223\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\5\0\13\4\1\224\3\4\1\223\5\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\223\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\5\0\2\4\1\225\1\4\1\134\20\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\1\225"+
    "\3\4\2\0\1\4\5\0\2\4\1\52\1\4\1\177"+
    "\20\4\1\0\1\22\4\0\1\4\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\1\52\3\4\2\0\1\4\5\0\14\4\1\200\10\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\2\4"+
    "\1\200\1\4\2\0\1\4\5\0\20\4\1\201\1\226"+
    "\3\4\1\0\1\22\4\0\1\4\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\4\4\2\0\1\4\5\0\21\4\1\226\3\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\4\4\1\204\5\4\1\227\12\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\12\4\1\227\1\230\11\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\11\4\1\206\2\4\1\207\10\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\2\4\1\207\1\4"+
    "\2\0\1\4\5\0\14\4\1\207\10\4\1\0\1\22"+
    "\4\0\1\4\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\2\4\1\207\1\4"+
    "\2\0\1\4\5\0\5\4\1\210\17\4\1\0\1\22"+
    "\4\0\1\210\2\0\1\4\6\0\2\22\3\0\1\22"+
    "\1\4\1\22\2\46\1\4\3\0\4\4\2\0\1\4"+
    "\5\0\2\4\1\231\22\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\4\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\1\231\3\4\2\0\1\4\5\0"+
    "\2\4\1\231\1\4\1\213\20\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\1\231\3\4\2\0\1\4"+
    "\5\0\22\4\1\214\1\232\1\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\1\4\1\232\2\4\2\0"+
    "\1\4\5\0\23\4\1\232\1\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\1\4\1\232\2\4\2\0"+
    "\1\4\5\0\3\4\1\216\12\4\1\233\6\4\1\0"+
    "\1\22\4\0\1\4\2\0\1\4\6\0\2\22\3\0"+
    "\1\22\1\4\1\22\2\46\1\4\3\0\4\4\2\0"+
    "\1\4\5\0\16\4\1\233\6\4\1\0\1\22\4\0"+
    "\1\4\2\0\1\4\6\0\2\22\3\0\1\22\1\4"+
    "\1\22\2\46\1\4\3\0\4\4\2\0\1\4\5\0"+
    "\25\4\1\0\1\22\4\0\1\4\2\0\1\4\6\0"+
    "\2\22\3\0\1\22\1\4\1\22\2\46\1\4\3\0"+
    "\2\4\1\172\1\4\1\221\1\0\1\4\75\0\1\234"+
    "\5\0\61\235\2\0\11\235\1\0\2\235\1\0\13\4"+
    "\1\236\3\4\1\223\5\4\1\0\1\22\4\0\1\4"+
    "\2\0\1\223\6\0\2\22\3\0\1\22\1\4\1\22"+
    "\2\46\1\4\3\0\4\4\2\0\1\4\5\0\13\4"+
    "\1\236\11\4\1\0\1\22\4\0\1\4\2\0\1\4"+
    "\6\0\2\22\3\0\1\22\1\4\1\22\2\46\1\4"+
    "\3\0\4\4\2\0\1\4\5\0\2\4\1\225\1\4"+
    "\1\52\20\4\1\0\1\22\4\0\1\4\2\0\1\4"+
    "\6\0\2\22\3\0\1\22\1\4\1\22\2\46\1\4"+
    "\3\0\1\225\3\4\2\0\1\4\5\0\12\4\1\227"+
    "\1\237\11\4\1\0\1\22\4\0\1\4\2\0\1\4"+
    "\6\0\2\22\3\0\1\22\1\4\1\22\2\46\1\4"+
    "\3\0\4\4\2\0\1\4\5\0\13\4\1\237\11\4"+
    "\1\0\1\22\4\0\1\4\2\0\1\4\6\0\2\22"+
    "\3\0\1\22\1\4\1\22\2\46\1\4\3\0\4\4"+
    "\2\0\1\4\4\0\61\240\3\0\5\240\1\241\2\240"+
    "\3\0\61\240\3\0\5\240\1\0\2\240\3\0\61\242"+
    "\2\0\11\242\1\0\2\242\61\240\3\0\5\240\1\235"+
    "\2\240\3\0\61\242\3\0\10\242\1\0\2\242";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8694];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\5\1\5\11\10\1\1\0"+
    "\32\1\1\0\1\1\1\0\2\1\2\0\1\1\2\0"+
    "\2\1\1\0\5\1\1\0\44\1\1\11\30\1\2\0"+
    "\11\1\2\0\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	public static final int ALPHANUM          = EmotionTokenizer.ALPHANUM;
	public static final int APOSTROPHE        = EmotionTokenizer.APOSTROPHE;
	public static final int URL = EmotionTokenizer.URL;
	public static final int HEARTS = EmotionTokenizer.HEARTS;
	public static final int POSITIVE = EmotionTokenizer.POSITIVE;
	public static final int NEGATIVE = EmotionTokenizer.NEGATIVE;
	public static final int SAD = EmotionTokenizer.SAD;
	public static final int ANGER = EmotionTokenizer.ANGER;
	public static final int FEAR = EmotionTokenizer.FEAR;
	public static final int DISGUST = EmotionTokenizer.DISGUST;
	public static final int HAHA = EmotionTokenizer.HAHA;
	public static final int OMG = EmotionTokenizer.OMG;
	public static final int WOW = EmotionTokenizer.WOW;
	public static final int REALLY = EmotionTokenizer.REALLY;
	public static final int SO = EmotionTokenizer.SO;
	public static final int DAMN = EmotionTokenizer.DAMN;
	public static final int OOPS = EmotionTokenizer.OOPS;
	public static final int NO = EmotionTokenizer.NO;
	public static final int LOL = EmotionTokenizer.LOL;
	public static final int FUCK = EmotionTokenizer.FUCK;
	public static final int SHIT = EmotionTokenizer.SHIT;
	public static final int HAPPY = EmotionTokenizer.HAPPY;
	public static final int LOVE = EmotionTokenizer.LOVE;
	public static final int YES = EmotionTokenizer.YES;
	public static final int ARGH = EmotionTokenizer.ARGH;
	public static final int UGH = EmotionTokenizer.UGH;
	public static final int LMAO = EmotionTokenizer.LMAO;
	public static final int USER = EmotionTokenizer.USER;
	public static final int HASHTAG = EmotionTokenizer.HASHTAG;
	
	public static final String [] TOKEN_TYPES = EmotionTokenizer.TOKEN_TYPES;

	public int yychar()
	{
	    return yychar;
	}
	
	/**
	 * Fills CharTermAttribute with the current token text.
	 */
	public void getText(CharTermAttribute t) {
	    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}
	
	/**
	  * Sets the scanner buffer size in chars
	  */
	  public void setBufferSize(int numChars) {
	      ZZ_BUFFERSIZE = numChars;
	      char[] newZzBuffer = new char[ZZ_BUFFERSIZE];
	      System.arraycopy(zzBuffer, 0, newZzBuffer, 0, Math.min(zzBuffer.length, ZZ_BUFFERSIZE));
	      zzBuffer = newZzBuffer;
	  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  EmotionTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2970) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 31: break;
          case 2: 
            { return ALPHANUM;
            }
          case 32: break;
          case 3: 
            { return HEARTS;
            }
          case 33: break;
          case 4: 
            { return POSITIVE;
            }
          case 34: break;
          case 5: 
            { return SAD;
            }
          case 35: break;
          case 6: 
            { return ANGER;
            }
          case 36: break;
          case 7: 
            { return FEAR;
            }
          case 37: break;
          case 8: 
            { return DISGUST;
            }
          case 38: break;
          case 9: 
            { return HAHA;
            }
          case 39: break;
          case 10: 
            { return NEGATIVE;
            }
          case 40: break;
          case 11: 
            { return HASHTAG;
            }
          case 41: break;
          case 12: 
            { return USER;
            }
          case 42: break;
          case 13: 
            { return UGH;
            }
          case 43: break;
          case 14: 
            { return APOSTROPHE;
            }
          case 44: break;
          case 15: 
            { return ARGH;
            }
          case 45: break;
          case 16: 
            { return OMG;
            }
          case 46: break;
          case 17: 
            { return LOVE;
            }
          case 47: break;
          case 18: 
            { return YES;
            }
          case 48: break;
          case 19: 
            { return SO;
            }
          case 49: break;
          case 20: 
            { return NO;
            }
          case 50: break;
          case 21: 
            { return OOPS;
            }
          case 51: break;
          case 22: 
            { return WOW;
            }
          case 52: break;
          case 23: 
            { return LMAO;
            }
          case 53: break;
          case 24: 
            { return LOL;
            }
          case 54: break;
          case 25: 
            { return FUCK;
            }
          case 55: break;
          case 26: 
            { return SHIT;
            }
          case 56: break;
          case 27: 
            { return DAMN;
            }
          case 57: break;
          case 28: 
            { return HAPPY;
            }
          case 58: break;
          case 29: 
            { return REALLY;
            }
          case 59: break;
          case 30: 
            { return URL;
            }
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
